(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    678210,      13743]
NotebookOptionsPosition[    662112,      13379]
NotebookOutlinePosition[    662697,      13398]
CellTagsIndexPosition[    662654,      13395]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Importance of variables investigation", "Title",
 CellID->832223920,ExpressionUUID->"5193d711-90cb-485b-8804-7685d6872418"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.661475813829879*^9, 3.661475818374817*^9}},
 CellID->1274006278,ExpressionUUID->"ca08e25c-8ff4-42f0-baec-29aeb63a6ec5"],

Cell["\<\
This blog post demonstrates a procedure for variable importance investigation \
of mixed categorical and numerical data. \
\>", "Text",
 CellChangeTimes->{{3.661475820612722*^9, 3.661475886133741*^9}, {
  3.661476859161768*^9, 3.6614768623147697`*^9}, {3.66147690049336*^9, 
  3.661476912305035*^9}},
 CellID->1811553756,ExpressionUUID->"a9f6f076-f2db-4334-b0b1-c8a390d4a905"],

Cell[TextData[{
 "The procedure was used in a previous blog ",
 ButtonBox["\[OpenCurlyDoubleQuote]Classification and association rules for \
census income\[NonBreakingSpace]data\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2014/03/30/\
classification-and-association-rules-for-census-income-data/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2014/03/30/classification-\
and-association-rules-for-census-income-data/"],
 ", [1]. It is implemented in the package ",
 ButtonBox["VariableImportanceByClassifiers.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"],
 ", [2]. I took it from [5] (described also below)."
}], "Text",
 CellChangeTimes->{{3.6614770388425083`*^9, 3.661477061199494*^9}, {
  3.6614771595848427`*^9, 3.661477228522538*^9}, {3.661477437182743*^9, 
  3.661477449231327*^9}, {3.661477523548387*^9, 3.661477597935834*^9}, {
  3.661479042036462*^9, 3.66147906677232*^9}, {3.661479389356593*^9, 
  3.661479390179748*^9}, {3.661479702161281*^9, 3.661479712319598*^9}},
 CellID->1908313573,ExpressionUUID->"d3b95bb5-e269-4c3a-9d6c-cc0e0b2c4f93"],

Cell[TextData[{
 "The document ",
 ButtonBox["\[OpenCurlyDoubleQuote]Importance of variables investigation \
guide\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Importance-of-variables-investigation-guide.pdf"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Importance-of-variables-investigation-guide.pdf"],
 ", [3], has much more extensive descriptions, explanations, and code for \
importance of variables investigation using classifiers, Mosaic plots, \
Decision trees, Association rules, and Dimension reduction. "
}], "Text",
 CellChangeTimes->{{3.661476919720887*^9, 3.661477016884674*^9}, {
  3.661477276561549*^9, 3.661477298650231*^9}, {3.661477455463909*^9, 
  3.6614774586384907`*^9}, {3.661477493556609*^9, 3.6614775055376596`*^9}, {
  3.6614776009374657`*^9, 3.661477601375925*^9}, {3.6614784043551702`*^9, 
  3.6614784056014137`*^9}, {3.6614796514914703`*^9, 3.6614796536735563`*^9}},
 CellID->357953466,ExpressionUUID->"1bc3b04c-b7b6-40c2-bc98-799479ea83c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Procedure outline", "Section",
 CellChangeTimes->{{3.660679972483379*^9, 3.6606799777978354`*^9}},
 CellID->1022207815,ExpressionUUID->"12d079c2-2089-47df-b782-b41376c50a09"],

Cell["\<\
Here we describe the procedure used (that is also done in [3]). \
\>", "Text",
 CellChangeTimes->{{3.661479688180941*^9, 3.6614797270465508`*^9}},
 CellID->377570705,ExpressionUUID->"465ef130-4720-4a86-b180-3614efc8781b"],

Cell["Split the data into training and testing datasets.", "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660679989576912*^9}, {
  3.661431495115939*^9, 3.661431500464199*^9}},
 CellID->16662050,ExpressionUUID->"41e615dd-e50e-485a-bf28-85a70510716d"],

Cell["Build a classifier with the training set.", "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660679989576912*^9}, 
   3.661431495115939*^9},
 CellID->866200240,ExpressionUUID->"f464ae33-ed53-472e-a418-ed7a88d6fb99"],

Cell["\<\
Verify using the test set that good classification results are obtained. Find \
the baseline accuracy.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660679998441793*^9}, {
  3.6606820035337353`*^9, 3.660682012656908*^9}},
 CellID->435790667,ExpressionUUID->"725c17ef-239a-4a0f-b029-ca7898ad94cf"],

Cell[TextData[{
 "If the number of variables (attributes) is ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "4f9d4682-39e8-419d-8b55-7c19ab64fb48"],
 " for each ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "31d5e373-0a83-47c7-adca-b95bf5082aa9"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[LessEqual]", "i", "\[LessEqual]", "k"}], TraditionalForm]],
  ExpressionUUID->"830db81f-dab3-4793-a3a2-03647e54b85b"],
 ":"
}], "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660680059056155*^9}, {
  3.9323277463953047`*^9, 3.932327748093452*^9}},
 CellID->1414503999,ExpressionUUID->"61f14084-2353-45d7-840d-c16c9903eed8"],

Cell[TextData[{
 "Shuffle the values of the ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],ExpressionUUID->
  "b6041ba3-7468-4d98-a930-2ecfa261ae5e"],
 "-th column of the test data and find the classification success rates."
}], "Subitem",
 CellChangeTimes->{
  3.660682063062142*^9, {3.660682129072432*^9, 3.660682157771956*^9}, {
   3.661431504509706*^9, 3.661431505106032*^9}, {3.9323277333357363`*^9, 
   3.932327758959227*^9}},
 TextJustification->0.25,
 CellID->924738903,ExpressionUUID->"2d25358d-51e8-45d7-861f-a4b969b1f3bf"],

Cell[TextData[{
 "Compare the obtained ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "70218d0b-0883-4534-be3c-67962d087242"],
 " classification success rates between each other and with the success rates \
obtained by the un-shuffled test data."
}], "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660679994909343*^9}, {
  3.6606800885980673`*^9, 3.66068009371677*^9}},
 CellID->747589382,ExpressionUUID->"a7005ea5-5764-4ed5-8da9-ec9fb6b17699"],

Cell["\<\
The variables for which the classification success rates are the worst are \
the most decisive.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.660679972483379*^9, 3.660679994909343*^9}, 
   3.660680097800856*^9},
 CellID->1955408324,ExpressionUUID->"a86449c5-3e93-427a-a435-3dee2895b343"],

Cell["\<\
Note that instead of using the overall baseline accuracy we can make the \
comparison over the accuracies for selected, more important class labels. \
(See the examples below.)\
\>", "Text",
 CellChangeTimes->{
  3.6606819902651167`*^9, {3.660682173972825*^9, 3.660682260879241*^9}, {
   3.6608214203952627`*^9, 3.6608214211007433`*^9}},
 CellID->1605451427,ExpressionUUID->"a4f96365-59b3-4875-a55c-cc4a604e09b6"],

Cell["\<\
The procedure is classifier agnostic. With certain classifiers, Naive \
Bayesian classifiers and Decision trees, the importance of variables can be \
directly concluded from their structure obtained after training.\
\>", "Text",
 CellChangeTimes->{{3.660954363727201*^9, 3.6609545232868958`*^9}, {
  3.6609546199483147`*^9, 3.660954623580373*^9}, {3.660954739503881*^9, 
  3.660954771541765*^9}, {3.6610012241247253`*^9, 3.66100126260856*^9}},
 CellID->1837592681,ExpressionUUID->"b85e66cc-c00a-4237-a27a-488aaa6b9827"],

Cell["\<\
The procedure can be enhanced by using dimension reduction before building \
the classifiers. (See [3] for an outline.)\
\>", "Text",
 CellChangeTimes->{{3.661431997814712*^9, 3.661432044940381*^9}, 
   3.66143346398988*^9, {3.661479152623589*^9, 3.661479196889762*^9}},
 CellID->1457862060,ExpressionUUID->"97bc411d-d3e3-4c67-8f02-03b322f5627b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation description", "Section",
 CellChangeTimes->{{3.660680432198786*^9, 3.660680435259479*^9}, {
   3.661477647603196*^9, 3.6614776522828836`*^9}, 3.6614817137663527`*^9},
 CellID->1646713797,ExpressionUUID->"7e28dd3e-2a14-43f7-91e7-c66bf29adab0"],

Cell[TextData[{
 "The implementation of the procedure is straightforward in ",
 StyleBox["Mathematica --",
  FontSlant->"Italic"],
 " see the package ",
 ButtonBox["VariableImportanceByClassifiers.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"],
 ", [2]."
}], "Text",
 CellChangeTimes->{{3.6606818716036243`*^9, 3.660681958296686*^9}, {
  3.660782222111857*^9, 3.660782230964072*^9}, {3.661478638025073*^9, 
  3.661478646260384*^9}, {3.661479099591885*^9, 3.661479099593894*^9}},
 CellID->1697027290,ExpressionUUID->"aa83b284-8f7c-4eb0-a6d2-325437ac1416"],

Cell[CellGroupData[{

Cell["The paclet can be installed and loaded with the commands:", "Text",
 CellChangeTimes->{{3.660782259079224*^9, 3.6607822924234667`*^9}, 
   3.660782336986376*^9, {3.93232781720293*^9, 3.932327841704941*^9}},
 CellID->1207347223,ExpressionUUID->"9c84a6dc-0a0a-4f9d-a249-636e2e886833"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "PacletInstall", "[", 
     "\"\<AntonAntonov/VariableImporantanceByClassifiers\>\"", "]"}], ";"}], 
   "*)"}], 
  RowBox[{
   RowBox[{
   "Needs", "[", "\"\<AntonAntonov`VariableImportanceByClassifiers`\>\"", 
    "]"}], ";"}]}]], "Input",
 CellChangeTimes->{{3.660782296522195*^9, 3.660782332085916*^9}, {
  3.932327815617028*^9, 3.932327878098981*^9}, {3.9323297627174053`*^9, 
  3.9323297667024317`*^9}, {3.9323301246331244`*^9, 3.932330131313109*^9}},
 CellLabel->"In[1]:=",
 CellID->311796458,ExpressionUUID->"e49b9da5-5a31-4ddb-b66a-5f507b6f74fe"]
}, Open  ]],

Cell[TextData[{
 "At this point the package has only one function, ",
 StyleBox["AccuracyByVariableShuffling", "Program"],
 ", that takes as arguments a ",
 StyleBox["ClassifierFunction", "Program"],
 " object, a dataset, optional variable names, and the option \
\[OpenCurlyDoubleQuote]FScoreLabels\[CloseCurlyDoubleQuote] that allows the \
use of accuracies over a custom list of class labels instead of overall \
baseline accuracy. "
}], "Text",
 CellChangeTimes->{{3.6607823402361507`*^9, 3.660782345850341*^9}, {
   3.6607823837083406`*^9, 3.6607825182130737`*^9}, {3.6607825788186207`*^9, 
   3.66078258884124*^9}, {3.660782738435048*^9, 3.660782808173779*^9}, {
   3.6607832370513563`*^9, 3.660783368970378*^9}, 3.66082079969486*^9, {
   3.660820999549718*^9, 3.660821000369925*^9}, {3.661001327714097*^9, 
   3.6610013603940496`*^9}, {3.661434388845907*^9, 3.661434406509061*^9}, {
   3.9323278856347218`*^9, 3.932327886469954*^9}},
 CellID->502970926,ExpressionUUID->"0a4a92d2-2eb3-4c57-9c53-6941cf9b6a42"],

Cell[CellGroupData[{

Cell["Here is the function signature:", "Text",
 CellChangeTimes->{{3.6607823402361507`*^9, 3.660782345850341*^9}, {
   3.6607823837083406`*^9, 3.6607825182130737`*^9}, {3.6607825788186207`*^9, 
   3.66078258884124*^9}, {3.660782738435048*^9, 3.660782808173779*^9}, {
   3.6607832370513563`*^9, 3.660783368970378*^9}, 3.66082079969486*^9, {
   3.660820999549718*^9, 3.660821000369925*^9}, {3.661001327714097*^9, 
   3.6610013603940496`*^9}, {3.661434388845907*^9, 3.661434406509061*^9}},
 CellID->936718690,ExpressionUUID->"cbdc49ae-06d3-4c9a-92b5-616bd01a2170"],

Cell["\<\
AccuracyByVariableShuffling[clFunc_ClassifierFunction, testData_, \
variableNames_:Automatic, opts:OptionsPattern[] ]\
\>", "Program",
 CellChangeTimes->{{3.6608253806567173`*^9, 3.660825384456321*^9}, {
  3.661434378617023*^9, 3.661434384349946*^9}, {3.6614344208133163`*^9, 
  3.661434422698657*^9}, {3.661434454063855*^9, 3.661434454410658*^9}, {
  3.932330494610091*^9, 3.932330497913473*^9}},
 CellID->228406673,ExpressionUUID->"b78e47ac-55d0-4933-88d2-bfaaecc34c48"]
}, Open  ]],

Cell[TextData[{
 "The returned result is an ",
 StyleBox["Association", "Program"],
 " structure that contains the baseline accuracy and the accuracies \
corresponding to the shuffled versions of the dataset. I.e. steps 3 and 4 of \
the procedure are performed by ",
 StyleBox["AccuracyByVariableShuffling", "Program"],
 ". Returning the result in the form ",
 StyleBox["Association[___]", "Program"],
 " means we can treat the result as a list with named elements. (Similar to \
the list structures in Lua and R.)"
}], "Text",
 CellChangeTimes->{{3.6607823402361507`*^9, 3.660782345850341*^9}, {
  3.6607823837083406`*^9, 3.6607825182130737`*^9}, {3.6607825788186207`*^9, 
  3.66078258884124*^9}, {3.660782738435048*^9, 3.660782808173779*^9}, {
  3.6607832370513563`*^9, 3.660783368970378*^9}, {3.66082079969486*^9, 
  3.660820967857297*^9}, {3.661001382680135*^9, 3.6610013830516787`*^9}, {
  3.661432488543475*^9, 3.661432490262895*^9}, {3.9323279436292467`*^9, 
  3.932327947691824*^9}},
 CellID->1277675922,ExpressionUUID->"10e0a6f6-f4df-458a-971c-824477dfa16d"],

Cell[CellGroupData[{

Cell[TextData[{
 "For the examples in the next section we also going to use the paclet ",
 ButtonBox["\"MosaicPlot\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MosaicPlot/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MosaicPlot/"],
 ", [4], that can be installed and loaded with the following commands:"
}], "Text",
 CellChangeTimes->{{3.6607823402361507`*^9, 3.660782345850341*^9}, {
   3.6607823837083406`*^9, 3.6607825182130737`*^9}, {3.6607825788186207`*^9, 
   3.66078258884124*^9}, {3.660782738435048*^9, 3.660782808173779*^9}, 
   3.6607832370513563`*^9, {3.660820776896899*^9, 3.660820791758842*^9}, {
   3.661478591757011*^9, 3.661478628226619*^9}, {3.661478668040691*^9, 
   3.6614787032192383`*^9}, {3.9323278959540243`*^9, 3.932327970247311*^9}},
 CellID->1210234701,ExpressionUUID->"474b47a4-6aa1-4650-8e77-63daa300e48e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletInstall", "[", "\"\<AntonAntonov/MosaicPlot\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<AntonAntonov`MosaicPlot`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.66147867013615*^9, 3.661478673173602*^9}, {
  3.932327952204705*^9, 3.932327983369143*^9}},
 CellLabel->"In[2]:=",
 CellID->1596998970,ExpressionUUID->"8382f5b4-0218-48b6-ba19-c52a625b41c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "We also use the paclet ",
 ButtonBox["\"DataReshapers\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/DataReshapers/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/DataReshapers/"],
 " for data summaries and tabulated displays:"
}], "Text",
 CellChangeTimes->{{3.932328031413888*^9, 3.932328061978821*^9}, {
  3.9323280990705547`*^9, 3.9323280990707903`*^9}},
 CellID->393422036,ExpressionUUID->"20c5f584-9b70-4670-9bde-cce4f7322394"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PacletInstall", "[", "\"\<AntonAntonov/DataReshapers\>\"", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<AntonAntonov`DataReshapers`\>\"", "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.66147867013615*^9, 3.661478673173602*^9}, {
   3.932327952204705*^9, 3.932327983369143*^9}, {3.932328071262871*^9, 
   3.932328074467517*^9}, 3.93232811615171*^9},
 CellLabel->"In[4]:=",
 CellID->352554106,ExpressionUUID->"a03a953d-b751-47ad-9901-debcdb9df238"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concrete application over the \[OpenCurlyDoubleQuote]Titanic\
\[CloseCurlyDoubleQuote] dataset", "Section",
 CellChangeTimes->{{3.660384365159965*^9, 3.660384374710009*^9}, {
  3.660384559618553*^9, 3.6603845673800983`*^9}, {3.661477766718175*^9, 
  3.661477771835672*^9}, {3.6614778669790707`*^9, 3.6614779055644827`*^9}},
 CellID->1511068584,ExpressionUUID->"73635d27-3c1f-4586-a5ce-5b98af3a9e0b"],

Cell[CellGroupData[{

Cell["1. Load some data.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384601972375*^9}, 
   3.6603847926157103`*^9, {3.661477776891341*^9, 3.661477802267498*^9}, {
   3.661477895077868*^9, 3.6614778954842663`*^9}},
 CellID->388081866,ExpressionUUID->"4afd07f3-3afd-451d-bda8-2e23173ffb35"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"testSetName", " ", "=", " ", "\"\<Titanic\>\""}], ";"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"\"\<Mushroom\>\"", " ", "\"\<Titanic\>\""}], " ", "*)"}], "\n", 
   " ", 
   RowBox[{
    RowBox[{"trainingSet", " ", "=", " ", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
       ",", " ", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", " ", 
   RowBox[{
    RowBox[{"testSet", " ", "=", " ", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
       ",", " ", "\"\<TestData\>\""}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384607563855*^9}, {
   3.6637061422519073`*^9, 3.663706151811631*^9}, 3.663708611752365*^9},
 CellLabel->"In[6]:=",
 CellID->584085923,ExpressionUUID->"b21585e2-4b80-4a73-ad84-f456819bff7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Variable names and unique class labels. ", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.6603846269479237`*^9}},
 CellID->584357424,ExpressionUUID->"10e11df9-af46-4169-9dde-95afca28bea3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"varNames", " ", "=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{"List", " ", "@@", " ", 
    RowBox[{"ExampleData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
      ",", " ", "\"\<VariableDescriptions\>\""}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384643834402*^9}, {
  3.661478721983714*^9, 3.66147872226726*^9}},
 CellLabel->"In[9]:=",
 CellID->852507437,ExpressionUUID->"2d71d889-65b3-4baf-bc35-ca995adf7ff4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"passenger class\"\>", ",", "\<\"passenger age\"\>", 
   ",", "\<\"passenger sex\"\>", ",", "\<\"passenger survival\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9323304870138683`*^9},
 CellLabel->"Out[9]=",
 CellID->2028774047,ExpressionUUID->"1ff0ecfe-5289-4546-b58c-430e1ac05ce2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classLabels", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{"ExampleData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
      ",", " ", "\"\<Data\>\""}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384645937858*^9}, {
  3.6614787175516787`*^9, 3.661478717833701*^9}},
 CellLabel->"In[10]:=",
 CellID->1371339339,ExpressionUUID->"b037d58b-dea4-4f5c-91f6-7b6e98fbf002"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"died\"\>", ",", "\<\"survived\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.932330487049684*^9},
 CellLabel->"Out[10]=",
 CellID->2007544510,ExpressionUUID->"334da691-996f-4cff-b638-1d2ee1160184"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Here is a data summary.", "Text",
 CellChangeTimes->{{3.6614805921042633`*^9, 3.661480612780298*^9}, {
  3.66148074523971*^9, 3.661480746219706*^9}},
 CellID->957287290,ExpressionUUID->"d39e4043-7a32-4004-9f00-7696bdee08bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"List", "@", 
    RowBox[{"RecordsSummary", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Flatten", "/@", 
         RowBox[{"(", 
          RowBox[{"List", "@@@", 
           RowBox[{"Join", "[", 
            RowBox[{"trainingSet", ",", "testSet"}], "]"}]}], ")"}]}], ")"}], 
       "/.", 
       RowBox[{"_Missing", "\[Rule]", "0"}]}], ",", "varNames"}], "]"}]}], 
   ",", 
   RowBox[{"Dividers", "->", "All"}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.661480641639509*^9, 3.661480675907447*^9}, {
  3.663708624765378*^9, 3.663708626902349*^9}},
 CellLabel->"In[11]:=",
 CellID->179999706,ExpressionUUID->"b22a7829-d4be-4ad6-b334-9f6c147f083a"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"1 passenger class\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"3rd\"\>", "709"},
            {"\<\"1st\"\>", "323"},
            {"\<\"2nd\"\>", "277"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"2 passenger age\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"Min\"\>", "0"},
            {"\<\"1st Qu\"\>", "7.`"},
            {"\<\"Mean\"\>", "23.877514667685254`"},
            {"\<\"Median\"\>", "24.`"},
            {"\<\"3rd Qu\"\>", "35.`"},
            {"\<\"Max\"\>", "80.`"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"3 passenger sex\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"male\"\>", "843"},
            {"\<\"female\"\>", "466"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"4 passenger survival\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"died\"\>", "809"},
            {"\<\"survived\"\>", "500"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.932330487068022*^9},
 CellLabel->"Out[11]=",
 CellID->1685001553,ExpressionUUID->"3eaf52ca-36bd-4f1d-81ef-a5736a652814"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Make the classifier. ", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384649762841*^9}, 3.661480748973201*^9},
 CellID->415882133,ExpressionUUID->"80353361-e11e-4701-8052-e9efc931a2c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"clFunc", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingSet", ",", " ", 
    RowBox[{"Method", " ", "->", " ", "\"\<RandomForest\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384656281806*^9}, 3.660384693791168*^9},
 CellLabel->"In[12]:=",
 CellID->1819221993,ExpressionUUID->"cd2ae526-4dac-4f61-8e4c-584fc364392f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["916", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 916, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 916, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.41643893442623}, 
                    "StandardDeviation" -> {14.247652250490852`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{0.992476308716628, 
                   0.06962246892396909, -0.10071488696884714`}, \
{-0.12176028349302237`, 0.647598234455395, -0.7521907737362604}, {
                   0.012853404215050976`, 0.7587945957577625, 
                   0.6512031568173625}}, 
                  "Precisions" -> {1.1096705122951698`, 11.07137916260424, 
                   14.50465482046871}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733715919`, 0.09643725350844207, 
                    0.07221360214534422}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3731886497605530030|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00017522648733714918`, 0.09643725350844205, 
                    0.07221360214534422}, 
                    "StandardDeviation" -> {0.9999243544328698, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00017522648733714918`, 0.09643725350844205, 
                    0.07221360214534422}, 
                   "StandardDeviation" -> {0.9999243544328698, 
                    0.29364597759987454`, 0.2806646798676481}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.113119, "MaxTrainingMemory" -> 6398392, 
                  "DataMemory" -> 106400, "FunctionMemory" -> 63480, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 8, 10, 22, 1, 27.925285`8.198572595930477}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.312063971290107, -2.312063971290107, \
-2.0628669170146163`, -1.9978297609149158`, -1.9765747685031854`, \
-1.9695170466598357`, -1.9059724997243817`, -1.901514485638928, \
-1.8849862478108568`, -1.8496196423714306`, -1.7810711623410054`}, 
                   "LeftBoundary" -> -2.0628669170146163`, "LeftScale" -> 
                   0.12459852713774545`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.89260495068078, 0.13867820062256253`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {29.018970775438927`}, 
             "StandardDeviation" -> {12.892103992603547`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {
                0.21963098645210266`, -0.1438339650630951, 
                0.544792890548706}, {-0.2416929453611374, 0.3798814117908478, 
                0.6873865127563477}, {-0.9437126517295837, 
                0.4273325502872467, -1.2217921018600464`}}], 
               RawArray["Real32",{{0., 0.}, {-0.12253803759813309`, 
                0.6071814894676208}, {-0.6194148659706116, \
-0.98703533411026}}]}, "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             7619735631186802745|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.6176470588235294, "survived" -> 0.3823529411764706|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 5, 5, 5, 2, 2, 1, 4}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.4273315897790102, -0.619414021320539, -0.37097645244627264`, \
-0.3709764656232002, -0.011031187461016514`, 0.21963190398701027`, 
           2.481175780491567, 0.6873856065884469}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, -5}, {5, 6}, {-3, -6}, {
            7, -7}, {8, -8}, {-4, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 1, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 3, 6, 3, 5, 4, 2, 4, 4, 4, 2, 1, 1, 3, 
            1, 1, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.42733156619045287`, -0.8570114719080069,
            0.37988212592688697`, -0.18992691024215214`, 
           0.3798810506043875, -0.619415018525511, 
           0.5447933567739893, -0.24169279394417287`, 0.5447933321971687, 
           0.6873870972954998, 0.544792029479721, -0.24169307134906948`, 
           0.07684857397951739, 0.0688442465632968, 0.37988056351214317`, 
           2.481175780491567, -0.23500961651800378`, 0.6873861184112959}, 
          "Children" -> 
          RawArray["Integer16",{{2, -8}, {3, 4}, {5, -9}, {7, 8}, {-1, 
            6}, {-2, -10}, {9, 10}, {15, 16}, {11, -11}, {
            12, -12}, {-3, -13}, {13, -14}, {14, -15}, {-4, -16}, {-5, 
            17}, {-6, -17}, {18, -18}, {-7, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 
            1, 1, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 5, 1, 2, 1, 3, 3, 4, 2, 3, 2, 2, 1, 6, 6, 
            4, 4, 1, 1, 4, 3, 3, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.5447919326510116, -0.3709764552130581, 
           0.0535619068754537, -0.9437135636481715, -0.11967894060550466`, 
           0.427333191616448, 
           0.42733314193559435`, -1.2217920753739495`, -0.9437130656132195, 
           0.4273326604698693, -0.9437119645584033, -0.9437118925133925, \
-0.3651941458082266, -0.18992687418257326`, -0.18992690713446114`, 
           0.5447926590046546, 
           0.5447925276462602, -1.1230696761773515`, -0.00791674099515019, 
           0.6873858293894992, 0.37988127114088766`, 
           0.11802377435925338`, -0.2416925479258949}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {14, 15}, {-1, 6}, {
            13, -13}, {7, -14}, {8, -15}, {-2, 9}, {-3, 10}, {11, -16}, {-4, 
            12}, {-5, -17}, {-6, -18}, {16, 17}, {22, 23}, {-7, 
            18}, {-8, -19}, {-9, 19}, {20, -20}, {
            21, -21}, {-10, -22}, {-11, -23}, {-12, -24}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 
            1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 5, 1, 3, 6, 4, 2, 4, 1, 3, 6, 2, 2, 1, 4, 
            3, 1, 5, 6, 4, 1, 5, 2, 3, 4, 1, 1, 3, 1, 1, 1, 4, 6, 1, 3, 4, 3, 
            6, 5, 6, 6, 2, 2, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAeIV5W57f/vfsJ+g2xFle+nx/hm2iz/2zL6w/0Lnkckg
8RV+ym1npr7fL+Bgu+pT3kP7gCNnHl56f26/hrTcJ6H/T+0r1sR5v1t03n4G
137Pn0D1AfEL5p4Eqpew2aF6aHrb/gS1lE9PZc7YZ7gu/vez4rt9hnWjpABQ
H8fNrRM0Mg/tf2Pa9DtkB4tDQ6Wp4ra4/fsT4ha7gvQHRCxULu35vD/hnJBA
0dUb+08cUZZwALovIXKz0xOjd/sDpFbJZETetp8xzeFfCVDdhwTeJ/OdPu/X
6E+N/7Xsxf4OJZ7cv0D3nHDenKy5/s3+CYdDNnIzvtufMCX8b2Hul/0aHis1
QeZ/UFxqC7Kvgft9wfSde+0jWj4rZAPN9Uha+BVkrsQ+l7TNV27ac8gv4QP7
q5bHZTrQnR0Pz3Rx5j22r9j3WAtEZ+hOK3kGdNePNIeak8DwiTgS5tnmf2I/
ACDjwHY=
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {18, 19}, {6, -21}, {-1, 
            11}, {-2, 7}, {-3, 8}, {9, -22}, {10, -23}, {-4, -24}, {12, 
            13}, {-5, 14}, {15, -25}, {-6, -26}, {16, -27}, {
            17, -28}, {-7, -29}, {20, 21}, {32, 33}, {22, 23}, {24, 
            25}, {-8, -30}, {-9, -31}, {26, 27}, {-10, -32}, {-11, 28}, {
            29, -33}, {-12, -34}, {30, -35}, {31, -36}, {-13, -37}, {-14, 
            34}, {-15, 38}, {35, 36}, {37, -38}, {-16, -39}, {-17, -40}, {-18,
             39}, {40, -41}, {41, -42}, {42, -43}, {-19, 43}, {
            44, -44}, {-20, -45}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 
            1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 
            1, 2, 1, 1, 2, 2, 1, 2, 2, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 2, 6, 4, 6, 1, 3, 2, 1, 1, 3, 5, 2, 3, 1, 
            3, 1, 1, 1, 1, 3, 4, 1, 3, 1, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.3798814981354899, 
           0.21963009077345164`, -0.18992691846876442`, 0.6873869774591848, 
           0.6071805534168, 1.7807033836063972`, 0.37988121225149873`, 
           0.21963006133643814`, 0.14213541182213207`, 1.4362205297214068`, 
           0.3798813319503225, -0.3709764501773769, -0.9437134501706739, 
           0.4273317983713425, 1.003712854331921, 
           0.4273322096350114, -0.24140964081572758`, 0.1470273332921952, 
           0.26853690128960883`, -0.3070908835314299, 0.37988163404842634`, 
           0.687387385906078, -1.3526650003476135`, 0.3798815271726821, 
           0.6163483463454735, -0.9437124727976292}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -14}, {13, 14}, {5, 6}, {7, 8}, {
            12, -15}, {-1, 9}, {10, -16}, {-2, -17}, {
            11, -18}, {-3, -19}, {-4, -20}, {15, 16}, {23, -21}, {17, -22}, {
            20, -23}, {-5, 18}, {-6, 19}, {-7, -24}, {-8, 21}, {-9, 
            22}, {-10, -25}, {-11, 24}, {-12, 25}, {26, -26}, {-13, -27}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 
            2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 3, 3, 1, 1, 2, 2, 3, 2, 2, 1, 2, 1, 1, 
            2, 6, 4, 3, 2, 1, 2, 1, 1, 5, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.9870343478878407, -0.943713639683363, 
           0.42733159482883076`, -0.1438332876287849, -1.2026306245589655`, \
-1.353763124854435, -0.9437123738847548, -0.5927026483825868, 
           0.37988178605808853`, -0.2416926692757031, -0.9437120026965378, 
           0.03020398883833539, 0.2196314022996506, 0.31223271524340657`, 
           0.06313518876647684, -0.24169259013626188`, 0.6071819126717086, 
           0.6873859992974793, -0.14383409481162301`, -0.241693120929809, \
-0.513567895012284, -0.24169342672121896`, -0.000443689925995255, \
-0.3081052748804054, -0.12253825801095863`, 0.6071815956829827}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {16, 17}, {-2, 5}, {6, 7}, {
            8, -14}, {-3, 9}, {-4, -15}, {10, 11}, {12, 13}, {-5, -16}, {-6, 
            14}, {-7, -17}, {15, -18}, {-8, -19}, {18, 19}, {25, -20}, {20, 
            21}, {-9, -21}, {22, -22}, {-10, 23}, {-11, -23}, {
            24, -24}, {-12, -25}, {26, -26}, {-13, -27}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 
            2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 1, 1, 3, 6, 4, 5, 6, 5, 6, 6, 1, 6, 1, 1, 
            6, 2, 6, 1, 1, 3, 1, 1, 2, 4, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.5447919245289308, -0.2659870676597298, -1.1212269574483713`, 
           0.4273319808181122, -0.9870343481024699, -1.221792459105222, \
-0.6194149663031885, 0.6071813143201874, -0.6194145854784372, 
           0.6071810477304558, -0.9870356600969643, 
           0.22300486829773747`, -0.18992690952414426`, 0.22613989945790158`, 
           1.1218083513482675`, -0.987034391073661, 
           0.21963009077345164`, -0.18992690713446114`, -0.00791674099515019, 
           1.7408819326091063`, 0.37988231711602527`, 0.07217193476441752, 
           0.0688442465632968, 0.21963010652939352`, 
           0.5447926760339907, -0.24169259013626188`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 16}, {6, -16}, {12, 
            13}, {-2, 7}, {-3, 8}, {9, -17}, {-4, 10}, {
            11, -18}, {-5, -19}, {-6, 14}, {-7, -20}, {-8, 15}, {-9, -21}, {
            17, 18}, {19, 20}, {-10, 24}, {-11, 21}, {-12, -22}, {22, -23}, {
            23, -24}, {-13, -25}, {25, -26}, {-14, 26}, {-15, -27}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 
            1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 4, 2, 1, 1, 2, 3, 1, 4, 3, 4, 1, 1, 3, 
            1, 1, 3, 2, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3709764552130581, 
           0.21963195041621986`, -0.33849956819096017`, -0.9437135728661596, \
-1.3954304481615214`, -1.5124373013991104`, -0.5927028858694952, 
           0.37988052622461055`, -1.5863446202053009`, 0.544793197055049, 
           0.37988050619677427`, 0.5447936771974895, 
           0.19024529221130781`, -0.03623443976772889, 0.37988225728045144`, 
           2.5900058411705142`, -2.098849628979652, 
           0.3798818068944678, -0.2416935361305843, 0.16685038309520506`, 
           0.19786724110495624`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -10}, {-1, 15}, {5, 
            6}, {-2, -11}, {7, 8}, {9, -12}, {10, -13}, {-3, -14}, {-4, 11}, {
            12, -15}, {13, -16}, {14, -17}, {-5, -18}, {16, -19}, {
            17, -20}, {-6, 18}, {19, -21}, {-7, 20}, {-8, 21}, {-9, -22}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 
            2, 2, 1, 1, 2, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 4, 1, 3, 1, 4, 1, 2, 6, 3, 1, 3, 1, 1, 
            1, 5, 6, 3, 1, 4, 1, 3, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12253900210540336`, \
-1.7823598205982005`, -0.3384996014680466, -1.7847156677758633`, 
           0.37988052734911903`, -1.0094724682111789`, -1.2217912718638413`, 
           0.6450992307562897, 
           0.21963097135418597`, -0.9870357823082916, -0.14383463413852904`, \
-0.3831797484884758, 0.37988050619677427`, 0.04468045438718299, 
           0.269665300937044, -0.38447120694270165`, -0.619414736190885, \
-0.9870358090871862, 0.37988109779053847`, -0.23670811309643192`, 
           0.687386164544284, -0.1725187529885761, -0.14383409481162301`, \
-0.24169307445850485`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {-1, -15}, {6, 
            7}, {-2, 8}, {18, 19}, {9, 10}, {11, 12}, {-3, 17}, {-4, 13}, {
            16, -16}, {14, -17}, {-5, 
            15}, {-6, -18}, {-7, -19}, {-8, -20}, {-9, -21}, {-10, -22}, {-11,
             22}, {23, -23}, {-12, -24}, {-13, 24}, {-14, -25}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 
            2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 4, 4, 1, 1, 1, 5, 2, 6, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.9870343493074065, 
           0.6873858418605305, -0.3384995887655884, -1.5087112947084425`, 
           0.9723195906625195, 
           1.0131386978094135`, -0.12253820438543861`, -0.24169276447445687`, 
           0.6071805784036419, -0.7056710873693257}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {-2, 5}, {-3, 
            6}, {-4, -7}, {9, -8}, {-5, -9}, {10, -10}, {-6, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 3, 2, 1, 2, 1, 3, 2, 2, 1, 3, 2, 3}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.18992691846876442`, -1.58620971164817, 
           0.4273316146975463, -0.5927028858694952, -2.1332827910427365`, \
-0.2416928225719861, 0.7373792383850946, 0.37988131775823764`, 
           0.21963010652939352`, -0.24169283091331129`, -0.8563881272624094, 
           0.37988227607942804`, -0.592702794670533, -0.14383387970615735`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -8}, {6, 7}, {5, -9}, {-1, -10}, {
            8, 9}, {-2, -11}, {-3, 10}, {14, -12}, {11, -13}, {-4, 12}, {-5, 
            13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 
            1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 3, 1, 1, 3, 2, 4, 1, 1, 1, 6, 2, 2, 4, 
            1, 4, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12253901369297782`, 0.6873858418605305,
            0.42733156799353456`, -0.8558295916295586, -1.5441201000075147`, 
           0.4273315849106232, -0.5927025611239944, 
           0.5447937869407582, -1.0064665214439739`, -2.169352643266942, \
-0.9694301300751942, -0.9870347840246181, -0.24169281395886277`, 
           0.2196300424289943, 0.6873859701595686, 2.481175780491567, 
           0.6873856065884469, 0.047097968934144085`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {15, -11}, {6, 
            7}, {-1, -12}, {8, 9}, {-2, 13}, {-3, -13}, {10, 11}, {-4, 
            12}, {-5, -14}, {-6, -15}, {-7, 14}, {-8, -16}, {16, -17}, {
            17, -18}, {-9, 18}, {-10, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 
            1, 1, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 3, 3, 1, 1, 3, 3, 1, 3, 1, 1, 1, 3, 4, 
            1, 2, 4, 3, 4, 3, 2, 3, 2, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3709764527453898, 0.37988071832669146`,
            0.37988181620440864`, -0.1438336777530762, -2.1377293015558667`, \
-0.20061828152612526`, -0.14383319050183108`, -0.1438333618011023, \
-1.198764698407972, -0.1438329879199245, 0.7922137393085791, 
           0.22957248449941492`, 0.2281198711545993, 
           0.37988231711602527`, -0.2672018526070463, 
           2.097970022815767, -0.24169302957488403`, 0.6873863727443714, 
           0.11802378106232148`, -1.221791697325017, 
           0.4273319968664717, -0.2416931787135188, 
           0.42733181406404697`, -0.9437126701433778, -0.6936853634886937}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {16, 17}, {-1, 6}, {-2, 12}, {
            7, 8}, {-3, 9}, {-4, 10}, {-5, -16}, {-6, 11}, {-7, -17}, {13, 
            14}, {-8, -18}, {-9, 15}, {-10, -19}, {18, 19}, {
            20, -20}, {-11, -21}, {-12, -22}, {-13, 21}, {22, -23}, {
            23, -24}, {24, 25}, {-14, -25}, {-15, -26}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 
            1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 4, 1, 2, 6, 1, 1, 1, 6, 4, 3, 2, 6, 4, 5, 
            2, 6, 5, 4, 2, 1, 4, 1, 3, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.5447919517753785, -1.2217925743567761`, -0.6286683644775639, \
-0.9437118309222425, -0.18992691868794576`, -0.23272029793874371`, 
           1.1218083513482675`, 1.2702511812328545`, -0.9870359369321315, 
           0.6873856318256282, 0.3798817712579181, 
           0.21963183749817694`, -0.18992680200836087`, 
           0.6873870127991788, -0.3709762380543715, 
           0.2196307231397836, -0.18992648564409054`, -0.6194139560758121, 
           0.544792477620069, -0.24169332315665248`, 1.58747629673406, 
           0.687385579514511, 1.5533711382359172`, -0.1438333618011023, 
           0.17386619043875373`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {9, 10}, {5, -13}, {
            6, -14}, {-2, 7}, {-3, 8}, {-4, -15}, {-5, 11}, {18, -16}, {12, 
            13}, {14, 15}, {-6, -17}, {16, -18}, {-7, -19}, {-8, 
            17}, {-9, -20}, {19, 20}, {-10, 21}, {-11, -21}, {22, -22}, {
            23, -23}, {24, -24}, {25, -25}, {-12, -26}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 2, 1, 
            2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 2, 2, 1, 1, 5, 6, 1, 5, 6, 1, 1, 1, 6, 5, 
            1, 1, 1, 1, 1, 1, 5, 1, 3, 2, 1, 3, 3}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.5447919725598558, -0.9437117720037307, 
           0.21963009077345164`, -0.23275669929661302`, -0.8570218183941876, \
-0.12253710627610492`, -0.9870359918393241, -0.8187464680581291, \
-0.6194154238568101, 
           0.6071809168561595, -1.2188196558834594`, -1.1003219456387061`, \
-1.3348821937822333`, -0.9870346545840434, -0.37097645244627264`, 
           0.26791267494841975`, 0.19046576840936735`, -0.17286577306675777`, 
           0.22558648084406618`, -0.16215647058688432`, \
-0.025573363813419098`, -0.3709764370942201, -1.5088995611947276`, \
-0.14383387970615735`, -0.24169269908767843`, 1.010260560487211, 
           0.3798809621192758, 0.3798808516383301}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -15}, {22, -16}, {5, 6}, {7, 8}, {
            15, -17}, {-1, 9}, {-2, 14}, {-3, 10}, {11, 12}, {
            13, -18}, {-4, -19}, {-5, -20}, {-6, -21}, {16, -22}, {17, -23}, {
            18, 19}, {-7, 20}, {-8, -24}, {-9, 21}, {-10, -25}, {23, 
            24}, {-11, 25}, {-12, 27}, {26, -26}, {-13, -27}, {
            28, -28}, {-14, -29}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 
            2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 6, 6, 5, 1, 1, 5, 6, 5, 1, 6, 1, 2, 4, 1, 
            2, 6, 4, 5, 6, 5, 3, 1, 1, 4, 1, 4, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3384995844547958, -0.9870343554728249, 
           0.607180540033661, -0.12253709231707821`, 0.38682424854982633`, 
           0.23548753619950835`, -0.12253729025884819`, 
           0.607180938851128, -0.12253793727900986`, -0.7413916352724073, \
-0.9870343416931364, -1.3123619063741447`, -0.2416926231800678, 
           0.5447924834192266, -0.11900173010275794`, 
           0.2196318592513533, -0.9870363225750198, 
           0.5447931026177564, -0.6194157295882281, -0.987035228047688, \
-0.6194146006651815, -0.14383401795773554`, 0.4944466479822829, 
           0.0535619068754537, 0.6873870034768936, 0.12678277547383443`, 
           0.5447926760339907, 0.23456258082507597`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, 13}, {5, -15}, {
            6, -16}, {7, -17}, {8, -18}, {9, -19}, {10, -20}, {-2, 
            11}, {-3, -21}, {-4, 14}, {26, 27}, {15, 16}, {-5, -22}, {
            17, -23}, {-6, 18}, {-7, 19}, {-8, 20}, {-9, 21}, {22, -24}, {23, 
            24}, {-10, -25}, {25, -26}, {-11, -27}, {-12, 
            28}, {-13, -28}, {-14, -29}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 
            1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 6, 5, 1, 1, 3, 2, 4, 1, 2, 1, 2, 2, 6, 2, 
            1, 1, 1, 1, 1, 4, 2, 1, 1, 1, 2, 3, 1, 3, 1, 3, 2}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.37988181620440864`, -0.9870344345633653, -0.3709764527453898, \
-1.045967973242016, -2.098849628979652, 0.3798805508909604, 
           0.2196302287787646, 0.6873868770261122, 3.6051315849848056`, 
           0.21963009077345164`, 1.7408819326091063`, -0.24169276447445687`, 
           0.21963092202025214`, -0.18992685854717895`, -0.9437135286244782, \
-0.1509402708479608, -0.12239904899631249`, -0.20207972549357156`, 
           0.11341526362388044`, -0.353990119089143, -1.2217925407814025`, \
-0.24169264564443993`, -0.5525090893575708, -0.3233226694531215, \
-1.4363493879880558`, -0.9437124474432661, 
           0.42733184957449133`, -0.3692871934483213, 
           0.40360698959818775`, -0.8507656860293, 
           0.4273323188747371, -0.5927025657231493}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {15, 16}, {-1, 6}, {-2, 12}, {
            7, -15}, {8, 9}, {10, -16}, {11, -17}, {-3, -18}, {-4, -19}, {-5, 
            13}, {-6, 14}, {-7, -20}, {17, -21}, {21, 22}, {18, 19}, {
            20, -22}, {-8, -23}, {-9, -24}, {23, 24}, {31, -25}, {25, -26}, {
            26, 27}, {-10, -27}, {28, 29}, {-11, -28}, {-12, -29}, {
            30, -30}, {-13, -31}, {32, -32}, {-14, -33}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
            1, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 6, 5, 2, 1, 3, 1, 4, 4, 1, 3, 2, 1, 3, 3, 
            4, 1, 2, 3, 3, 4, 2, 3, 5, 4, 3, 2, 1, 1, 2, 1, 3, 1, 1, 1, 4, 1, 
            4, 1, 4, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQBOIFqsaTz74/t1+iw6iizf/E/oRH8ra2lx7vL9D5/fmZ
0bv9HDdO6uzherL/xMv4L9/8b9g/WBX3UuPiy/0nlooml/V83t+wqEYMRE+I
WsVn+O7F/obuPMbcyNv2GsvfrQfpZ5i2gY8l4qX9hCmSz3KA4gzSDvxZQHrD
55bIUqC+guTWOQ1THu3PWGTGl/P90f4Lz8P+/ALas2LnpapMoLoTq6R4Qeoy
dKeVgMy78Fj0zV+gfMDbk71r4vbv1zjwg/FD3kP7A4aXpv0EilfwVa06AfTP
hh7dt/N+X7Zf4bVzucuZr/sfvElkeiZzxr7Fq8rK/zqPg8Dq2TKKmYf2K8TN
6vZN+2l/4Le+YNu7b/YaHL9FQvR/2O/ou1X4EWjuiobPtTxPfuy/oF2zUPj/
U/sj25f0+AowOnTUOnEIAPkPGqtOqnBs3Q8AVTe0sw==
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {23, 24}, {-1, 6}, {21, 22}, {
            7, 8}, {-2, -22}, {-3, 9}, {10, 11}, {-4, -23}, {12, -24}, {13, 
            14}, {-5, -25}, {15, -26}, {16, -27}, {-6, 17}, {18, 
            19}, {-7, -28}, {-8, 20}, {-9, -29}, {-10, -30}, {-11, -31}, {
            25, -32}, {-12, 36}, {-13, 26}, {27, -33}, {28, 
            29}, {-14, -34}, {-15, 30}, {31, -35}, {32, -36}, {33, -37}, {
            34, -38}, {-16, 35}, {-17, -39}, {37, 38}, {-18, 39}, {
            40, -40}, {-19, -41}, {-20, 41}, {-21, -42}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 
            2, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 
            2, 1, 1, 1, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 3, 1, 3, 4, 3, 1, 2, 1, 1, 1, 1, 3, 1, 
            4, 4, 2, 1, 3, 4, 4, 1, 1, 3, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.37097645244627264`, -1.221791380658324,
            0.4036069722887836, -0.8969700161734409, 
           0.3798810506043875, -1.2217912287652712`, 
           0.42733225070263536`, -0.39173537129555935`, 
           0.21963191143354432`, -0.32676634358703005`, -0.2705297255416057, \
-0.23275669929661302`, -0.16566327390573732`, -0.1438333618011023, \
-0.00791674099515019, 0.6873858371603632, 
           0.6873869822007084, -0.5927024196338113, 0.07217193476441752, 
           0.3798812463503345, 0.6873856198078041, 0.6160897120881099, 
           1.0855916943636856`, 2.134112953330023, 
           0.37988086261426046`, -0.23500961651800378`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {24, -15}, {5, 6}, {-2, 7}, {
            8, 9}, {-3, -16}, {-4, 10}, {14, -17}, {-5, 11}, {-6, 12}, {-7, 
            13}, {-8, -18}, {-9, 15}, {16, 17}, {18, -19}, {
            19, -20}, {-10, -21}, {-11, 20}, {21, -22}, {22, -23}, {
            23, -24}, {-12, -25}, {25, -26}, {-13, 26}, {-14, -27}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 
            2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 1, 1, 4, 6, 5, 5, 1, 5, 3, 2, 2, 2, 1, 1, 
            1, 6, 4, 3, 1, 5, 6, 6, 6, 1, 1, 3, 3, 3, 2, 2, 2, 1, 2, 2, 1, 1, 
            4, 2, 1, 6, 1, 3, 1, 3, 1, 1, 5, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGAwBOIFvxW+XZU5Y+9hOvGlKce9/T/e1KloMt+wf3Cbb1ZZ
z+f9DSwPeU9Ofb9fYsOBjQvj9u9XCPdIs730eP+M5ZtzH5jc238j7UL5TKA4
h8GDzd/9b9jvCD397JnRu/0MlxtfXXp/br/Adve8x0B+wamPPYqLn+2XeHDw
9OeiZ/tXGH6NejHj0f4Vy7Zkc+Y9tt8Q0Jl5Q/LifgO2zM0br9y0Z/heNLnT
5/3+GxzVwQuA5t/QuFDHAVTncPa8JIj26M3YwAakJ2Sf+//s3+/9FluUuGS8
nu0/kf/6Z07kbfuE7rnr04G0B+vSJyB+gSrLMZC7PuxW9D8JdJfF9nPnTwNp
hirBd8Y7Lu+/seHuvydA+Q2Njx+eB4rfkHR+omh7ef+MSLfzE7Zttg/Y9Nq2
FBgeCkklDiD/KFR98Ek59theg0tTgB3oDgHuraufm97cP6F414cNQPdf4OIo
2ct81N6Aye3oN2C4GPj87dLc8Nz+w5nKpWYJD+0Ddpd8ng/0V8LFPi6QPwCM
PdwF
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -25}, {6, 7}, {27, 
            28}, {-2, -26}, {8, 9}, {10, -27}, {17, 18}, {-3, 11}, {-4, 12}, {
            13, -28}, {14, -29}, {-5, 15}, {-6, 16}, {-7, -30}, {19, 
            20}, {-8, -31}, {-9, 21}, {-10, -32}, {22, -33}, {23, -34}, {
            24, -35}, {25, -36}, {-11, 26}, {-12, -37}, {29, -38}, {40, 41}, {
            30, -39}, {-13, 31}, {32, -40}, {33, -41}, {-14, 34}, {-15, 35}, {
            36, 37}, {-16, 38}, {-17, -42}, {-18, 39}, {-19, -43}, {
            42, -44}, {46, 47}, {43, 44}, {-20, -45}, {-21, 45}, {-22, -46}, {
            48, -47}, {-23, -48}, {49, -49}, {-24, -50}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 
            1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 
            2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 3, 3, 3, 6, 3, 6, 5, 1, 4, 2, 1, 3, 1, 
            1, 1, 6, 2, 1, 6, 4, 3, 3, 2, 2, 4, 1, 1, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12253900210540336`, \
-1.5129786921452144`, 0.37988231453380195`, 0.4273316695732201, 
           0.37988052622461055`, -0.9870350605910367, 
           0.42733228272033763`, -0.9870363225750198, -0.6194150513070866, \
-1.1662210726697602`, 0.6873874027396907, -0.9437135619000907, 
           0.05038031790541564, 0.42733207205587, 
           0.0535619068754537, -0.5756686542548524, 
           0.3367081288949261, -0.1899266946256648, -0.2416930401228341, 
           1.0750436099151326`, -0.9870343883234174, 0.5447926760339907, 
           0.42733195113433897`, 
           0.3798814918825193, -0.9437133188814846, -0.24169271544762005`, \
-1.2217913237358555`, 
           0.23622394686240478`, -0.5282811178352746, -0.41668759386272747`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {-1, 6}, {-2, 
            7}, {-3, -18}, {8, 9}, {-4, 10}, {-5, 20}, {-6, 11}, {
            12, -19}, {-7, 13}, {14, 15}, {-8, 16}, {-9, 17}, {-10, -20}, {
            18, -21}, {19, -22}, {-11, -23}, {21, -24}, {-12, -25}, {-13, 
            24}, {25, -26}, {-14, -27}, {-15, 26}, {27, -28}, {28, -29}, {
            29, -30}, {-16, 30}, {-17, -31}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 6, 6, 4, 2, 4, 4, 4}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.3798805750864602, -0.18992685854717895`, -0.18992691846876442`, 
           0.5447921957907722, 0.21963010652939352`, 0.5447922918587196, 
           0.5447930511087264, -0.26720275945401584`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 8}, {-2, 6}, {
            7, -6}, {-3, -7}, {-4, -8}, {-5, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 2, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{6, 4, 1, 3, 4, 4}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.18992691846876442`, \
-1.2217915809521909`, -1.1676624747976714`, 
           0.4273328014918225, -1.2217915773043124`, -1.2217914070715654`}, 
          "Children" -> 
          RawArray["Integer16",{{2, -4}, {-1, 3}, {4, 5}, {
            6, -5}, {-2, -6}, {-3, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 2, 2, 1, 4, 2, 3, 5, 2, 1, 1, 5, 6, 1, 4, 
            6, 1, 4, 1, 3, 1, 4, 2, 4, 3, 4, 2, 4, 3, 4, 1, 2, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12253900334964452`, 
           0.2196318916359623, -0.2416935361305843, -1.7823598205982005`, \
-1.2217912827639559`, -0.9437135866272603, -0.1438332876287849, \
-0.6194142920789796, 0.21963152020585075`, 
           0.5441461612094765, -0.07950910734908845, -0.6194141710561416, 
           0.6071809889288087, 
           0.6696954427470372, -1.2217912597398453`, -0.9870356560651885, 
           0.06908596789738608, 0.687385782533668, 0.07215837010043191, 
           0.37988184091161026`, -0.5045587134613454, 
           0.6873873878105261, -0.24169266860021876`, 0.68738584230295, 
           0.40360692454355185`, -1.22179237756861, 
           0.21963190398701027`, -1.221791668660435, 0.42733272317370563`, 
           0.687386422791799, -0.2734108797588881, -0.9437118822627584, \
-0.887604252557967, -0.8065129474065422, 0.21963008723114963`, 
           1.8995285532834707`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -16}, {26, 27}, {5, 
            6}, {-1, -17}, {-2, 7}, {8, 9}, {-3, 10}, {13, 14}, {11, 
            12}, {-4, -18}, {-5, -19}, {15, -20}, {-6, -21}, {16, 
            17}, {-7, -22}, {18, 19}, {20, -23}, {-8, 22}, {
            21, -24}, {-9, -25}, {23, -26}, {24, -27}, {
            25, -28}, {-10, -29}, {-11, 28}, {35, -30}, {-12, 29}, {
            30, -31}, {31, -32}, {32, -33}, {33, 
            34}, {-13, -34}, {-14, -35}, {36, -36}, {-15, -37}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 1, 
            2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 
            2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 1, 1, 4, 6, 1, 1, 1, 1, 5, 3, 1, 1, 2, 
            1, 5, 3, 2, 2, 2, 2, 3, 1, 4, 3, 4, 1, 1, 4, 6, 6, 3, 4, 4, 4, 3, 
            4, 2, 1, 1, 3, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQBmIDlvvB2+P273dIL48q7fm8f0Xu/h3bgk/aP+g597qc
8+n+jDv+CwT+P7V/YBQjfHLq+/0/zL/P3mT62f5G9IMb+9Z92h9QfeRuscqP
/Q8yCvQZjBkOXHhwytr+0uP9C64eUMuMvG2/Y4O5k5fv7/0vLLgqAoW/2v/w
+r73qcwZe4vJNxZeCvhof0PufpwdUP2LcHUJncxD+ysOJd98YvRu/4Ta0t+3
geoqmu8zg/gPZqrNvw7kB7ySjM8Gmvvh60d74c0f7A1KP3N/yHto/+OPVZwa
UP8L88aLH4F8DRHjXZaHH+y3WKIv/uThW3uFuY5On4DiE1xtZM8C/ZFQW1jW
4n9iP4NEwMu//jfsP2z01/i98ur+FdNfxwsC/VuQ+PcKKDwyomwu/QbKr0iY
vRlkj8WTjVdPvj+3X8Gop31315X9BT5rDqQtur6/I8yKC6TuwbRuSZD9ADZ0
wlQ=
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {33, 34}, {-1, 6}, {8, 9}, {
            7, -25}, {-2, -26}, {10, 11}, {-3, 31}, {-4, 12}, {14, 15}, {-5, 
            13}, {-6, -27}, {16, -28}, {17, -29}, {-7, -30}, {18, 19}, {-8, 
            20}, {-9, 25}, {21, -31}, {-10, 22}, {23, 
            24}, {-11, -32}, {-12, -33}, {26, 27}, {-13, 28}, {-14, 
            29}, {-15, -34}, {30, -35}, {-16, -36}, {-17, 32}, {-18, -37}, {
            35, 36}, {-19, 42}, {37, -38}, {-20, 40}, {38, -39}, {-21, 
            39}, {-22, -40}, {41, -41}, {-23, -42}, {43, -43}, {-24, -44}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 
            1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 2, 2, 2, 2, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 3, 3, 1, 1, 2, 3, 1, 3, 1, 2, 1, 1, 1, 
            3, 4, 2, 4, 3, 3, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3709764622666163, 0.3798812417536923, 
           0.4273315910582185, -0.14383408886989568`, -1.5124373013991104`, 
           1.047450994055529, 
           0.21963190920400666`, -0.14383405995256027`, -1.550221201472814, 
           0.42733309490913163`, -2.1714469505227356`, -0.9437134741791695, 
           1.200609788170821, -0.3125180349830621, -0.12239904899631249`, 
           0.3798818102514896, -1.221791942016388, -0.9437120388806326, \
-1.2217927169520504`, 0.37988233670093097`, 
           0.42733177240108544`, -0.22056813286712829`, 0.15082011420356745`},
           "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -13}, {6, 7}, {9, 
            10}, {-2, -14}, {8, -15}, {-3, -16}, {11, -17}, {
            12, -18}, {-4, -19}, {13, 14}, {15, -20}, {16, 
            17}, {-5, -21}, {-6, 18}, {-7, 20}, {-8, 19}, {-9, -22}, {-10, 
            21}, {22, 23}, {-11, -23}, {-12, -24}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 
            1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 4, 2, 1, 3, 1, 1, 3, 1, 1, 1, 4, 1, 1, 1, 
            1, 1, 2, 4, 4, 1, 4, 6, 2, 1, 1, 1, 1, 6, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.9870343481024699, \
-1.2217919825215642`, -0.9437118026542972, -1.9791133154765372`, 
           0.37988052622461055`, -1.0872996993435446`, -1.2026306245589655`, 
           0.37988050619677427`, 1.0094180440090437`, -0.20061828152612526`, 
           1.2775785014003382`, 0.5447925800539437, 0.15910032439626987`, 
           1.2454257679365934`, 1.4351439191204705`, 
           1.5483905143033478`, -2.206755065526796, -0.9437132629283305, \
-0.26720251104979376`, -1.2217913552104367`, -0.5472341784035235, 
           0.6873858293894992, 0.6071812602816271, 0.21963189108680914`, 
           1.0089781956140804`, -0.33009773035577705`, 0.3860878378869299, 
           1.3215925738370764`, 0.607181070229653, 0.20995875528386754`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {23, 24}, {-1, -17}, {6, 
            7}, {-2, 8}, {17, 18}, {9, -18}, {10, 11}, {12, 13}, {14, 
            15}, {-3, -19}, {-4, -20}, {-5, -21}, {-6, 16}, {-7, -22}, {-8, 
            19}, {-9, 20}, {-10, -23}, {-11, 21}, {22, -24}, {-12, -25}, {25, 
            26}, {-13, -26}, {27, 28}, {-14, -27}, {29, -28}, {-15, -29}, {
            30, -30}, {-16, -31}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 
            2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 5, 2, 1, 3, 2, 4, 4}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.4036069624944605, -0.3709764593170388, 
           0.2196319294195075, 0.03084874517465694, 0.118023724404279, 
           0.21963190398701027`, 0.6873867058290601, 0.687386214584639}, 
          "Children" -> 
          RawArray["Integer16",{{2, -4}, {3, 4}, {5, -5}, {6, 7}, {-1, -6}, {
            8, -7}, {-2, -8}, {-3, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 2, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 2, 1, 4, 6, 5, 5, 6, 4, 2, 3, 3, 6, 3, 1, 
            2, 4, 1, 1, 1, 1, 1, 1, 3, 3, 2, 3, 1, 5}], "NominalSplits" -> {},
           "NumericalThresholds" -> {
           0.21963009077345164`, -0.2416935064357577, 
           0.5042488843869508, -1.2217916913069296`, -0.1899269154447576, \
-0.3709764527453898, -0.12253887227758353`, -0.9870362504672219, 
           0.6873866352242146, -0.9437135286244782, 0.4273329421625043, 
           0.42733290483112985`, -0.9870353694679794, 
           0.37988169058056975`, -1.0402925145117496`, -0.9437134906520015, \
-1.2217914020861276`, -1.6257146505137001`, -1.320489061632708, 
           0.6230202050739102, 
           0.23514426269105182`, -0.03940260356922892, -0.03928322999996542, 
           0.3798816299325627, 0.37988231453380195`, -0.2416928786202328, 
           0.37988091159760673`, -2.0240805942380575`, -0.3709765444774433}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {28, 29}, {6, 7}, {19, 
            20}, {-1, -17}, {8, 9}, {-2, 10}, {-3, -18}, {-4, 11}, {
            12, -19}, {13, -20}, {14, 15}, {-5, 16}, {18, -21}, {-6, 
            17}, {-7, -22}, {-8, -23}, {-9, 21}, {23, 24}, {
            22, -24}, {-10, -25}, {25, 26}, {-11, -26}, {-12, -27}, {-13, 
            27}, {-14, -28}, {-15, -29}, {-16, -30}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 
            2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 6, 4, 1, 3, 3, 5, 2, 1, 4, 3, 1, 3, 1, 4, 
            4, 1, 4, 5, 3, 6, 5, 4, 3, 4, 4, 6, 2, 1, 3, 1, 1, 6, 6, 6, 5, 1, 
            4, 3, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOKGomNPWPMe209wtZE9O/X9/h05bY9Lej7vb2i5qdz+
57A9Q/GMud/8b9jvUBHLzYq8bf+B49VL20uP968I7nzxzOjd/gWZu1e8zvmy
/8Iq5z0f8h7aZ4iwN2hkHtqfsV8i3fzkI3sBV/FLikC+xeyDu+r/fbTPqP6+
+SNQ3QPLqo5PQDpB18Vtrf7D/T/KVD3KgPYekP/2e1bc/v0VbbcW5wLtY/A9
L3YG6K4PQa8v2QHtNVhxfpHw/6f2BY5u6iD3RBgKnCsF6ovgur4MRF9gOfbk
JFD9jQ13/z0Bus9AiVX4zNrL+y00Y7QzQeq1lvt/Xn55/46Qvb2HI9bZfwh3
+nYKqJ7h95bLIPrC2dv9IPrERQ0LB6B9L4ombdxoe2l/hnWjpADQ3g+Mi66p
A/2zYIfna+aPP/YDAKZxuAY=
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 38}, {-2, 6}, {7, 
            8}, {-3, -25}, {9, 10}, {-4, 17}, {-5, 11}, {-6, 15}, {12, 
            13}, {-7, -26}, {14, -27}, {-8, -28}, {-9, 16}, {-10, -29}, {18, 
            19}, {-11, 20}, {28, -30}, {21, -31}, {-12, 22}, {23, 24}, {
            25, -32}, {-13, 27}, {-14, 26}, {-15, -33}, {-16, -34}, {29, 
            30}, {-17, 31}, {32, 33}, {-18, -35}, {34, -36}, {-19, 36}, {-20, 
            35}, {-21, -37}, {-22, 37}, {-23, -38}, {39, -39}, {
            40, -40}, {-24, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 
            2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 
            1, 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 6, 5, 1, 2, 1, 2, 4, 3, 3, 3, 1, 2, 1, 1, 
            2, 4, 1, 1, 4, 1, 3, 4, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.37988238267889907`, -0.18992691024215214`, \
-0.37097645244627264`, -1.0872996993435446`, 0.2196318592939306, 
           1.7389825470741336`, 0.21963012277983274`, 0.5447922433652677, 
           0.37988231711602527`, 0.379881592545106, 0.3798805653901014, 
           0.1146900134846589, -0.24169303925942653`, 0.035228895668678706`, 
           2.5900058411705142`, -0.24169308320230876`, 
           0.6873866053739057, -0.9731032903050068, -1.0064665214439739`, \
-1.2217913632748054`, 0.22528342453539696`, 
           0.42733169653893555`, -1.22179123589199, -0.7039527766161378, 
           1.1218083513482675`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {18, -12}, {-1, 6}, {
            15, -13}, {7, 8}, {9, -14}, {-2, -15}, {10, -16}, {11, 12}, {
            13, -17}, {14, -18}, {-3, -19}, {-4, -20}, {16, -21}, {-5, 
            17}, {-6, -22}, {19, 20}, {-7, -23}, {21, 22}, {-8, -24}, {23, 
            24}, {-9, -25}, {-10, 25}, {-11, -26}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 
            1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 4, 3, 3, 3, 1, 4, 1, 4, 1, 2, 1, 1, 1, 3, 
            3, 4, 4, 4, 3, 1, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.37097645244627264`, -1.22179138257429, 
           0.4273316146975463, 
           0.3798805750864602, -0.14383366428536326`, -1.6332901517347675`, 
           0.5447928220467668, -1.2765919295403378`, 
           0.544793503450542, -0.5809424877803915, -0.9437125747625155, \
-0.4406207242723932, -0.5472341784035235, -0.32676634358703005`, 
           0.37988121225149873`, 0.3798812417536923, 0.6873873996017705, 
           0.6873857570672879, 0.6873856241465948, 
           0.37988181620440864`, -0.2647316675690061, -0.24169279394417287`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {20, 21}, {5, 6}, {-2, 
            7}, {-3, 10}, {-4, 8}, {-5, 9}, {-6, -16}, {-7, 11}, {12, 
            13}, {-8, 14}, {-9, 15}, {-10, -17}, {-11, 16}, {-12, 17}, {
            18, -18}, {19, -19}, {-13, -20}, {
            22, -21}, {-14, -22}, {-15, -23}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 
            2, 2, 1, 2, 1, 1, 2, 2, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 5, 6, 1, 2, 1, 6, 1, 4, 6, 3, 5, 4, 4, 1, 
            4, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5927027986293556, -0.3709764527453898, 
           0.6071805462030193, -1.5129786921452144`, 
           0.2196318592513533, -1.1230696761773515`, -0.9870362826351755, 
           0.15614403963539658`, 0.544793197055049, -0.9870354401637806, 
           0.37988231711602527`, -0.6194157279373345, 0.6873863242230422, 
           0.5447934460626147, 0.2315654172335906, 
           0.6873870436372753, -0.05128056209803655}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -9}, {5, -10}, {-1, -11}, {
            6, -12}, {-2, 7}, {8, 9}, {-3, -13}, {10, 11}, {-4, -14}, {
            12, -15}, {13, 14}, {-5, -16}, {15, 16}, {-6, -17}, {-7, 
            17}, {-8, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 
            2, 2, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 6, 5, 4, 6, 2, 1, 4, 1, 3, 1, 4, 3, 2, 4, 
            1, 1, 3, 5, 1, 4, 4, 1, 3, 4, 1, 1, 4, 1, 3, 2, 6, 6, 4, 6, 4, 1, 
            1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGBQA2KDuVfXv897aN/A8pD35NT3+y8wNZrbXnq8/8RS0eSy
ns/7PX5N7uTMe2zfMFN72TOjd/sZpm3gY4l4aZ9wSTGpFChvcSZgZ9Gq//tn
bFuikRt5274guXVOw5RH+wseTooEySdMVPubAxIv4VAE6V8h93MyyL4Pz/kX
+Psf3M/x7Vy5ieYz+wtdvNMygOoa+hcc3h63f/+CNu0jTN2392+I3bFU4P9T
+45nV7YIAukFmbtXvM75sn/CUsZwlcxD+yPes3N8BJq3IP3hr5sfTthPUPme
NSPyo31HwyPzzyB7Zu946TzpiH3CvKqYX/437AXO3dn8VOaMfUfd9l+sQH/N
eF2bdAbo74KgqzwgcwyWBTlwAMU1wl9pg+x9Y9r0O2QHi4PAs93Vc0N/2wMA
lpqoOg==
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {-1, 6}, {19, 20}, {
            7, 8}, {-2, -23}, {9, 10}, {-3, -24}, {11, -25}, {-4, 12}, {-5, 
            13}, {14, -26}, {-6, 15}, {16, 17}, {-7, 
            18}, {-8, -27}, {-9, -28}, {-10, -29}, {-11, -30}, {23, -31}, {31,
             32}, {-12, 24}, {-13, 25}, {26, 27}, {-14, -32}, {28, -33}, {29, 
            30}, {-15, -34}, {-16, -35}, {33, -36}, {-17, 38}, {-18, 34}, {35,
             36}, {-19, 37}, {-20, -37}, {-21, -38}, {-22, -39}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 
            2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 
            1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 2, 2, 4, 1, 
            1, 4, 4, 4, 4, 1, 3, 2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 2, 
            4, 4, 2, 2, 1, 1, 1, 4, 5, 3, 6, 6, 1, 1, 1}], 
          "NominalSplits" -> {}, "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGAwAeIfOz35T059v//CexVVTdMf+wVi5wmoJX7bX/H0rvtT
o3f7GxaInar7+dPe4NOOLNlDP/YvcJ3xJCPytr1HSfeeazJn7DXWO6x4kn/W
/seb3xPX2r+0X/DXL8n1zXF7gYwrS58B9V+wlboIoi3m3lhW1vN5P8eVGWsf
Lpu1X+N18P+qi2f3/1CVkxX+/9TeoDGzDySvkXknsRRIJyztbgfzN7XybDM7
t39DqPG3TKC9DU2q60Hm/Sjca7+x5eH+CYs/pILc06BtrJV17/J+jq/Wm0Wm
P9ofobXc//Pyy/s/+Hb+8qs8vH9HV9/kJ0B9GxYKd09m3WD/4nVj9I8tH+wr
Xh5VND32w74h4crG2bd+2DtE3eaodfi9n0Ei4OVf/xv2Bsxep0HhUKEp1Qxy
z4eUHztA7tux5KrUqffn9nvscokEuUcia29qauK9/W9Mm36H7GBxEODeuvq5
6c39DftyTEHqDRYIb1gYt39/gGGgLsgfM0S/TePMe2y/4OiXXRxAumKpQ/+Z
W2vtPb6yJxe4/LY/McmC78Cmy/YAagXoyA==
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {35, 36}, {6, 7}, {
            8, -30}, {-1, -31}, {-2, -32}, {9, 10}, {11, 12}, {-3, 33}, {13, 
            14}, {32, -33}, {-4, 15}, {-5, -34}, {16, 17}, {18, 19}, {-6, 
            31}, {-7, 20}, {-8, 29}, {-9, 21}, {22, -35}, {23, -36}, {-10, 
            24}, {25, 26}, {27, -37}, {-11, 28}, {-12, -38}, {-13, -39}, {-14,
             30}, {-15, -40}, {-16, -41}, {-17, -42}, {-18, 34}, {-19, -43}, {
            37, -44}, {40, 41}, {-20, 38}, {-21, 39}, {-22, -45}, {42, 
            43}, {-23, 45}, {-24, 44}, {-25, -46}, {-26, -47}, {46, 47}, {
            48, -48}, {52, -49}, {49, -50}, {50, -51}, {-27, 
            51}, {-28, -52}, {-29, -53}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 
            1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 6, 6, 2, 1, 1, 1, 4, 1, 4, 2, 1, 3, 5, 1, 
            1, 3, 2, 1, 1, 2, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.24169343108185504`, \
-0.18992691846876442`, -0.9870343884919004, -0.9437134976877104, 
           0.8324634325010676, -2.179034462295432, 
           0.22613989945790158`, -1.221792370904156, 
           0.19076882471803658`, -1.221792304839397, -0.943712358333709, \
-0.7369410757683497, 
           0.3798805750864602, -0.1225372053102417, -0.8894676950361742, 
           0.02742895505855003, -0.1438342368449541, 0.21963191808402582`, 
           0.06110254433490869, -2.098849628979652, -0.24169279394417287`, \
-0.37097698364149245`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -14}, {13, 14}, {5, 
            6}, {-1, -15}, {-2, 7}, {8, -16}, {9, 10}, {-3, -17}, {-4, 11}, {
            12, -18}, {-5, -19}, {15, 16}, {20, -20}, {-6, 17}, {-7, 19}, {-8,
             18}, {-9, -21}, {-10, -22}, {-11, 21}, {-12, 22}, {-13, -23}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 
            2, 2, 1, 2, 1, 1, 1, 2, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 5, 2, 2, 2, 1, 3, 4, 6, 5, 1, 1, 2, 3}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.37988058958560167`, -0.619414021320539, -0.9437117074526009, 
           0.21963023982080543`, -0.24169240297961747`, -0.9795560206317955, \
-0.1438335077918873, 
           0.6873869303828801, -0.9870343481024699, -0.37097645831132153`, \
-0.5370699283970843, -0.6201244459911726, -0.24169269908767843`, 
           0.37988178605808853`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {
            6, -7}, {-1, -8}, {-2, 7}, {-3, 8}, {-4, -9}, {11, -10}, {
            13, -11}, {12, -12}, {-5, -13}, {14, -14}, {-6, -15}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 
            1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 5, 6, 1, 2, 4, 3, 4, 1, 2, 3, 2, 3, 2, 1, 
            1, 2, 3, 3, 1, 1, 5, 6, 4, 2, 1, 3, 1, 3, 4, 1, 4}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.3798812417536923, -0.3709764593170388, -0.9870343481024699, \
-1.1228814096910664`, 0.21963008723114963`, 0.5447933567739893, 
           0.37988121225149873`, 
           0.6873856227126938, -0.46676951668645517`, -0.24169311627920753`, 
           0.42733253709962193`, -0.9437135999425506, 
           0.42733221539098665`, -0.9437120433241333, -0.5767071663711727, \
-0.6222671718326946, -0.24169267521077664`, 0.42733236270535446`, 
           0.4036069488865808, 1.010260560487211, 
           1.0051572222673144`, -0.1225376663110177, 
           0.6071822962472089, -1.2217924020287718`, -0.9437126257359711, \
-0.44213458221789104`, 0.40360689757917534`, -0.35971623607596603`, 
           0.4273329901768639, -1.22179177057218, -0.5753510265737134, \
-0.26720225205220904`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {9, 10}, {-1, 6}, {
            8, -17}, {-2, 7}, {-3, -18}, {-4, -19}, {11, 12}, {22, -20}, {
            13, -21}, {-5, 18}, {14, 15}, {-6, 16}, {-7, -22}, {-8, 
            17}, {-9, -23}, {19, -24}, {20, -25}, {21, -26}, {-10, -27}, {23, 
            24}, {25, -28}, {-11, 29}, {26, 27}, {-12, 
            28}, {-13, -29}, {-14, -30}, {30, -31}, {-15, 31}, {
            32, -32}, {-16, -33}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 
            1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 1, 3, 4, 4, 1, 2, 3, 1, 3, 3, 3, 2, 4, 
            1, 3, 1, 4, 3, 3, 3, 2, 1, 1, 2, 4, 3, 5, 1, 1, 4, 2, 3}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.9870343478878407, -1.5129786921452144`,
            0.19786724110495624`, 0.4273316695732201, 
           0.687385782533668, -1.2217914355820767`, -0.00791674099515019, 
           0.21963141031557698`, -0.14383472365429917`, 0.6885132125939686, 
           0.37988118540602134`, -0.14383332963408435`, \
-0.14383464844366278`, -0.943713150857052, 
           0.5447934460626147, -0.5472341784035235, 
           0.3798816722916589, -0.35294752604413615`, -1.2217913083753853`, 
           0.4273326592723592, 0.42733159482883076`, 0.4273332390028215, 
           0.21963190398701027`, -0.25236918618882953`, 
           0.16685038309520506`, -0.24169282024025085`, 0.6873864979920619, 
           
           0.3798818669453943, -0.12253900334964452`, -0.1725187529885761, \
-0.2974237775416668, -1.2217915828418953`, 
           0.21963011156172407`, -0.14383385796875037`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {21, 22}, {-1, -19}, {6, 
            7}, {-2, 8}, {-3, -20}, {9, -21}, {-4, 10}, {11, 12}, {13, 
            14}, {-5, 20}, {-6, 15}, {-7, 16}, {-8, -22}, {-9, 17}, {-10, 
            18}, {-11, 19}, {-12, -23}, {-13, -24}, {23, 24}, {32, -25}, {
            25, -26}, {29, 30}, {26, -27}, {27, -28}, {28, -29}, {-14, -30}, {
            31, -31}, {-15, -32}, {-16, -33}, {-17, 33}, {
            34, -34}, {-18, -35}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 
            2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 1, 5, 6, 4, 5, 1, 1, 4, 1, 1, 3, 4, 2, 2, 
            1, 1, 1, 4, 2, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5927027986293556, -0.3358312303021931, \
-0.6194139560758121, -0.18992691846876442`, 
           0.687385782533668, -0.12253765122585747`, -0.5088457327235121, \
-1.320489061632708, 0.5447930286272928, 0.07557900988375632, 
           0.26795626742030354`, 0.3798814882083872, 0.5447931136168656, 
           0.21963191850194463`, 0.21963056877449927`, 0.616109680040613, 
           1.0139581097935544`, 1.0051572222673144`, 
           0.5447924478096402, -0.24169243509886185`, -0.31276552398803803`, 
           2.5900058411705142`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -15}, {5, 6}, {-1, -16}, {7, 8}, {
            19, 20}, {-2, 9}, {-3, 18}, {-4, 10}, {-5, 11}, {12, 
            13}, {-6, -17}, {-7, 14}, {15, -18}, {-8, 16}, {-9, 
            17}, {-10, -19}, {-11, -20}, {-12, -21}, {21, 
            22}, {-13, -22}, {-14, -23}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 
            2, 1, 2, 1, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 5, 5, 4, 1, 6, 2, 1, 6, 1, 6, 1, 5, 3, 1, 
            6, 3, 1, 2, 1, 1, 4, 1, 5, 1, 5, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.5447919725598558, -0.12253888937306101`, -0.6194139560758121, \
-1.2217924590378537`, -0.859350302922226, -0.9870343757930842, \
-0.9437134976877104, -0.7172777250283362, -0.9870356737457113, \
-0.30972555224805864`, -0.9870354420173104, -0.698519850104157, \
-0.6194154238568101, 0.14174915479661232`, -0.6603215813090033, 
           0.6071809614669563, 
           0.42733202899567724`, -0.18268419566111227`, -0.9437128808725257, \
-0.10574580195144989`, -0.11509631932249931`, 
           0.6873856065884469, -1.671182900275893, -0.12253762598152851`, 
           0.08452511950469443, -0.12253843024304412`, -0.18992701137208678`},
           "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 22}, {6, 
            7}, {-2, -15}, {-3, 8}, {-4, 9}, {-5, -16}, {10, 11}, {-6, -17}, {
            12, 13}, {-7, 14}, {15, 16}, {-8, -18}, {17, 18}, {
            19, -19}, {-9, -20}, {-10, -21}, {20, -22}, {
            21, -23}, {-11, -24}, {23, 24}, {-12, -25}, {25, -26}, {-13, 
            26}, {27, -27}, {-14, -28}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 
            1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 1, 5, 5, 1, 1, 1, 1, 5, 2, 2, 4, 1, 1, 4}],
           "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.5927027986293556, \
-0.10574580195144989`, -0.6194139316054139, -0.12253900660285222`, \
-0.3116125628910633, -0.450054434958405, -0.46925113496111637`, \
-1.3123619063741447`, -0.12253828631165387`, 
           0.21963190962192547`, -0.2416931025867175, 0.6873856409928738, 
           0.039306389669813147`, -1.4802471909321664`, 0.687386214584639}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -7}, {8, 9}, {5, 6}, {
            7, -8}, {-1, -9}, {-2, -10}, {-3, 10}, {12, 13}, {
            11, -11}, {-4, -12}, {14, -13}, {15, -14}, {-5, -15}, {-6, -16}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 
            2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 1, 2, 4, 2, 2, 1, 4, 4, 4, 2, 2}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.37097645244627264`, \
-1.5124373013991104`, -0.9437117260358843, -1.2217912827639559`, 
           0.21963195041621986`, 0.21963008723114963`, 1.8995285532834707`, 
           0.6873873925256264, 0.687386422791799, 
           0.6873864016309614, -0.24169279394417287`, -0.24169281579270696`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 6}, {-2, -5}, {-3, -6}, {
            7, -7}, {8, -8}, {9, -9}, {10, -10}, {11, -11}, {
            12, -12}, {-4, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 
            1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 6, 5, 1, 3, 3, 2, 2, 6, 1, 1, 1, 4, 1, 1, 
            1, 1, 1, 1, 1, 6, 1, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.21963009077345164`, -0.9870343554728249, -0.6194139560758121, \
-1.5129786921452144`, 0.42733159482883076`, 
           0.42733209103897485`, -0.5927036039848534, 0.2196300417066792, 
           0.6071816474535909, 1.7084021409376682`, 0.24369165889138467`, 
           0.08452511950469443, 0.6873861515044384, 
           0.12191898135229817`, -0.5061147987998078, -0.21132808876431497`, \
-0.896382040717179, -0.38535669011653084`, 
           0.14786759006363903`, -0.7703830588547804, 
           0.6071809245852515, -0.6892164343303397, -1.671182900275893}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 23}, {6, -12}, {8, 9}, {
            7, -13}, {-2, -14}, {10, -15}, {16, 17}, {11, -16}, {12, -17}, {
            13, 14}, {-3, 15}, {-4, -18}, {-5, -19}, {18, 19}, {-6, -20}, {
            20, -21}, {-7, -22}, {-8, 21}, {-9, 22}, {-10, -23}, {-11, -24}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
            2, 1, 1, 2, 2, 2, 1, 2, 1, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 2, 6, 3, 1, 4, 3, 4, 3, 2, 2, 2, 1, 1, 3, 
            1, 2, 4, 2, 2, 4, 3, 5, 3, 2, 2, 1, 1, 1, 1, 1, 3, 3, 4, 2, 4, 3, 
            1, 2, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> CompressedData["
1:eJxTTMoPSmVkYGDQAGIO+SV8J6e+3+/QcnzbM6N3+wN+/17EkffYXsBV/JJi
5qH9B3Qqpu67dG5/x9dv5QL/n9prXDz85rf/DfuEMy9EPuU9tO8IndyREXnb
/sXVC66n3p/bH6DC+OGRzBn7gI7Th58CzRNY975ppfL7/R7OrnMMoz7a32j3
D0kHqtfoT43/tezF/oiyWwdzvj/ab6DIG1DW83n/Dt4ctvNAcwR8bnWA9H8Q
XGAtDLRXYtJd+2ygvgYF1kPb4vbvf9GQv/EX0B0rupLPgdz9YNkSyycg9XUV
h5mCDu+/EMS4YG/7lf0CzW+WrU87uv9AQGh+1v57+w2CYoTcFB7ul5hxtwVk
nsB0t4RcIB0xv/aGINCeFx5PnR6DzLl0RE4IyN9wdvXlM2b77H/kh/a8eHli
v4HhSq3TQPed8GFlMXV4Zg8A6o6y1Q==
           "], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {14, 15}, {5, 
            6}, {-2, -23}, {7, -24}, {8, 9}, {-3, 10}, {12, 13}, {-4, 
            11}, {-5, -25}, {-6, -26}, {-7, -27}, {16, 17}, {37, 38}, {18, 
            19}, {-8, 36}, {-9, 20}, {23, 24}, {-10, 21}, {
            22, -28}, {-11, -29}, {-12, 25}, {-13, -30}, {-14, 26}, {27, 
            28}, {29, -31}, {32, 33}, {30, -32}, {31, -33}, {-15, -34}, {
            34, -35}, {-16, -36}, {35, -37}, {-17, -38}, {-18, -39}, {-19, 
            39}, {-20, 40}, {-21, -40}, {-22, -41}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 
            2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 
            2, 2, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 1, 6, 6, 6, 1, 5, 2, 2, 3, 1, 3, 2, 5, 2, 
            5, 4, 2, 2, 3, 3, 1, 1, 4, 3, 1, 3, 2, 1, 1, 3, 5, 5, 1, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.37988147137976114`, -0.6286683644775639, -0.9870343481024699, \
-0.9870359091679726, -0.9870345114712382, -0.9314346922450696, \
-0.6194145605373418, 0.21963172943166076`, 
           0.2196309488035726, -0.1438332910914013, 1.0271411635985643`, 
           0.3798810769735579, -0.24169283394967933`, -0.6194152461324061, 
           0.21963086745333205`, -0.12253814618191583`, 
           0.6873861687462579, -0.9437118424822408, -0.24169311627920753`, 
           0.4273322155541468, 0.42733206903553844`, 
           0.7373792383850946, -0.33134193530996736`, -1.2217916454465065`, 
           0.37988169106476555`, -0.41359495770856514`, 
           0.42733156799353456`, -0.2416934220706175, -0.30157770219046753`, \
-0.2510981585576615, 
           0.42733166176424175`, -0.12253784378433819`, \
-0.12253867483867409`, -0.33012852256923697`, -0.09592502306227735}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {18, 19}, {-1, 6}, {8, 
            9}, {-2, 7}, {-3, -19}, {10, 11}, {14, -20}, {-4, 
            12}, {-5, -21}, {13, -22}, {-6, -23}, {-7, 15}, {16, -24}, {-8, 
            17}, {-9, -25}, {-10, -26}, {20, -27}, {21, 22}, {23, -28}, {
            32, -29}, {24, 25}, {26, 27}, {-11, 29}, {-12, -30}, {
            28, -31}, {-13, -32}, {-14, 30}, {-15, 31}, {-16, -33}, {
            33, -34}, {34, -35}, {-17, 35}, {-18, -36}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 
            1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 2, 5, 6, 1, 1, 5, 1, 4, 4, 1, 1, 4, 4, 
            2, 4, 2, 1, 4}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.12253900334964452`, 
           0.37988058958560167`, -0.9437117920167255, -0.6194142862198904, \
-0.9870343493074065, 0.2343055587507299, 
           0.75187802051828, -0.6194139560758121, -2.1377293015558667`, \
-1.2217919662347398`, -0.26720259539051217`, -0.0028214766999623275`, 
           2.134112953330023, 0.6873873914548962, 
           0.6160902159350519, -0.24169336250804885`, 0.687386422791799, 
           0.21963183749817694`, -0.3374756018037277, 0.6873856065884469}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 13}, {-2, 6}, {9, 
            10}, {-3, 7}, {-4, 8}, {-5, -12}, {11, -13}, {-6, 
            12}, {-7, -14}, {-8, -15}, {14, 15}, {16, -16}, {-9, -17}, {17, 
            18}, {19, -18}, {20, -19}, {-10, -20}, {-11, -21}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 
            2, 2, 1, 1, 2, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 1, 3, 3, 3, 1, 3, 4, 1, 4, 1, 3, 4, 2, 2, 
            2, 4, 4, 1, 4, 3}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.18992691868794576`, \
-1.5158085582407619`, 0.42733156799353456`, 0.42733229657545957`, 
           0.37988052622461055`, -1.0872996993435446`, 0.42733205626601434`, 
           0.6873874027396907, 0.22957248449941492`, 0.6873856090415904, 
           0.5798839370857021, 
           0.3798815710934722, -1.221791942016388, -0.943713007066247, \
-0.2416926231800678, -0.24169266645965393`, 0.687386422791799, 
           0.6873861184112959, -0.7703590854802407, 0.6873856227126938, 
           0.37988086537575905`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {15, -10}, {-1, -11}, {6, 
            7}, {-2, -12}, {8, 9}, {10, 11}, {-3, -13}, {
            12, -14}, {-4, -15}, {-5, 13}, {-6, 14}, {-7, -16}, {16, -17}, {
            17, -18}, {18, 19}, {20, -19}, {-8, -20}, {21, -21}, {-9, -22}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 
            1, 2, 1, 2, 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 3, 4, 2, 1, 2, 1, 3, 2, 2, 4, 2, 3, 4, 2, 
            4, 2, 4, 1, 4, 2, 1, 4, 1, 1, 1, 2, 1, 4, 1, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.37097646651213845`, \
-0.1438332656322303, -0.3384995887655884, -0.9437136126003525, \
-1.6332901517347675`, -0.9437128113596458, 0.23798171173048988`, 
           0.4273325924990359, -0.9437130855738518, -0.9437134858429523, \
-1.221792076632557, -0.9437128816533749, 0.42733288470368125`, 
           0.687385782533668, -0.9437120264206778, -1.2217917442012531`, \
-0.24169242029038163`, -0.26720288806769954`, 1.003712854331921, 
           0.6873873826582564, 0.21963152020585075`, -0.11809763954711572`, 
           0.6873863913760427, 1.2369224324800445`, 1.3215925738370764`, 
           2.0570669496324783`, 0.21963190398701027`, -0.000443689925995255, 
           0.6873856050202649, -0.03928322999996542, -0.19716854397374783`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {22, 23}, {-2, 5}, {6, 
            7}, {-3, 8}, {9, 10}, {-4, -19}, {-5, 11}, {19, 20}, {-6, 
            12}, {-7, 13}, {14, -20}, {15, -21}, {-8, 16}, {-9, 17}, {
            18, -22}, {-10, -23}, {-11, -24}, {21, -25}, {-12, -26}, {-13, 
            24}, {27, 28}, {-14, 25}, {-15, 26}, {-16, -27}, {29, -28}, {
            30, -29}, {-17, -30}, {31, -31}, {-18, -32}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 
            1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{6, 3, 2, 1, 3, 1, 4, 1, 2, 1, 1, 4, 4, 1, 3, 
            2, 4, 4, 1, 5, 3, 5, 4, 4, 4, 1, 2, 5, 1, 1, 2, 1, 4, 1}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.9870343493074065, 
           0.37988071832669146`, -0.24169343146135347`, -0.8894676950361742, 
           0.42733236270535446`, -1.2765919295403378`, 0.5447931972956015, 
           0.6885132125939686, -0.9437135636481715, -0.23295533625772546`, \
-1.6332901517347675`, -1.2217913117502448`, -1.221791942016388, \
-0.3071258809910993, 
           0.37988171568991946`, -0.24169276328573552`, -1.2217913970567533`, \
-0.26720270768373267`, -0.3135423545840874, -0.12253707859210716`, 
           0.3798804548060244, -0.1225376837797737, -1.22179233193663, \
-1.2217927962521564`, -1.2217914664178409`, -0.33009773035577705`, \
-0.5927028890495567, -0.12253902257886462`, -0.5351896628004109, \
-0.24754510205638192`, -0.9437128297532853, -0.5446742047885955, 
           0.5447926760339907, -0.03928322999996542}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {20, 21}, {6, 7}, {9, 
            10}, {-1, -21}, {-2, 8}, {-3, -22}, {-4, 11}, {19, -23}, {12, 
            13}, {-5, -24}, {-6, 14}, {15, 16}, {-7, 17}, {-8, -25}, {-9, 
            18}, {-10, -26}, {-11, -27}, {22, -28}, {33, 34}, {23, 24}, {-12, 
            25}, {-13, 31}, {26, 27}, {-14, 28}, {29, -29}, {-15, -30}, {-16, 
            30}, {-17, -31}, {32, -32}, {-18, -33}, {-19, -34}, {-20, -35}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 
            2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|
          "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
           "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "OOBConfusionMatrix" -> {{0.7290792857375884, 0.3333292181959032}, {
       0.2709207142624116, 0.6666707818040969}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 1.5389176732256922`|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> 6^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`UnknownType, TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {31.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.325969, 
      "MaxTrainingMemory" -> 7501856, "DataMemory" -> 227152, 
      "FunctionMemory" -> 265576, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 8, 10, 22, 1, 28.132533`8.201783818501335}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.932330488148222*^9},
 CellLabel->"Out[12]=",
 CellID->954248282,ExpressionUUID->"d0d363eb-12cf-4a8a-8702-ab432f53b092"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. Obtain accuracies after shuffling.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384660046543*^9}, 3.661480751391738*^9},
 CellID->216085518,ExpressionUUID->"931f15b9-0ff5-43a3-a2b0-9a9e449997cf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accs", " ", "=", " ", 
  RowBox[{"AccuracyByVariableShuffling", "[", 
   RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "varNames"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.6603846897457857`*^9}, {3.661478713954514*^9, 
  3.661478714324026*^9}},
 CellLabel->"In[13]:=",
 CellID->354453949,ExpressionUUID->"5b2a3537-7b05-45d5-90a3-932980d5ff43"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", "0.7786259541984732`"}], ",", 
   RowBox[{"\<\"passenger class\"\>", "\[Rule]", "0.7251908396946565`"}], ",", 
   RowBox[{"\<\"passenger age\"\>", "\[Rule]", "0.7684478371501272`"}], ",", 
   RowBox[{"\<\"passenger sex\"\>", "\[Rule]", "0.6310432569974554`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330488530303*^9},
 CellLabel->"Out[13]=",
 CellID->642999778,ExpressionUUID->"31da86dd-0176-4d94-9fef-5a295f259fd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6. Tabulate the results.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.6603846715328293`*^9}, 3.661480754475315*^9},
 CellID->966519365,ExpressionUUID->"801c0258-7387-4774-9fb2-10b99945069e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"Grid", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"Prepend", "[", "\n", "      ", 
      RowBox[{
       RowBox[{"List", " ", "@@@", " ", 
        RowBox[{"Normal", "[", 
         RowBox[{"accs", "/", 
          RowBox[{"First", "[", "accs", "]"}]}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", " ", "Bold", ",", " ", "Blue", ",", " ", 
           RowBox[{"FontFamily", " ", "->", " ", "\"\<Times\>\""}]}], "]"}], 
         " ", "&"}], " ", "/@", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<shuffled variable\>\"", ",", " ", "\"\<accuracy ratio\>\""}], 
         "}"}]}]}], "]"}], ",", "\n", "    ", 
     RowBox[{"Alignment", " ", "->", " ", "Left"}], ",", " ", 
     RowBox[{"Dividers", " ", "->", " ", "All"}]}], "]"}], "\n"}]}]], "Input",\

 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.6603846863983*^9}},
 CellLabel->"In[14]:=",
 CellID->724661647,ExpressionUUID->"a56c69f6-2c57-4cb8-92fa-00cb13368c0a"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"shuffled variable\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"accuracy ratio\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]]},
    {"None", "1.`"},
    {"\<\"passenger class\"\>", "0.9313725490196079`"},
    {"\<\"passenger age\"\>", "0.9869281045751634`"},
    {"\<\"passenger sex\"\>", "0.8104575163398693`"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.932330488541278*^9},
 CellLabel->"Out[14]=",
 CellID->759557142,ExpressionUUID->"4f2972ce-4e67-4530-8e16-ddf7c71cb06f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
7. Further confirmation of the found variable importance can be done using \
the mosaic plots.
    We can see that female passengers are much more likely to survive and \
especially female passengers from first and second class.\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384702356645*^9}, 3.661480757376498*^9, {
   3.661481386605214*^9, 3.661481458657584*^9}},
 CellID->426412773,ExpressionUUID->"2cc9565e-ceac-465b-9814-e4a76c3f7473"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Flatten", " ", "/@", " ", 
       RowBox[{"(", 
        RowBox[{"List", " ", "@@@", " ", "trainingSet"}], ")"}]}], ")"}], ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "_Missing", ",", "___"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{"MosaicPlot", "[", 
   RowBox[{
    RowBox[{"t", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "]"}], "]"}], ",", " ", 
    RowBox[{"ColorRules", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"2", "->", " ", 
       RowBox[{"ColorData", "[", 
        RowBox[{"7", ",", " ", "\"\<ColorList\>\""}], "]"}]}], "}"}]}], " ", 
    ",", 
    RowBox[{"\"\<LabelRotation\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0.45"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"ImageSize", "->", "Medium"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.660384704280954*^9}, {3.661478101202125*^9, 
  3.661478154356235*^9}, {3.661478460934791*^9, 3.6614784694504967`*^9}, {
  3.661478584988674*^9, 3.661478585702273*^9}, {3.6637068494106693`*^9, 
  3.663706958345851*^9}, {3.671796890228039*^9, 3.6717969119950542`*^9}, {
  3.671797007981468*^9, 3.671797048829679*^9}, {3.932330284738927*^9, 
  3.932330291928985*^9}},
 CellLabel->"In[15]:=",
 CellID->566545772,ExpressionUUID->"24ab10af-72c8-42ad-946c-7ee7d2d8836a"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.}, {0.45228426395939086, 0.005630236794171221}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             "0.2691256830601093`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.12295081967213116`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.45685279187817257`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"1st\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"died\""}], TraditionalForm], DisplayForm], 
             "0.00273224043715847`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.010152284263959392`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], 
             "0.022222222222222223`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 0.2691256830601093}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.12295081967213116`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.45685279187817257`}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.00273224043715847}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.010152284263959392`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 
            0.022222222222222223`}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.010630236794171221}, {0.45228426395939086, 0.25836065573770495}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             "0.2691256830601093`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.12295081967213116`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.45685279187817257`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"1st\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.12021857923497267`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.4467005076142132`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.9777777777777777`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 0.2691256830601093}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.12295081967213116`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.45685279187817257`}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.12021857923497267`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.4467005076142132}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 
            0.9777777777777777}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.4622842639593909, 0.}, {1., 0.16574996169756398}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             "0.2691256830601093`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.14617486338797814`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.5431472081218274`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"1st\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"died\""}], TraditionalForm], DisplayForm], 
             "0.09562841530054644`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.35532994923857864`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], 
             "0.6542056074766355`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 0.2691256830601093}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.14617486338797814`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.5431472081218274}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.09562841530054644}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.35532994923857864`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 0.6542056074766355}}, 
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
         "Tooltip"]& ]}, 
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.4622842639593909, 0.17074996169756398}, {1., 0.25836065573770495}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             "0.2691256830601093`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.14617486338797814`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.5431472081218274`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"1st\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.050546448087431695`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.18781725888324868`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.34579439252336447`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 0.2691256830601093}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.14617486338797814`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.5431472081218274}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.050546448087431695`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.18781725888324868`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"1st\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 
            0.34579439252336447`}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}}, {{
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.27836065573770497}, {0.4156906077348066, 0.3058789905090596}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             "0.24726775956284153`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.10382513661202185`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.41988950276243087`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"2nd\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"died\""}], TraditionalForm], DisplayForm], 
             "0.012295081967213115`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.04972375690607734`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], 
             "0.11842105263157895`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 0.24726775956284153`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.10382513661202185`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.41988950276243087`}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.012295081967213115`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.04972375690607734}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 0.11842105263157895`}},
           Alignment -> Left, Dividers -> {None, {False, True, False}}], 
         "Tooltip"]& ]}, 
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.3108789905090596}, {0.4156906077348066, 0.5157377049180327}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             "0.24726775956284153`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.10382513661202185`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.41988950276243087`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"2nd\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.09153005464480873`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.37016574585635353`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.881578947368421`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 0.24726775956284153`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.10382513661202185`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.41988950276243087`}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.09153005464480873}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.37016574585635353`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 
            0.881578947368421}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.4256906077348066, 0.27836065573770497}, {1., 0.4775409836065573}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             "0.24726775956284153`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.14344262295081966`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.580110497237569`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"2nd\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"died\""}], TraditionalForm], DisplayForm], 
             "0.12295081967213113`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.4972375690607734`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], 
             "0.8571428571428571`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 0.24726775956284153`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.14344262295081966`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.580110497237569}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.12295081967213113`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.4972375690607734}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 0.8571428571428571}}, 
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
         "Tooltip"]& ]}, 
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.4256906077348066, 0.4825409836065573}, {1., 0.5157377049180327}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             "0.24726775956284153`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.14344262295081966`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.580110497237569`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"2nd\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.020491803278688523`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.08287292817679558`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.14285714285714285`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 0.24726775956284153`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.14344262295081966`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.580110497237569}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.020491803278688523`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.08287292817679558}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"2nd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 
            0.14285714285714285`}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}}, {{
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.5357377049180327}, {0.2964406779661017, 0.7653688524590163}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             "0.48360655737704916`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.1448087431693989`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.2994350282485876`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"3rd\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"died\""}], TraditionalForm], DisplayForm], 
             "0.07240437158469945`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.1497175141242938`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], "0.5`"}},
            GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 0.48360655737704916`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.1448087431693989}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.2994350282485876}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.07240437158469945}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.1497175141242938}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 0.5}}, Alignment -> 
          Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
      {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
       TagBox[
        TooltipBox[RectangleBox[{0., 0.7703688524590163}, {0.2964406779661017, 1.}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             "0.48360655737704916`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], "0.1448087431693989`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\""}], TraditionalForm], DisplayForm], 
             "0.2994350282485876`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"3rd\"", "\[Intersection]", "\"female\"", "\[Intersection]",
                  "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.07240437158469945`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.1497175141242938`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.5`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 0.48360655737704916`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 0.1448087431693989}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\""}], TraditionalForm]], 
            0.2994350282485876}, {"", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.07240437158469945}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"female\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.1497175141242938}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"female\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 0.5}}, Alignment -> 
          Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.3064406779661017, 0.5357377049180327}, {1., 0.9116661158117398}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             "0.48360655737704916`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.33879781420765026`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.7005649717514125`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"3rd\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"died\""}], TraditionalForm], DisplayForm], 
             "0.2773224043715847`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
               TraditionalForm], DisplayForm], "0.5734463276836159`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"died\""}], TraditionalForm], DisplayForm], 
             "0.8185483870967742`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 0.48360655737704916`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.33879781420765026`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.7005649717514125}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"died\""}], TraditionalForm]], 
            0.2773224043715847}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"died\""}], 
              TraditionalForm]], 0.5734463276836159}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"died\""}], TraditionalForm]], 0.8185483870967742}}, 
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
         "Tooltip"]& ]}, 
      {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
       TagBox[
        TooltipBox[RectangleBox[{0.3064406779661017, 0.9166661158117398}, {1., 1.}],
         TagBox[
          GridBox[{{
             StyleBox["\"condition\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"event\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False], 
             StyleBox["\"probability\"", 
              RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
              False]}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             "0.48360655737704916`"}, {"\"\"", 
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], "0.33879781420765026`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\""}], TraditionalForm], DisplayForm], 
             "0.7005649717514125`"}, {"\"\"", 
             TagBox[
              FormBox[
               
               RowBox[{
                "\"3rd\"", "\[Intersection]", "\"male\"", "\[Intersection]", 
                 "\"survived\""}], TraditionalForm], DisplayForm], 
             "0.061475409836065566`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\""}], TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
               TraditionalForm], DisplayForm], "0.12711864406779663`"}, {
             TagBox[
              FormBox[
               RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
               TraditionalForm], DisplayForm], 
             TagBox[
              FormBox[
               RowBox[{"\"survived\""}], TraditionalForm], DisplayForm], 
             "0.1814516129032258`"}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxDividers -> {
            "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
        Annotation[#, 
         Grid[{{
            Style["condition", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["event", 
             RGBColor[0, 0, 1], FontFamily -> "Times"], 
            Style["probability", 
             RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 0.48360655737704916`}, {
           "", 
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 0.33879781420765026`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\""}], TraditionalForm]], 0.7005649717514125}, {
           "", 
            DisplayForm[
             FormBox[
              
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\"", 
                "\[Intersection]", "\"survived\""}], TraditionalForm]], 
            0.061475409836065566`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\""}], TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"male\"", "\[Intersection]", "\"survived\""}], 
              TraditionalForm]], 0.12711864406779663`}, {
            DisplayForm[
             FormBox[
              RowBox[{"\"3rd\"", "\[Intersection]", "\"male\""}], 
              TraditionalForm]], 
            DisplayForm[
             FormBox[
              RowBox[{"\"survived\""}], TraditionalForm]], 
            0.1814516129032258}}, Alignment -> Left, 
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}}}, 
   {GrayLevel[
    0], {{InsetBox["\<\"1st\"\>", {0, 0.12918032786885247}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"2nd\"\>", {0, 0.39704918032786884}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"3rd\"\>", {0, 0.7678688524590164}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {0, 1}]}, {
      InsetBox["\<\"died\"\>", {1, 0.08287498084878199}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"survived\"\>", {1, 0.21455530871763445}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}]}, {
      InsetBox["\<\"died\"\>", {1, 0.3779508196721311}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"survived\"\>", {1, 0.499139344262295}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}]}, {
      InsetBox["\<\"female\"\>", {0.14822033898305084, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.45}], 
      InsetBox["\<\"male\"\>", {0.6532203389830509, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.45}]}, {
      InsetBox["\<\"died\"\>", {1, 0.7237019103648863}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"survived\"\>", {1, 0.95833305790587}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}]}}, {}}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{3.932330488594879*^9},
 CellLabel->"Out[16]=",
 CellID->1234087826,ExpressionUUID->"dda6f0e4-7530-40d3-ab25-ce37fe06ef15"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
5a. In order to use F-scores instead of overall accuracy the desired class \
labels are specified with
    the option \"ClassLabels\".\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.660384712470241*^9}, {3.661477836956293*^9, 3.6614778378738422`*^9}, 
   3.661480760335567*^9, {3.932328503552126*^9, 3.932328506059107*^9}},
 CellID->1569257709,ExpressionUUID->"fb4eca22-a85e-465f-8a7f-8d5cf490f9c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"accs", " ", "=", " ", 
   RowBox[{"AccuracyByVariableShuffling", "[", 
    RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "varNames", ",", " ", 
     RowBox[{"\"\<ClassLabels\>\"", " ", "->", " ", "classLabels"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
  3.6603847570770683`*^9}, {3.6614787288594713`*^9, 3.661478729218994*^9}, {
  3.9323281425891237`*^9, 3.932328143451907*^9}},
 CellLabel->"In[17]:=",
 CellID->1267646356,ExpressionUUID->"c1da8097-9caf-4a37-a50f-9ee7cadf7bdc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.7532467532467533`", ",", "0.8705882352941177`"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"passenger class\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.6801242236024843`", ",", "0.6619718309859155`"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"passenger age\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.7507987220447284`", ",", "0.9`"}], "}"}]}], ",", 
   RowBox[{"\<\"passenger sex\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.6687898089171974`", ",", "0.5822784810126582`"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330488811969*^9},
 CellLabel->"Out[17]=",
 CellID->917028856,ExpressionUUID->"f9dfb950-cf28-42eb-bc6e-e59624ae7fea"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
5b. Here is another example that uses the class label with the smallest \
F-score.
    (Probably the most important since it is most misclassified).\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.660384720594095*^9}, 3.6614807625295067`*^9, 3.9323288591504107`*^9},
 CellID->1752313785,ExpressionUUID->"caa72473-8e52-44c4-bfac-a1d9bc4961cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accs", " ", "=", " ", 
  RowBox[{"AccuracyByVariableShuffling", "[", 
   RowBox[{
   "clFunc", ",", " ", "testSet", ",", " ", "varNames", ",", "\n", 
    "                                     ", 
    RowBox[{
     RowBox[{
      RowBox[{"\"\<ClassLabels\>\"", " ", "->", " ", 
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Min", "[", "#", "]"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}]}], " ", 
      "&"}], "@", "\n", 
     "                                                                ", 
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "\"\<FScore\>\""}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
  3.6603847548836718`*^9}, {3.661478732266973*^9, 3.6614787325596657`*^9}, {
  3.9323281541531973`*^9, 3.932328155088368*^9}},
 CellLabel->"In[18]:=",
 CellID->547049537,ExpressionUUID->"22755d44-0336-4f19-952a-697ce2409db6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", 
    RowBox[{"{", "0.8705882352941177`", "}"}]}], ",", 
   RowBox[{"\<\"passenger class\"\>", "\[Rule]", 
    RowBox[{"{", "0.7313432835820896`", "}"}]}], ",", 
   RowBox[{"\<\"passenger age\"\>", "\[Rule]", 
    RowBox[{"{", "0.8426966292134831`", "}"}]}], ",", 
   RowBox[{"\<\"passenger sex\"\>", "\[Rule]", 
    RowBox[{"{", "0.5526315789473685`", "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330489117627*^9},
 CellLabel->"Out[18]=",
 CellID->13848273,ExpressionUUID->"1d5179e6-6da6-40e7-a3e8-e4357e74bcd0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "5c. It is good idea to verify that we get the same results using different \
classifiers. Below is given code that computes the shuffled accuracies and \
returns the relative damage scores for a set of methods of ",
 StyleBox["Classify", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.660974679875415*^9, 3.660974817215042*^9}, 
   3.661386697093895*^9, 3.661386804010661*^9, 3.661479966539384*^9, 
   3.6614807645315638`*^9},
 CellID->218448871,ExpressionUUID->"09e65dc2-768a-493a-88bb-5d9859ec2ba0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mres", "=", 
   RowBox[{"Association", "@", 
    RowBox[{"Map", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "clMethod", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cf", "=", 
          RowBox[{"Classify", "[", 
           RowBox[{"trainingSet", ",", 
            RowBox[{"Method", "\[Rule]", "clMethod"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"accRes", "=", 
          RowBox[{"AccuracyByVariableShuffling", "[", 
           RowBox[{"cf", ",", "testSet", ",", "varNames", ",", 
            RowBox[{"\"\<ClassLabels\>\"", "\[Rule]", "\"\<survived\>\""}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"clMethod", "->", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"accRes", "[", "None", "]"}], "-", 
             RowBox[{"Rest", "[", "accRes", "]"}]}], ")"}], "/", 
           RowBox[{"accRes", "[", "None", "]"}]}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<LogisticRegression\>\"", ",", "\"\<NearestNeighbors\>\"", ",", 
        "\"\<RandomForest\>\"", ",", "\"\<SupportVectorMachine\>\""}], 
       "}"}]}], "]"}]}]}], " ", ";"}]], "Input",
 CellChangeTimes->{{3.66078295610428*^9, 3.660782975418014*^9}, {
   3.660783030312707*^9, 3.660783044990341*^9}, {3.6609499064605494`*^9, 
   3.660949911443185*^9}, {3.660961430613764*^9, 3.660961575380033*^9}, {
   3.6609616093212957`*^9, 3.660961688365486*^9}, {3.660961803150673*^9, 
   3.660961825704174*^9}, {3.660961857024324*^9, 3.660961862008582*^9}, {
   3.660961936429467*^9, 3.660961938047061*^9}, {3.660974841686441*^9, 
   3.660974866277235*^9}, {3.661000087193057*^9, 3.6610001133814983`*^9}, {
   3.661000205546337*^9, 3.6610002274459143`*^9}, {3.661479977184216*^9, 
   3.6614799989717207`*^9}, 3.66370700359934*^9, {3.663707234504921*^9, 
   3.663707238030747*^9}, {3.663708647298173*^9, 3.663708650537973*^9}, 
   3.932328166005431*^9, {3.932330440364324*^9, 3.932330440835383*^9}},
 CellLabel->"In[19]:=",
 CellID->1420622174,ExpressionUUID->"b0eccd0a-886e-4459-8ce1-5e02d8d1faca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", "mres", "]"}]], "Input",
 CellChangeTimes->{{3.660961673222324*^9, 3.660961676539085*^9}, {
   3.6609618061853437`*^9, 3.6609618305305862`*^9}, {3.6609618735277033`*^9, 
   3.660961884677973*^9}, {3.661000209603654*^9, 3.661000211020338*^9}, {
   3.661389698423849*^9, 3.661389705276054*^9}, 3.6614830751973267`*^9, {
   3.6637084639102983`*^9, 3.6637084949928217`*^9}, {3.663708542559126*^9, 
   3.663708543301029*^9}, {3.932328190815701*^9, 3.932328192749699*^9}},
 CellLabel->"In[20]:=",
 CellID->673691072,ExpressionUUID->"81f02fb7-3d88-4acf-9722-a15d791ee287"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "LogisticRegression" -> {<|
         "passenger class" -> {0.12865988838773793`}, 
          "passenger age" -> {0.024803344908227543`}, 
          "passenger sex" -> {0.4002157497303128}|>}, 
       "NearestNeighbors" -> {<|
         "passenger class" -> {0.12586805555555544`}, 
          "passenger age" -> {-0.021802325581395374`}, 
          "passenger sex" -> {0.30959302325581384`}|>}, 
       "RandomForest" -> {<|
         "passenger class" -> {0.18400000000000008`}, 
          "passenger age" -> {0.009230769230769322}, 
          "passenger sex" -> {0.37279999999999996`}|>}, 
       "SupportVectorMachine" -> {<|
         "passenger class" -> {0.}, "passenger age" -> {0.}, 
          "passenger sex" -> {0.504950495049505}|>}|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[210.], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`AtomShape[157.5], 
              TypeSystem`PackageScope`UnknownShape[False]]], 3, 
            DirectedInfinity[1], {All, All}]], 1, 
          DirectedInfinity[1], {All}]]], 4, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "LogisticRegression", "NearestNeighbors", "RandomForest", 
         "SupportVectorMachine"]], 
       TypeSystem`Vector[
        TypeSystem`Assoc[
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "passenger age", "passenger class", "passenger sex"]], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 1], 3], 1], 4], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[210.], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`AtomShape[157.5], 
              TypeSystem`PackageScope`UnknownShape[False]]], 3, 
            DirectedInfinity[1], {All, All}]], 1, 
          DirectedInfinity[1], {All}]]], 4, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration[
        "LogisticRegression", "NearestNeighbors", "RandomForest", 
         "SupportVectorMachine"]], 
       TypeSystem`Vector[
        TypeSystem`Assoc[
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "passenger age", "passenger class", "passenger sex"]], 
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 1], 3], 1], 4], "Path" -> {}, 
     "DisplayedRowCount" -> 4, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     4, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LogisticRegression", 
                  Style[
                  "LogisticRegression", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{210., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger class", 
                  Style[
                  "passenger class", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger class"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger class"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.12865988838773793`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.12865988838773793`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger class"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger class"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger age", 
                  Style[
                  "passenger age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.024803344908227543`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.024803344908227543`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger age"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger age"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger sex", 
                  Style[
                  "passenger sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger sex"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger sex"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0.4002157497303128}, ShowStringCharacters -> False], 
                  
                  Style[
                   Style[{0.4002157497303128}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"], 1, 
                    Key["passenger sex"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 1, 
                 Key["passenger sex"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors", 
                  Style[
                  "NearestNeighbors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{210., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger class", 
                  Style[
                  "passenger class", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger class"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger class"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.12586805555555544`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.12586805555555544`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger class"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger class"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger age", 
                  Style[
                  "passenger age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{-0.021802325581395374`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{-0.021802325581395374`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger age"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger age"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger sex", 
                  Style[
                  "passenger sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger sex"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger sex"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.30959302325581384`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.30959302325581384`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"], 1, 
                    Key["passenger sex"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 1, 
                 Key["passenger sex"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest", 
                  Style[
                  "RandomForest", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{210., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger class", 
                  Style[
                  "passenger class", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger class"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger class"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.18400000000000008`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.18400000000000008`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger class"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger class"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger age", 
                  Style[
                  "passenger age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.009230769230769322}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.009230769230769322}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger age"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger age"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger sex", 
                  Style[
                  "passenger sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger sex"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger sex"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{0.37279999999999996`}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{0.37279999999999996`}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"], 1, 
                    Key["passenger sex"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 1, 
                 Key["passenger sex"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SupportVectorMachine", 
                  Style[
                  "SupportVectorMachine", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{210., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger class", 
                  Style[
                  "passenger class", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger class"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger class"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0.}, ShowStringCharacters -> False], 
                  Style[
                   Style[{0.}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger class"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger class"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger age", 
                  Style[
                  "passenger age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0.}, ShowStringCharacters -> False], 
                  Style[
                   Style[{0.}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger age"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger age"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["passenger sex", 
                  Style[
                  "passenger sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger sex"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger sex"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{157.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0.504950495049505}, ShowStringCharacters -> False], 
                  Style[
                   Style[{0.504950495049505}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"], 1, 
                    Key["passenger sex"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 1, 
                 Key["passenger sex"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       493.7385438368056, {196.80191040039062`, 203.41567993164062`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      493.7385438368056, {196.80191040039062`, 203.41567993164062`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.932330492954142*^9},
 CellLabel->"Out[20]=",
 CellID->1679353213,ExpressionUUID->"a6fc46b5-e305-4cbf-974d-56c11c4656f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Concrete application over the \[OpenCurlyDoubleQuote]Mushroom\
\[CloseCurlyDoubleQuote] dataset", "Section",
 CellChangeTimes->{{3.660384365159965*^9, 3.660384374710009*^9}, {
  3.660384559618553*^9, 3.6603845673800983`*^9}, {3.661477766718175*^9, 
  3.661477771835672*^9}, {3.6614778669790707`*^9, 3.6614779306407003`*^9}},
 CellID->1079493977,ExpressionUUID->"4a6dc9a4-9bed-4305-9e49-3826846c2148"],

Cell[CellGroupData[{

Cell["1. Load some data.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384601972375*^9}, 
   3.6603847926157103`*^9, {3.661477776891341*^9, 3.661477802267498*^9}, {
   3.661477895077868*^9, 3.6614778954842663`*^9}},
 CellID->1113421583,ExpressionUUID->"21ed4414-009e-4fd9-99b4-7fc2f4f845af"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"testSetName", " ", "=", " ", "\"\<Mushroom\>\""}], ";"}], " ", 
   "\n", " ", 
   RowBox[{
    RowBox[{"trainingSet", " ", "=", " ", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
       ",", " ", "\"\<TrainingData\>\""}], "]"}]}], ";"}], "\n", " ", 
   RowBox[{
    RowBox[{"testSet", " ", "=", " ", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
       ",", " ", "\"\<TestData\>\""}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384607563855*^9}, {
  3.661477934627091*^9, 3.661477936322877*^9}},
 CellLabel->"In[21]:=",
 CellID->104045523,ExpressionUUID->"d747d0b0-e43e-4e4b-8456-0412eb9a3328"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. Variable names and unique class labels. ", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.6603846269479237`*^9}},
 CellID->641416403,ExpressionUUID->"8a0dd16d-a5e3-4b2a-bc64-08bab9d2b82e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"varNames", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"List", " ", "@@", " ", 
     RowBox[{"ExampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
       ",", " ", "\"\<VariableDescriptions\>\""}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"varNames", "[", 
    RowBox[{"[", 
     RowBox[{"-", "1"}], "]"}], "]"}], "=", "\"\<edibility of mushroom\>\""}],
   ";"}], "\[IndentingNewLine]", "varNames"}], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384643834402*^9}, {
  3.6614779420588017`*^9, 3.661477942330853*^9}, {3.6614810069244823`*^9, 
  3.6614810307532*^9}},
 CellLabel->"In[24]:=",
 CellID->2065060928,ExpressionUUID->"bce3a413-33ed-48c8-a2b8-56bfef6b9f61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"cap-shape\"\>", ",", "\<\"cap-surface\"\>", 
   ",", "\<\"cap-color\"\>", ",", "\<\"bruises?\"\>", ",", "\<\"odor\"\>", 
   ",", "\<\"gill-attachment\"\>", ",", "\<\"gill-spacing\"\>", 
   ",", "\<\"gill-size\"\>", ",", "\<\"gill-color\"\>", 
   ",", "\<\"stalk-shape\"\>", ",", "\<\"stalk-root\"\>", 
   ",", "\<\"stalk-surface-above-ring\"\>", 
   ",", "\<\"stalk-surface-below-ring\"\>", 
   ",", "\<\"stalk-color-above-ring\"\>", 
   ",", "\<\"stalk-color-below-ring\"\>", ",", "\<\"veil-type\"\>", 
   ",", "\<\"veil-color\"\>", ",", "\<\"ring-number\"\>", 
   ",", "\<\"ring-type\"\>", ",", "\<\"spore-print-color\"\>", 
   ",", "\<\"population\"\>", ",", "\<\"habitat\"\>", 
   ",", "\<\"edibility of mushroom\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.932330493249991*^9},
 CellLabel->"Out[26]=",
 CellID->511878370,ExpressionUUID->"6a7c050d-7f2c-46c7-a22e-2fa9c40bb206"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classLabels", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{
    RowBox[{"ExampleData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<MachineLearning\>\"", ",", " ", "testSetName"}], "}"}], 
      ",", " ", "\"\<Data\>\""}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"-", "1"}]}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384645937858*^9}, {
  3.661477946457251*^9, 3.66147794666087*^9}},
 CellLabel->"In[27]:=",
 CellID->1825348810,ExpressionUUID->"f0f1a5ef-ef89-4943-b481-ac7d9878dced"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"edible\"\>", ",", "\<\"poisonous\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.932330493466071*^9},
 CellLabel->"Out[27]=",
 CellID->320274708,ExpressionUUID->"3015dd1e-db72-46ca-b15d-2b5e5bcff74d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Here is a data summary.", "Text",
 CellChangeTimes->{{3.6614805921042633`*^9, 3.661480612780298*^9}, {
  3.66148074523971*^9, 3.661480746219706*^9}},
 CellID->122751475,ExpressionUUID->"2f147c92-9db6-499a-8792-bc14b438573f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{"RecordsSummary", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Flatten", "/@", 
          RowBox[{"(", 
           RowBox[{"List", "@@@", 
            RowBox[{"Join", "[", 
             RowBox[{"trainingSet", ",", "testSet"}], "]"}]}], ")"}]}], ")"}],
         "/.", 
        RowBox[{"_Missing", "\[Rule]", "0"}]}], ",", "varNames"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "4"}], "}"}], ",", "\"\<\>\""}], "]"}], ",", 
   RowBox[{"Dividers", "->", "All"}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.661480942373609*^9, 3.6614809836158457`*^9}},
 CellLabel->"In[28]:=",
 CellID->1499739205,ExpressionUUID->"8364e1ee-d490-4e52-8bfa-54782896aaef"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"1 cap-shape\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"convex\"\>", "3656"},
            {"\<\"flat\"\>", "3152"},
            {"\<\"knobbed\"\>", "828"},
            {"\<\"bell\"\>", "452"},
            {"\<\"sunken\"\>", "32"},
            {"\<\"conical\"\>", "4"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"2 cap-surface\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"scaly\"\>", "3244"},
            {"\<\"smooth\"\>", "2556"},
            {"\<\"fibrous\"\>", "2320"},
            {"\<\"grooves\"\>", "4"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"3 cap-color\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"brown\"\>", "2284"},
            {"\<\"gray\"\>", "1840"},
            {"\<\"red\"\>", "1500"},
            {"\<\"yellow\"\>", "1072"},
            {"\<\"white\"\>", "1040"},
            {"\<\"buff\"\>", "168"},
            {"\<\"(Other)\"\>", "220"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"4 bruises?\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"False", "4748"},
            {"True", "3376"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"5 odor\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"none\"\>", "3528"},
            {"\<\"foul\"\>", "2160"},
            {"\<\"fishy\"\>", "576"},
            {"\<\"spicy\"\>", "576"},
            {"\<\"almond\"\>", "400"},
            {"\<\"anise\"\>", "400"},
            {"\<\"(Other)\"\>", "484"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"6 gill-attachment\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"free\"\>", "7914"},
            {"\<\"attached\"\>", "210"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"7 gill-spacing\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"close\"\>", "6812"},
            {"\<\"crowded\"\>", "1312"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"8 gill-size\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"broad\"\>", "5612"},
            {"\<\"narrow\"\>", "2512"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"9 gill-color\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"buff\"\>", "1728"},
            {"\<\"pink\"\>", "1492"},
            {"\<\"white\"\>", "1202"},
            {"\<\"brown\"\>", "1048"},
            {"\<\"gray\"\>", "752"},
            {"\<\"chocolate\"\>", "732"},
            {"\<\"(Other)\"\>", "1170"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"10 stalk-shape\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"tapering\"\>", "4608"},
            {"\<\"enlarging\"\>", "3516"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"11 stalk-root\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"bulbous\"\>", "3776"},
            {"0", "2480"},
            {"\<\"equal\"\>", "1120"},
            {"\<\"club\"\>", "556"},
            {"\<\"rooted\"\>", "192"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"12 stalk-surface-above-ring\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"smooth\"\>", "5176"},
            {"\<\"silky\"\>", "2372"},
            {"\<\"fibrous\"\>", "552"},
            {"\<\"scaly\"\>", "24"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"13 stalk-surface-below-ring\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"smooth\"\>", "4936"},
            {"\<\"silky\"\>", "2304"},
            {"\<\"fibrous\"\>", "600"},
            {"\<\"scaly\"\>", "284"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"14 stalk-color-above-ring\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"white\"\>", "4464"},
            {"\<\"pink\"\>", "1872"},
            {"\<\"gray\"\>", "576"},
            {"\<\"brown\"\>", "448"},
            {"\<\"buff\"\>", "432"},
            {"\<\"orange\"\>", "192"},
            {"\<\"(Other)\"\>", "140"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"15 stalk-color-below-ring\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"white\"\>", "4384"},
            {"\<\"pink\"\>", "1872"},
            {"\<\"gray\"\>", "576"},
            {"\<\"brown\"\>", "512"},
            {"\<\"buff\"\>", "432"},
            {"\<\"orange\"\>", "192"},
            {"\<\"(Other)\"\>", "156"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"16 veil-type\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"partial\"\>", "8124"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"17 veil-color\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"white\"\>", "7924"},
            {"\<\"brown\"\>", "96"},
            {"\<\"orange\"\>", "96"},
            {"\<\"yellow\"\>", "8"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"18 ring-number\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"one\"\>", "7488"},
            {"\<\"two\"\>", "600"},
            {"\<\"none\"\>", "36"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"19 ring-type\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"pendant\"\>", "3968"},
            {"\<\"evanescent\"\>", "2776"},
            {"\<\"large\"\>", "1296"},
            {"\<\"flaring\"\>", "48"},
            {"\<\"none\"\>", "36"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"20 spore-print-color\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"white\"\>", "2388"},
            {"\<\"brown\"\>", "1968"},
            {"\<\"black\"\>", "1872"},
            {"\<\"chocolate\"\>", "1632"},
            {"\<\"green\"\>", "72"},
            {"\<\"buff\"\>", "48"},
            {"\<\"(Other)\"\>", "144"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]},
    {
     TagBox[GridBox[{
        {
         StyleBox["\<\"21 population\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"several\"\>", "4040"},
            {"\<\"solitary\"\>", "1712"},
            {"\<\"scattered\"\>", "1248"},
            {"\<\"numerous\"\>", "400"},
            {"\<\"abundant\"\>", "384"},
            {"\<\"clustered\"\>", "340"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"22 habitat\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"woods\"\>", "3148"},
            {"\<\"grasses\"\>", "2148"},
            {"\<\"paths\"\>", "1144"},
            {"\<\"leaves\"\>", "832"},
            {"\<\"urban\"\>", "368"},
            {"\<\"meadows\"\>", "292"},
            {"\<\"waste\"\>", "192"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox["\<\"23 edibility of mushroom\"\>",
          StripOnInput->False,
          LineColor->RGBColor[0, 0, 1],
          FrontFaceColor->RGBColor[0, 0, 1],
          BackFaceColor->RGBColor[0, 0, 1],
          GraphicsColor->RGBColor[0, 0, 1],
          FontFamily->"Times",
          FontColor->RGBColor[0, 0, 1]]},
        {
         TagBox[GridBox[{
            {"\<\"edible\"\>", "4208"},
            {"\<\"poisonous\"\>", "3916"}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], "\<\"\"\>"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.9323304935194798`*^9},
 CellLabel->"Out[28]=",
 CellID->1262997974,ExpressionUUID->"5a50c2c8-6003-44a1-a84e-9799474822cb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4. Make the classifier. ", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384649762841*^9}, 3.6614807941434307`*^9},
 CellID->1755118126,ExpressionUUID->"0174c4a3-ade7-4b99-9d02-d2ebe9130432"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"clFunc", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingSet", ",", " ", 
    RowBox[{"Method", " ", "->", " ", "\"\<RandomForest\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384656281806*^9}, 3.660384693791168*^9},
 CellLabel->"In[29]:=",
 CellID->434968490,ExpressionUUID->"35526990-0832-44dc-8ebf-68562448ed5e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Boolean\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Boolean", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"edible\"", "\"poisonous\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "22", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Boolean\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\"", ",", "\"Nominal\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Boolean", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"edible\"", "\"poisonous\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["5686", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 5686, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Nominal"|>, 
           "f3" -> <|"Type" -> "Nominal"|>, "f4" -> <|"Type" -> "Boolean"|>, 
           "f5" -> <|"Type" -> "Nominal"|>, "f6" -> <|"Type" -> "Nominal"|>, 
           "f7" -> <|"Type" -> "Nominal"|>, "f8" -> <|"Type" -> "Nominal"|>, 
           "f9" -> <|"Type" -> "Nominal"|>, "f10" -> <|"Type" -> "Nominal"|>, 
           "f11" -> <|"Type" -> "Nominal"|>, "f12" -> <|"Type" -> "Nominal"|>,
            "f13" -> <|"Type" -> "Nominal"|>, 
           "f14" -> <|"Type" -> "Nominal"|>, "f15" -> <|"Type" -> "Nominal"|>,
            "f16" -> <|"Type" -> "Nominal"|>, 
           "f17" -> <|"Type" -> "Nominal"|>, "f18" -> <|"Type" -> "Nominal"|>,
            "f19" -> <|"Type" -> "Nominal"|>, 
           "f20" -> <|"Type" -> "Nominal"|>, "f21" -> <|"Type" -> "Nominal"|>,
            "f22" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 22|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Boolean", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal", "Nominal"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))" -> <|
            "Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDwYoCBD/aT1XxnmWReGqVHaYpoAN6V9GI=
              "], "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 5686, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Boolean"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>, 
                    "f7" -> <|"Type" -> "Nominal"|>, 
                    "f8" -> <|"Type" -> "Nominal"|>, 
                    "f9" -> <|"Type" -> "Nominal"|>, 
                    "f10" -> <|"Type" -> "Nominal"|>, 
                    "f11" -> <|"Type" -> "Nominal"|>, 
                    "f12" -> <|"Type" -> "Nominal"|>, 
                    "f13" -> <|"Type" -> "Nominal"|>, 
                    "f14" -> <|"Type" -> "Nominal"|>, 
                    "f15" -> <|"Type" -> "Nominal"|>, 
                    "f16" -> <|"Type" -> "Nominal"|>, 
                    "f17" -> <|"Type" -> "Nominal"|>, 
                    "f18" -> <|"Type" -> "Nominal"|>, 
                    "f19" -> <|"Type" -> "Nominal"|>, 
                    "f20" -> <|"Type" -> "Nominal"|>, 
                    "f21" -> <|"Type" -> "Nominal"|>, 
                    "f22" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)\
" -> <|"Type" -> "NominalVector", "Weight" -> 21|>, 
                    "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)\
" -> <|"Type" -> "NominalVector", "Weight" -> 21|>|>, "Version" -> {14.1, 0}, 
                    "ID" -> 7641371357748955366|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5886423579074192616|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "ConformBooleanVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 2323989105373657650, 
                    "Output" -> <|
                    "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "BooleanVectorToNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4793599719066644735, 
                    "Output" -> <|
                    "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f4" -> <|"Type" -> "NominalVector", "Weight" -> 1|>, 
                    "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)\
" -> <|"Type" -> "NominalVector", "Weight" -> 21|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 22]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NominalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    2598797019657062922|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Weight" -> {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 
                    1., 1., 1., 1., 1., 1., 1., 1., 1.}, "Type" -> 
                    "NominalVector"|>|>, 
                    "Index" -> {<|0 -> 1, 1 -> 2|>, <|
                    "bell" -> 1, "conical" -> 2, "convex" -> 3, "flat" -> 4, 
                    "knobbed" -> 5, "sunken" -> 6|>, <|
                    "fibrous" -> 1, "grooves" -> 2, "scaly" -> 3, "smooth" -> 
                    4|>, <|"brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 
                    4, "green" -> 5, "pink" -> 6, "purple" -> 7, "red" -> 8, 
                    "white" -> 9, "yellow" -> 10|>, <|
                    "almond" -> 1, "anise" -> 2, "creosote" -> 3, "fishy" -> 
                    4, "foul" -> 5, "musty" -> 6, "none" -> 7, "pungent" -> 8,
                     "spicy" -> 9|>, <|"attached" -> 1, "free" -> 2|>, <|
                    "close" -> 1, "crowded" -> 2|>, <|
                    "broad" -> 1, "narrow" -> 2|>, <|
                    "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4,
                     "gray" -> 5, "green" -> 6, "orange" -> 7, "pink" -> 8, 
                    "purple" -> 9, "red" -> 10, "white" -> 11, "yellow" -> 
                    12|>, <|"enlarging" -> 1, "tapering" -> 2|>, <|
                    "bulbous" -> 1, "club" -> 2, "equal" -> 3, "rooted" -> 
                    4|>, <|"fibrous" -> 1, "scaly" -> 2, "silky" -> 3, 
                    "smooth" -> 4|>, <|
                    "fibrous" -> 1, "scaly" -> 2, "silky" -> 3, "smooth" -> 
                    4|>, <|"brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 
                    4, "orange" -> 5, "pink" -> 6, "red" -> 7, "white" -> 8, 
                    "yellow" -> 9|>, <|
                    "brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 4, 
                    "orange" -> 5, "pink" -> 6, "red" -> 7, "white" -> 8, 
                    "yellow" -> 9|>, <|"partial" -> 1|>, <|
                    "brown" -> 1, "orange" -> 2, "white" -> 3, "yellow" -> 
                    4|>, <|"none" -> 1, "one" -> 2, "two" -> 3|>, <|
                    "evanescent" -> 1, "flaring" -> 2, "large" -> 3, "none" -> 
                    4, "pendant" -> 5|>, <|
                    "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4,
                     "green" -> 5, "orange" -> 6, "purple" -> 7, "white" -> 8,
                     "yellow" -> 9|>, <|
                    "abundant" -> 1, "clustered" -> 2, "numerous" -> 3, 
                    "scattered" -> 4, "several" -> 5, "solitary" -> 6|>, <|
                    "grasses" -> 1, "leaves" -> 2, "meadows" -> 3, "paths" -> 
                    4, "urban" -> 5, "waste" -> 6, "woods" -> 7|>}, 
                    "MissingCode" -> Indeterminate, "Version" -> {14.1, 0}, 
                    "ID" -> 8280810502640342206, 
                    "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NominalVector", "Weight" -> 22.|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NominalVector", "Weight" -> 22., 
                    "SetSize" -> {2, 6, 4, 10, 9, 2, 2, 2, 12, 2, 4, 4, 4, 9, 
                    9, 1, 4, 3, 5, 9, 6, 7}|>|>, 
                    "Boundaries" -> {{-0.5, 0., 
                    0.5}, {-0.5, -0.33333333333333337`, -0.16666666666666669`,
                     0., 0.16666666666666663`, 0.33333333333333337`, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.4, -0.3, -0.2, -0.09999999999999998, 0., 
                    0.09999999999999998, 0.19999999999999996`, 
                    0.30000000000000004`, 0.4, 
                    0.5}, {-0.5, -0.3888888888888889, -0.2777777777777778, \
-0.16666666666666669`, -0.05555555555555558, 0.05555555555555558, 
                    0.16666666666666663`, 0.2777777777777778, 
                    0.38888888888888884`, 0.5}, {-0.5, 0., 0.5}, {-0.5, 0., 
                    0.5}, {-0.5, 0., 
                    0.5}, {-0.5, -0.4166666666666667, -0.33333333333333337`, \
-0.25, -0.16666666666666669`, -0.08333333333333331, 0., 0.08333333333333337, 
                    0.16666666666666663`, 0.25, 0.33333333333333337`, 
                    0.41666666666666663`, 0.5}, {-0.5, 0., 0.5}, {-0.5, -0.25,
                     0., 0.25, 0.5}, {-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.3888888888888889, -0.2777777777777778, \
-0.16666666666666669`, -0.05555555555555558, 0.05555555555555558, 
                    0.16666666666666663`, 0.2777777777777778, 
                    0.38888888888888884`, 
                    0.5}, {-0.5, -0.3888888888888889, -0.2777777777777778, \
-0.16666666666666669`, -0.05555555555555558, 0.05555555555555558, 
                    0.16666666666666663`, 0.2777777777777778, 
                    0.38888888888888884`, 0.5}, {-0.5, 0.5}, {-0.5, -0.25, 0.,
                     0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 
                    0.5}, {-0.5, -0.3, -0.09999999999999998, 
                    0.09999999999999998, 0.30000000000000004`, 
                    0.5}, {-0.5, -0.3888888888888889, -0.2777777777777778, \
-0.16666666666666669`, -0.05555555555555558, 0.05555555555555558, 
                    0.16666666666666663`, 0.2777777777777778, 
                    0.38888888888888884`, 
                    0.5}, {-0.5, -0.33333333333333337`, -0.16666666666666669`,
                     0., 0.16666666666666663`, 0.33333333333333337`, 
                    0.5}, {-0.5, -0.35714285714285715`, -0.2142857142857143, \
-0.07142857142857145, 0.0714285714285714, 0.2142857142857143, 
                    0.3571428571428571, 0.5}}, "Version" -> {14.1, 0}, "ID" -> 
                    5822588179338197972, 
                    "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|"RotationMatrix" -> CompressedData["
1:eJwtlukjFIgbgG2paB1pFyFhCYmEEKveJSnJlaNWuVtR7qvTTch95GycSSSM
Ycj1jmvcDMaRq3HmrEipVvz2w+/D8wc8n55HxMblyj+7mJiYeP7P5+Uqb83I
ISjJ39uSoFCK7EvfNOaS6ajHNHPUSouCWjbW8zrR8TDck5l3ws8W8uOn3q1z
pOLFRmqwmncbbLFeNr+dUIeXaurHOFa7UGMj29+4ZATVpWYjidUUSP1hR72p
Twf52OTI3nskqBVbPO4mOIg8OzvNr34fR/li3uwKtV7oMpfa0nL1x9htY7GP
lpW4JegRslsgGewqbr0IEi/BIF2R9HYWIvLUUFeG9UpR98WGHOdhChTJTa05
hztAl3DuSzvlfDjH1lhv1ZsOotCrwDQZhIl16VZ39LIxIq9yTHc4DgzzDgzp
8CVDb1XwE7pSMaa7Z+9avVCEwufv1qgTKHgytph8R5MMb/+YZmfOyseg+2mZ
kz41WMUmIXFVOxf10/+YHrKtxA7xzWV9uSV02hdwhVowAes1xBhueSqY/Bxs
J/WRQPkvicKAWVfs8OeQ5R3qwLzEDc1T+sUYjxbsfWx9eGBUhxDmM4a/t4kZ
SCuOolNEDs+8fDbG/h36Q2qjBCZnjlG12KZBTefFHu/uNki5M9+1Ot8Nvwzk
eI5o9AB33RPhrrMNaBXvfsLqcjh2H3BviTO1wsZaTsvqkhacaGEdiRYqg2W0
WM/2IqD8jiorXe0Z1jVfXTl+uAC9hmmGVwYTQHt9r6C6KwE4dshcw/ZZkLB8
022Qnwguf4vGZCnSMTrWS6FNdwSKXaVas7ensfXLVdeKBwzICdLwPOQdCDGG
d2w+jfSiPeW8a/LNWhDR1gkS3KhD/pq8RcaRAvCvCayzl42Ha5fCdQpNqZhJ
PmPKEMyE5XVJncnTFSjGfOkvvV9egvYrRY567gS84CmordITgpTnhusJ3gTc
WdhoH9yIA6f9pJDQy2n4Tc+7TtEgEtOY9WUqIAkzO3iMyx1zUFd03HT/0RZ4
bmqwOsxSjemadxXca2nQ4v6wkzc6AiTZSiR+/AgDVQeNwXnPLiQzq9wd/vEC
PjezayY2DSAhNTBic7ADDIXnFaaZ8uBnIGn+NOcMchdO2kgPjcOzHFOK9lQ/
JssJb1UUvUC65tIvBAciWF4NjSK1uuDFeutpxoFmyLSoeqssmI+pozt7qt5l
w6XZK8lHORtx3f/fE6OUZ3ArYvDK7bIHKJ8xYZTV9gDuXjpzZickENdXGlR9
8wl4+dQXBtO/CGn6Jxs1rgXhsXpnk8ScHNzmCJjTdCBgwg+FlZKaYihY53Bh
bNVhqU5xnpNpHg5ZNiTs020HAcUrUk7feiDQJsfB4GUjTAd96bqdx0DHT7xC
Tj6zIDPS4DfxsB4D3VOsP51rha3i6QKrhD4I7KH1OLNU4j+2wwutQoin2Tfe
hiIFf08r8GquqEWtp7uKPd51otfBr0L+6iS0Hb7bWRjeDVTiUaWoT62gvlUe
MeUfAbTrW6NsizRk+KYfz+Wnoq5bisfm+QqICm3X6WwdgPttz443cL+DwbyS
6MchvXA01cDPOeQ1jl18msV0goyE91ziP/TGcVHw1YOjej3o8/Ne6KZgCzif
9k6bed6I5YEO6t2rLThEDggY7TCB+zu5P7NsynGcZrssci4Nf7MevGlL6MUv
ovdjkx/3wLBuQyUrGwX5vxvPC1kPYE+WOa8QewGUSki1mr+Ng47kDa/Ik2TI
aaTXCfwzhufMSPs9ExtAxkLON89lAG+Oqlmn3RgAZsGtTtlMOvLN666V8FSB
gp+7F51Ag/YVJ6W4qGrM3J0peXizC/fwLo3+eNEJsk21Z5GzHT45k2v9/20G
OdGY/fTofGD5LDLhK9YEvk2TyrssY9FB/drFRl4aKEYVewXER2H+YOiaVm40
ZDmpjE8UlsFU848FtbP96NCZlPZ3uDVYOdWNCrx9jzuLahEk/iR44qjFIs1f
B7Xenm+1QmhoWs79gjM5G/6KW5Q486ENR9Vlpmpv9KJLvc4a+8x/Hrv2mwsq
pIN695gLuaoalCX5X7z2cIPAPfOJOU+eY9tkeMqjH0QUedjM1RrkiEfNPR28
Xscjl6gJ536/UNQ/oOO4/WcVzvEaMUz8aZDxlankktAw/rpel/PGrQHsVc34
HuiNgzy/rDWbTxy+L2qq72cioW6SI38l+xiYP2c0BjAG8JnKCeaT7d14tdr/
ujJLJ3x3F7KX+EyCScvdchaRdLw8Ob7hy+IM1VzOwikuZADtPN/2+EcQnrzg
LFEeCVePyfMFNxEhj8vMOSGxCaSCVX65UNWOS9V1XUpV9ZBg67uSMeEL5zoW
eSuWKfi501nC/NdeZLYYzrV1acF+akM3/xIJ5FP3HORvIEJMhCLtjO5TcD5i
ZKZvTIalLqJG4pEafLK0Za/4qhP+2ic4ci/LAP5sU127lNOBxwhvHu2+0Y+0
36xK+A6koGh4at5S32sICbBfPDfzFD9eF1jJ0vTAu0lrox2huTjG8+rs4vk2
LGh6w3c2/g0SJHaSRlMXceuc8z2vhWx0rWHeFjkbCtHOBJ0voo1w2ehCZFhR
OchKz3jfl25C30PCqe+tWrHm9b12nc+lOMmmWWgYqA3XdzQ+mpqUgoHEpFyG
eB8ObhvqX+xuQokui3EVnQq4lmH9+/frNFTrdp193NKBh27yqewhzWCGUuiX
9aURrLUtvkioHMGSzhN3J13K4PLmrz3lr+6guKSAdZV+EXi78K8aYjKcnUv0
HFEmw1ebbxoRTx7gUcGhFJWYHLhVYHMh9EYDjCq30R0MKLBuO0M/86EBI7TN
vhI5WvG9/qjqnZM5SHl/6qSKexiuXFM6qCBcBoYTMWZeT9qxOiI40y6KgZWC
HZ7H9MdB9bjAWlNeNvgd3uArqc2CcDvCOud6JL7qjIp4HjsN15IP/SOe/xxE
f2p253qUQ7x/tzdvRgVmvl77xzeMip9mmZriLapxratWViOZhN7huw4ulOaj
lnKkpduaH5AM7JW5q8gYOOQ1EZzUhPatzrLXjcZR/Y96hoRXHVYLS7V2nKmG
lW9nxg0eO6EN96lw+fwm1B8WmvwZ2YF7Ek+pdZmUQ3HQmvztqArkL0ysTzBN
QE/TslwXz0pQPmHsMtNXBQFmjAG7w+UYXfv+Q/Z3BKnVI6xgRMGsu+L7a6UW
sGW0PuASbxEIqkjZyTSR0PPBAOvJPiqoitpaeyzkoLtxv51/YyKWhsXZKHCX
44kDgy0jKc24YDR1x+H7OE5out7AZAoKJVvSdfpr4ZFA0kMvcx/gfdMxxFFC
wq3LM44bu1pxwN3bnK2QCJLGfXZ/FSVhPG91tvBuIrZaljWz+pTDaWcqU1hI
KdzfENlu7mtAUbnxQffKIdCsjq3t0x0DezFIuO30Dn4mNUzIKLZhm16Y6UZh
E3IefxCmJNEOGgOjYoKPySh32kYrk/UZ3p+KkxHR9wBa64HN0qfOyGxS+/3t
lD86M59m5TkTgY6WhZ0+CwSc5bZUfLnyEeSEHZPo2U8g2ufNS0O5DJgQoGq3
sz/DS8zaT/iPhaJi0I3bt5cSQVPr4AU5Yjyw+E5kBGe4Id+J0afjnTYoSNlP
dvp+C/WCzzCo8nFwp3C/Rnl6HPrldpS0Jodg+t3gz9MbgWB/QyBRxdkNmj0C
UiXv+UMM2z36g2ZPCDcZMThoxIsJUiKDXL5BcM3YiklU9ybOJrFmFQSEoTJj
+0iTOAkkdX8Ypoc54uGPkhsSCRmYNf4u2W0pBH22jzRWmmXC+tj84lp4MWZU
72OQSnIw+OwV7yOZRfBG7dHPdBcSqKi9MOr5+RKWmfdYnrrxBhPm7L01Voig
v7Sshp0OeNdN/DqmhSCX0eCh5dli9JeSsahPSAE1hbEg16ZCuPZ0hOCl8RF0
F3W7FLu9UeWlfwHdLBMP2G2bjn4NwXfhvAf0DiZhevB8uHtKFabMlJzfG++P
cxYyQja7qbifZvziUkQFjg0mGNze/d+fnWsX+KlSBYeTrqdYypDQainm6wdh
BHr9ZffP7C3wSkO0s9q0EXUIe+Htej5SIIidpb0STvGKpbnF+4Ng+7JV03Ai
bBzLYIxhGZrO8dfpZNQi/dFytonoKjBmF6gEViKej5ou06BMg6hsaWf2FhUj
jkZyqkTV4GGe+JHoJDLKHM8uFr3cidGv913ZnE5DVpWXDkpCFPhyPItKHEUs
qjn/gcxThZfcDvvEmpJxIdLP8W+BSVg3kLKU2SyC+iLOz7rp1ZC7l3jZIouG
dv/aKau1N8Gf16cOzu5NgtS5Y1fn/gzHh+8OhWqz+EM/6fVTNfdBGOOeOCsm
QsOoYWlGp+tz7PfbitbWLoftOm6n28wjyMdBuLC60Ac9YhUyc9p1oGgtfW/3
Jg3FKVfzazb7sTgkzLX7SyD6JL08Sf6vZ64rtN9mjlEwQPaT5FQODV/L8gzE
rZHRXZXrtfyv5SjNuiZ8U3wE4meNRNRFK2EoMuVUS0QfFrfeVA91IoJ6g+Rv
Eqs1yFJ+0/Fadz6QaIoo8zobN1/VeMKnUggOq84gytIRlZQaqw1p+AdRTOxo
Ziac5vdZuWVKgUyq2kmlMhrs6ay1MxFohKtfUkpaFckY5uYZ/Ww5Cdxto+/f
k4zGEx/2KX5+2Qb5UiKxSxyeYF9BJK5Kl+HDFYvGx/+O4B/w0IybgwZHikrH
Qktz8XeWBjGCSRnc2iEbMVQpuIIG3yrGGvD4T556pzQqFFO/tP7G1oj56jFp
RekDmFTD9auH4Bx+451S1d3JxqxDLY4+/L4oTfh7MY2rHJ0K+O/fo9Ghs47o
+MVhBgoD5wOik18hzczTMsW7AWXNQ2DMuRvKQyzNx0vSgC2fJn6tg4Ljm8X0
tWxPZDR4lNKlGRDVsx27qjAMgiMumWKnirC+lnyjsp8M+3S4khZSi+FG6ZBV
2udyVGzsjhh/XgnPPNel6QJpuBhN7X4+HoU0Gc399lMx8JF2RUFxPhaNZ5Ui
o1sRe8NXpcRH/dBwhMJXZRqH/wPz1AGN
                   "], 
                  "Precisions" -> {2.8868711298641063`, 5.718093419748127, 
                   6.187443786808511, 8.360294281463254, 10.514084757968355`, 
                   11.94734938950373, 14.127415889494447`, 
                   14.324986706923568`, 17.941077464212437`, 
                   21.872292925806008`, 18.910685561738227`, 
                   18.774072009183435`, 30.98849237648586, 32.47048582025858, 
                   36.465787295051285`, 40.139958842991966`, 
                   46.398572211738895`, 33.77202649874833, 49.72504028348901, 
                   5.4300755347612935`, 83.713868095003, 139.79404833901654`},
                   "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, 
                    "Mean" -> {-0.041251349701828754`, -0.001120946013714122, 
                    0.06270431404493748, -0.01703869306316938, 
                    0.08669726294982301, 
                    0.24110788880431974`, -0.17027893414156373`, \
-0.09313821588780241, -0.06258355615050819, 
                    0.03969693641673045, -0.22662158349546085`, 
                    0.24840066492412508`, 0.22592396854180738`, 
                    0.1624383446496744, 
                    0.158117174007863, -0.0015979801082262567`, 
                    0.11530179218977345`, 0.024489606617054217`, 
                    0.055178384970223315`, -0.10408232880577366`, 
                    0.19045677469142241`, 0.03269200108671133}, 
                    "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5169189123979659021|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 22.|>, "Key" -> 
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))", "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                    "Missing" -> "Allowed"|>], "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 22, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, 
                    "Mean" -> {-0.04125134970182875, -0.0011209460137141234`, 
                    0.06270431404493747, -0.01703869306316938, 
                    0.08669726294982298, 
                    0.24110788880431983`, -0.17027893414156373`, \
-0.0931382158878024, -0.06258355615050819, 
                    0.03969693641673046, -0.22662158349546083`, 
                    0.2484006649241251, 0.2259239685418074, 
                    0.16243834464967438`, 
                    0.158117174007863, -0.0015979801082262556`, 
                    0.1153017921897734, 0.024489606617054217`, 
                    0.055178384970223295`, -0.10408232880577366`, 
                    0.19045677469142241`, 0.03269200108671134}, 
                    "StandardDeviation" -> {0.28323490085665115`, 
                    0.15543694440294492`, 0.30465753072898405`, 
                    0.34543667288092156`, 0.2220286260492167, 
                    0.16432922739236164`, 0.2358212592984482, 
                    0.27310758012674696`, 0.2802390530052244, 
                    0.2868268502428752, 0.23975153176671804`, 
                    0.21696397591093608`, 0.23083952414790856`, 
                    0.24099893697116143`, 0.24361889409284954`, 
                    0.2889471954730776, 0.09299145073621448, 
                    0.13125962703115213`, 0.3673703787234061, 
                    0.3153026737928577, 0.2154372673347259, 
                    0.36393857798616036`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 22, 
                    "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    9145711967572554709|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, 
                   "Mean" -> {-0.04125134970182875, -0.0011209460137141234`, 
                    0.06270431404493747, -0.01703869306316938, 
                    0.08669726294982298, 
                    0.24110788880431983`, -0.17027893414156373`, \
-0.0931382158878024, -0.06258355615050819, 
                    0.03969693641673046, -0.22662158349546083`, 
                    0.2484006649241251, 0.2259239685418074, 
                    0.16243834464967438`, 
                    0.158117174007863, -0.0015979801082262556`, 
                    0.1153017921897734, 0.024489606617054217`, 
                    0.055178384970223295`, -0.10408232880577366`, 
                    0.19045677469142241`, 0.03269200108671134}, 
                   "StandardDeviation" -> {0.28323490085665115`, 
                    0.15543694440294492`, 0.30465753072898405`, 
                    0.34543667288092156`, 0.2220286260492167, 
                    0.16432922739236164`, 0.2358212592984482, 
                    0.27310758012674696`, 0.2802390530052244, 
                    0.2868268502428752, 0.23975153176671804`, 
                    0.21696397591093608`, 0.23083952414790856`, 
                    0.24099893697116143`, 0.24361889409284954`, 
                    0.2889471954730776, 0.09299145073621448, 
                    0.13125962703115213`, 0.3673703787234061, 
                    0.3153026737928577, 0.2154372673347259, 
                    0.36393857798616036`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 22, 
                   "Output" -> <|
                    "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f\
22))" -> <|"Type" -> "NumericalVector", "Weight" -> 22.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   9145711967572554709|>], "InputDimension" -> 0, 
                "OutputDimension" -> 22, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"flat"}, 
                    "ID" -> 1186297104191013869|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"smooth"}, "ID" -> 2341426421287444904|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"red"}, 
                    "ID" -> 2507647858535256604|>, 
                    "f4" -> <|
                    "Type" -> "Boolean", "Weight" -> 1, "Values" -> {False}, 
                    "ID" -> 3683697656913948716|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"spicy"},
                     "ID" -> 2264619848947218971|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"free"}, 
                    "ID" -> 2090895265899768236|>, 
                    "f7" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"close"},
                     "ID" -> 8160926438035287096|>, 
                    "f8" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"narrow"}, "ID" -> 6576993051573924560|>, 
                    "f9" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"buff"}, 
                    "ID" -> 1570148413639991448|>, 
                    "f10" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"tapering"}, "ID" -> 8242310411196131133|>, 
                    "f11" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Missing[]}, "ID" -> 1423098035998138157|>, 
                    "f12" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"smooth"}, "ID" -> 4669796280180944686|>, 
                    "f13" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"silky"},
                     "ID" -> 8919420587560280531|>, 
                    "f14" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"},
                     "ID" -> 5151476026886492724|>, 
                    "f15" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"},
                     "ID" -> 7304701007266918305|>, 
                    "f16" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"partial"}, "ID" -> 7090772137895123383|>, 
                    "f17" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"},
                     "ID" -> 178910520701235360|>, 
                    "f18" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"one"}, 
                    "ID" -> 4347744732271221970|>, 
                    "f19" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"evanescent"}, "ID" -> 8139962554015378325|>,
                     "f20" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"},
                     "ID" -> 5964744626213504794|>, 
                    "f21" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"several"}, "ID" -> 848663779274584010|>, 
                    "f22" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"woods"},
                     "ID" -> 3749801285905459806|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 1.002965, "MaxTrainingMemory" -> 86654704,
                   "DataMemory" -> 4994552, "FunctionMemory" -> 167512, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 8, 10, 22, 1, 34.630618`8.292035221698447}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.9372104543754762`, -1.545142791274731, \
-1.4963916132457498`, -1.437571035492168, -1.405605142752042, \
-1.3841775927735178`, -1.3482849514892545`, -1.318578814165725, \
-1.2795034623587733`, -1.2410230835257077`, -1.1799845310072008`}, 
                   "LeftBoundary" -> -1.545142791274731, "LeftScale" -> 
                   0.13690411149430268`, "LeftTailNorm" -> 
                   0.10465116279069767`|>], "Entropy" -> 
                Around[30.716920134913334`, 0.329601500989676], 
                "EntropySampleSize" -> 86|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 8183140211650213423|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> <|
                "Type" -> "NominalVector", "Weight" -> 21|>, 
               "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f7" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f8" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f9" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f10" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f11" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f12" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f13" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f14" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f15" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f16" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f17" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f18" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f19" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f20" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f21" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f22" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> \
<|"Type" -> "NominalVector", "Weight" -> 21|>|>, "Version" -> {14.1, 0}, "ID" -> 
                 1099424849064646981|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f4" -> <|"Type" -> "Boolean", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 2746747626053732273|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "ConformBooleanVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 5581078670210762233, 
             "Output" -> <|
              "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "BooleanVectorToNumericalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f4" -> <|"Type" -> "BooleanVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 945831405170364639, 
             "Output" -> <|
              "f4" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f4" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {0.4159338726697151}, 
             "StandardDeviation" -> {0.4928822234932888}, 
             "Output" -> <|
              "f4" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 8287774188097222608|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> <|
                "Type" -> "NominalVector", "Weight" -> 21|>|>, 
             "Index" -> {<|
               "bell" -> 1, "conical" -> 2, "convex" -> 3, "flat" -> 4, 
                "knobbed" -> 5, "sunken" -> 6|>, <|
               "fibrous" -> 1, "grooves" -> 2, "scaly" -> 3, "smooth" -> 
                4|>, <|"brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 
                4, "green" -> 5, "pink" -> 6, "purple" -> 7, "red" -> 8, 
                "white" -> 9, "yellow" -> 10|>, <|
               "almond" -> 1, "anise" -> 2, "creosote" -> 3, "fishy" -> 4, 
                "foul" -> 5, "musty" -> 6, "none" -> 7, "pungent" -> 8, 
                "spicy" -> 9|>, <|"attached" -> 1, "free" -> 2|>, <|
               "close" -> 1, "crowded" -> 2|>, <|
               "broad" -> 1, "narrow" -> 2|>, <|
               "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4, 
                "gray" -> 5, "green" -> 6, "orange" -> 7, "pink" -> 8, 
                "purple" -> 9, "red" -> 10, "white" -> 11, "yellow" -> 12|>, <|
               "enlarging" -> 1, "tapering" -> 2|>, <|
               "bulbous" -> 1, "club" -> 2, "equal" -> 3, "rooted" -> 4|>, <|
               "fibrous" -> 1, "scaly" -> 2, "silky" -> 3, "smooth" -> 4|>, <|
               "fibrous" -> 1, "scaly" -> 2, "silky" -> 3, "smooth" -> 4|>, <|
               "brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 4, 
                "orange" -> 5, "pink" -> 6, "red" -> 7, "white" -> 8, 
                "yellow" -> 9|>, <|
               "brown" -> 1, "buff" -> 2, "cinnamon" -> 3, "gray" -> 4, 
                "orange" -> 5, "pink" -> 6, "red" -> 7, "white" -> 8, 
                "yellow" -> 9|>, <|"partial" -> 1|>, <|
               "brown" -> 1, "orange" -> 2, "white" -> 3, "yellow" -> 4|>, <|
               "none" -> 1, "one" -> 2, "two" -> 3|>, <|
               "evanescent" -> 1, "flaring" -> 2, "large" -> 3, "none" -> 4, 
                "pendant" -> 5|>, <|
               "black" -> 1, "brown" -> 2, "buff" -> 3, "chocolate" -> 4, 
                "green" -> 5, "orange" -> 6, "purple" -> 7, "white" -> 8, 
                "yellow" -> 9|>, <|
               "abundant" -> 1, "clustered" -> 2, "numerous" -> 3, 
                "scattered" -> 4, "several" -> 5, "solitary" -> 6|>, <|
               "grasses" -> 1, "leaves" -> 2, "meadows" -> 3, "paths" -> 4, 
                "urban" -> 5, "waste" -> 6, "woods" -> 7|>}, 
             "Output" -> <|
              "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> <|
                "Weight" -> 21, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0., 
                0.}, {-0.6064862012863159, -0.4438067674636841, 
                0.12668082118034363`, -0.6824871897697449}, \
{-0.15840685367584229`, -0.5354054570198059, 
                0.9618805646896362, -0.4905835688114166}, {
                
                0.4383208155632019, -0.5528333783149719, \
-0.13381603360176086`, 0.04673013836145401}, {-0.14714756608009338`, 
                0.8010375499725342, -0.09335513412952423, \
-0.2024918496608734}, {0.002559085376560688, 
                0.4309232532978058, -0.163661390542984, 
                0.23353755474090576`}, {0.7118667960166931, 
                0.2425558716058731, 0.5594414472579956, 0.3456765115261078}}],
                RawArray["Real32",{{0., 0., 
                0.}, {-0.2996653914451599, -0.44757387042045593`, 
                0.5182879567146301}, {-1.015241265296936, \
-0.19503065943717957`, -0.3559548854827881}, {0.05735205113887787, 
                0.5842807292938232, -0.9399146437644958}, \
{-0.3777458369731903, -0.23158060014247894`, 0.7714530825614929}}], 
               RawArray["Real32",{{0., 0., 0., 0., 
                0.}, {-0.30498671531677246`, -0.24570278823375702`, \
-0.2989412844181061, -0.40087026357650757`, -0.40440070629119873`}, {
                0.6434653997421265, 
                0.06632611900568008, -0.6794629096984863, \
-0.05229966342449188, 1.0401057004928589`}, {-0.010377367958426476`, 
                0.4430352747440338, -0.27506235241889954`, 
                0.6967002153396606, -0.3809667229652405}, {
                0.06320320814847946, -0.7661358118057251, \
-0.22282372415065765`, -0.0767827108502388, 0.12228690832853317`}, {
                0.20810550451278687`, 
                1.1236783266067505`, -0.18364417552947998`, \
-0.17123666405677795`, 0.2701430320739746}, {
                0.3918210566043854, -0.4736495614051819, 
                0.3979560434818268, -0.2911241352558136, 
                1.1252516508102417`}, {
                0.2128446102142334, -0.8146057724952698, -0.70164555311203, 
                0.9523289203643799, -0.018208086490631104`}, {
                0.26077157258987427`, 
                0.5000091791152954, -0.5701898336410522, \
-0.10008281469345093`, 0.15259301662445068`}, {-0.06520768254995346, 
                0.20177216827869415`, 
                0.5978161096572876, -0.052836861461400986`, 
                0.020539503544569016`}, {0.24635417759418488`, 
                0.18648546934127808`, -0.3747539222240448, \
-0.32312822341918945`, -1.2571333646774292`}}], 
               RawArray["Real32",{{0., 0., 0., 0., 0.}, {0.7015801668167114, 
                0.44241783022880554`, -0.18018868565559387`, 
                0.3337564170360565, 
                0.25169798731803894`}, {-0.8188291788101196, \
-0.03312741219997406, 0.13948063552379608`, 0.5433275699615479, 
                0.6865473985671997}, {-0.6402625441551208, 
                0.08101888000965118, 
                0.2665206789970398, -0.09708308428525925, \
-0.18156157433986664`}, {-0.8369672298431396, 
                0.6021723747253418, -1.118535041809082, 
                0.7815217971801758, -0.0210591908544302}, {
                0.2262113094329834, -0.6033303737640381, \
-0.11668674647808075`, 0.489885538816452, -0.28577664494514465`}, {
                0.4303559362888336, 
                0.5622432231903076, -0.03160662576556206, -0.592936635017395, 
                0.2453039139509201}, {-0.3157906234264374, \
-0.12458344548940659`, 
                0.3170487880706787, -0.2143448293209076, \
-0.4269120693206787}, {0.029280193150043488`, -0.29237034916877747`, 
                0.2160477638244629, -1.1315839290618896`, \
-0.06363824754953384}, {-0.010016999207437038`, -0.22365744411945343`, \
-0.5306693315505981, -0.7778278589248657, -0.26637181639671326`}}], 
               RawArray["Real32",{{0., 0.}, {-0.9855453968048096, 
                0.07227185368537903}, {
                0.4388585388660431, -1.1124120950698853`}}], 
               RawArray["Real32",{{0., 0.}, {-0.35208550095558167`, 
                1.3067282438278198`}, {
                0.5096332430839539, -0.4421595335006714}}], 
               RawArray["Real32",{{0., 0.}, {-0.15403074026107788`, 
                0.9908140301704407}, {-0.7500633597373962, \
-0.7512688040733337}}], 
               RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                0.5630999803543091, -0.38446706533432007`, \
-0.1414719521999359, 
                0.26574093103408813`, -0.4947859048843384}, \
{-0.5154363512992859, -0.07435054332017899, -0.41727182269096375`, \
-0.47309380769729614`, 0.19054047763347626`}, {0.8626807928085327, 
                0.5831760168075562, 
                0.11616630107164383`, -0.7584620118141174, \
-0.1962047964334488}, {0.20465844869613647`, 
                0.7458404302597046, -0.9225122332572937, -0.01683202013373375,
                 0.3632008135318756}, {-0.32492944598197937`, \
-0.2342735379934311, -1.0157158374786377`, 
                0.4964379072189331, -0.5873805284500122}, \
{-0.3946683704853058, -0.44339844584465027`, 
                0.6199811100959778, -0.3397084176540375, 
                0.2309236228466034}, {
                
                0.16470594704151154`, -0.3025362491607666, \
-0.4252997934818268, -0.3137594759464264, 0.020424090325832367`}, {
                0.277119904756546, 
                0.031881142407655716`, -0.05260622873902321, 
                0.090133436024189, 
                0.13937878608703613`}, {-0.09413309395313263, \
-0.32250651717185974`, 
                0.42425602674484253`, -0.8212777972221375, \
-0.20639027655124664`}, {0.4212997853755951, 0.021215274930000305`, 
                0.7234820127487183, 
                0.000529539305716753, -0.2423352748155594}, \
{-0.0761777013540268, -0.7094953656196594, -0.5439280271530151, 
                0.021897640079259872`, -0.28455018997192383`}, \
{-0.25022903084754944`, -0.22864528000354767`, -0.20725180208683014`, 
                0.7912315130233765, 0.5437684655189514}}], 
               RawArray["Real32",{{0., 0.}, {-0.18715201318264008`, 
                1.6886996030807495`}, {-0.8131253719329834, \
-1.295272946357727}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6600128412246704, -0.7276449799537659, 
                0.2346285581588745}, {0.31893566250801086`, 
                0.06627523899078369, -0.13191500306129456`}, \
{-0.6191583275794983, -0.8362367153167725, -0.08219107985496521}, {
                0.5880979895591736, 
                0.007864641025662422, -0.27883878350257874`}}], 
               RawArray["Real32",{{0., 0., 0.}, {-0.21839267015457153`, 
                0.2838015556335449, 1.448289155960083}, {-0.6929052472114563, 
                0.4454277753829956, -0.14469657838344574`}, {
                0.11986495554447174`, 0.1858568787574768, 
                0.31923407316207886`}, {-0.3614450991153717, 
                0.2689826488494873, 0.06323932111263275}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.39605239033699036`, 
                0.30748629570007324`, -0.03496421501040459}, \
{-0.7506017684936523, -0.25063642859458923`, -0.18374823033809662`}, \
{-1.1513311862945557`, 0.07981017231941223, 
                1.4979573488235474`}, {-0.5344446897506714, \
-1.0592224597930908`, -0.15580841898918152`}}], 
               RawArray["Real32",{{0., 0., 0., 0., 0.}, {-0.2383400797843933, 
                0.4635208249092102, 0.3426169753074646, 
                0.4494379460811615, -0.05763862282037735}, \
{-0.678938090801239, 0.2902781367301941, -0.020685723051428795`, 
                0.6001339554786682, -0.6603705883026123}, \
{-0.32505372166633606`, 0.1717318892478943, 0.19980627298355103`, 
                0.06815101206302643, -0.736247718334198}, {
                0.30009421706199646`, -0.588552713394165, 
                0.23823440074920654`, -0.5108372569084167, \
-0.34505072236061096`}, {0.24641872942447662`, -0.1035708636045456, 
                0.24827559292316437`, -0.7452836036682129, 
                0.22904685139656067`}, {
                0.2208326905965805, -0.4153929054737091, 
                0.08506764471530914, -0.4832180440425873, 
                0.5667385458946228}, {-0.07469504326581955, \
-0.47179171442985535`, -0.41816583275794983`, 
                0.14165835082530975`, -0.7292067408561707}, \
{-0.3794621527194977, -0.37167760729789734`, 0.6430476903915405, 
                0.9774191379547119, 0.12943802773952484`}, {
                0.4754510223865509, 0.6012251377105713, 
                0.2761363983154297, -0.3297533690929413, 
                0.19755688309669495`}}], 
               RawArray["Real32",{{0., 0., 0., 0., 
                0.}, {-0.0024955186527222395`, -0.21976326406002045`, 
                0.26284268498420715`, 
                0.04259439557790756, -0.14685900509357452`}, \
{-0.05927715823054314, 
                0.020254673436284065`, -0.28938254714012146`, \
-0.018016554415225983`, 0.1972988247871399}, {-0.6340415477752686, 
                0.4835647642612457, -0.5800248384475708, 0.1081426590681076, 
                0.5885101556777954}, {-0.18773531913757324`, 
                0.07691418379545212, 0.3799058198928833, 0.6119025945663452, 
                0.9291273951530457}, {-0.44847261905670166`, 
                0.17225731909275055`, -0.16924519836902618`, \
-0.7468438148498535, -0.05527377128601074}, {-0.0677277222275734, \
-0.1534353643655777, -0.5014304518699646, -0.11442995071411133`, \
-0.13291160762310028`}, {-0.25433656573295593`, -0.9362776279449463, 
                0.7448825836181641, -0.47154954075813293`, 
                0.1866835355758667}, {-1.0412973165512085`, \
-0.2485269010066986, -0.08246923983097076, 
                1.1808533668518066`, -0.18489287793636322`}, {
                0.02182699739933014, 
                0.46264657378196716`, -1.0891004800796509`, 
                0.0561530664563179, 0.19391851127147675`}}], 
               RawArray["Real32",{{0.}, {-1.5555027723312378`}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-1.40706467628479, -0.039374686777591705`, \
-0.39324238896369934`}, {-0.6709293723106384, 0.09683733433485031, 
                0.9449042677879333}, {-0.41939300298690796`, \
-0.7142863869667053, -0.07110360264778137}, {0.13606677949428558`, 
                0.24314269423484802`, 0.17203719913959503`}}], 
               RawArray["Real32",{{0., 0., 0.}, {-0.4388071596622467, 
                0.07728578895330429, 
                0.15656206011772156`}, {-0.04546623304486275, 
                0.17651818692684174`, -0.37935423851013184`}, \
{-0.11736346781253815`, 0.02928476780653, 0.13047288358211517`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {
                0.9917948246002197, -0.04825117811560631, 
                0.19791820645332336`, -0.3014465570449829}, \
{-0.4360961318016052, -0.393690824508667, -0.7603510022163391, \
-0.5361093878746033}, {
                0.33084601163864136`, -0.7079322338104248, \
-0.5974847674369812, -0.08256813138723373}, {
                0.48374226689338684`, -0.19373546540737152`, 
                0.03832526132464409, 0.2965679466724396}, {0.751858651638031, 
                0.9726056456565857, 0.2430858314037323, 0.8050487041473389}}],
                RawArray["Real32",{{0., 0., 0., 0., 0.}, {
                0.09939222037792206, -0.11627881228923798`, \
-0.22525307536125183`, -0.07646775245666504, 0.2964353859424591}, {
                0.6829591393470764, -0.5093406438827515, \
-0.37544652819633484`, -0.20781882107257843`, 
                0.19597460329532623`}, {-0.4651435315608978, \
-0.22377462685108185`, 0.7459625005722046, 0.27323469519615173`, 
                0.22021552920341492`}, {-0.1595252901315689, 
                0.7019321918487549, -0.1704723834991455, -0.2698456346988678, 
                0.32661882042884827`}, {-0.3967001140117645, \
-0.2836012542247772, -0.2808619439601898, -0.29087892174720764`, \
-0.713783323764801}, {
                0.5268034338951111, -0.17417949438095093`, \
-0.5919480323791504, -0.259490430355072, 
                0.21277309954166412`}, {-0.036504995077848434`, \
-0.22847804427146912`, -0.4088153541088104, 
                0.058326222002506256`, -0.22806385159492493`}, \
{-0.6042143106460571, -1.1497154235839844`, -0.2943030297756195, \
-0.8944584727287292, 0.33708345890045166`}, {0.09809304773807526, 
                0.43590018153190613`, -0.03924771398305893, 
                0.32226771116256714`, 0.22475679218769073`}}], 
               RawArray["Real32",{{0., 0., 0., 0.}, {-0.4756229817867279, 
                0.6352676749229431, -0.6470532417297363, -0.51228928565979}, \
{-0.334865003824234, 0.012379683554172516`, 0.6761125922203064, 
                1.131203293800354}, {-0.025853700935840607`, \
-0.1638537049293518, -0.21077220141887665`, -0.7475782632827759}, {
                0.8041227459907532, -0.2939704358577728, \
-0.12046412378549576`, -0.4007929563522339}, {-0.41240355372428894`, 
                0.24919958412647247`, 
                0.566906750202179, -0.14834782481193542`}, \
{-0.012671418488025665`, -0.09309452027082443, 
                0.7445229291915894, -0.7585445642471313}}], 
               RawArray["Real32",{{0., 0., 0., 
                0.}, {-0.007097428664565086, -0.2506968080997467, 
                0.010410538874566555`, -0.5535528659820557}, {
                0.07196001708507538, 
                0.013937664218246937`, -0.1919541209936142, \
-0.6622348427772522}, {0.01585119590163231, 
                0.09143693000078201, -0.2720745801925659, \
-0.20982004702091217`}, {0.8387836813926697, -1.2589503526687622`, 
                0.5105324387550354, -0.07914700359106064}, {
                0.1612391173839569, 
                0.06681016832590103, -0.44771668314933777`, \
-0.8897247910499573}, {0.15167653560638428`, 0.45135626196861267`, 
                0.944269061088562, -0.14105087518692017`}, {
                0.46501219272613525`, 0.34599897265434265`, 
                0.6227818727493286, 0.12338736653327942`}}]}, 
             "Version" -> {14.1, 0}, "ID" -> 8766457321527680011|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f4" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22)" -> \
<|"Weight" -> 21, "Type" -> "NumericalVector"|>|>, "Spans" -> {
               Span[1, 1], 
               Span[2, 74]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))" -> \
<|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDwYoCBD/aT1XxnmWReGqVHaYpoAN6V9GI=
                  "], "Type" -> "NumericalVector"|>|>, "Version" -> {14.1, 0},
              "ID" -> 2238645270336447202|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> True, "Missing" -> 
         "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 5696060697331476521|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"edible" -> 1, "poisonous" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 3945508972722672840, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 331069452409314429|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "edible" -> 0.5179324894514769, "poisonous" -> 0.4820675105485232|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{23, 25, 14, 16, 30, 40, 46, 26, 46, 73, 14, 
            17, 55, 5, 65}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.45204705103412124`, 
           0.5631004330721607, -0.04478965895542164, 
           0.29178473559200047`, -0.5001388051313134, -0.16977837225430736`, \
-1.0412981789849862`, -0.7094956764484142, -1.0412971150958263`, \
-0.27207509471192415`, 0.5659680202959887, 
           0.16449135154174455`, -0.1173624832509148, -0.07788084932237005, \
-0.5926686992133332}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -8}, {10, 11}, {5, 
            6}, {-1, -9}, {-2, 7}, {-3, 8}, {9, -10}, {-4, -11}, {12, 
            13}, {-5, -12}, {-6, -13}, {14, -14}, {15, -15}, {-7, -16}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 
            1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 72, 17, 33, 70, 16, 70, 61, 46, 72, 6, 40,
             35, 18, 13, 74, 66, 11, 16, 31}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.2646680284669629, 
           0.39867762061727774`, -0.6729643813063904, -0.7819408592360197, \
-0.2745703862054425, 
           0.3170478091129514, -0.14834875656970015`, -0.3014456925392692, \
-0.002494603403150674, -0.7548235136478398, -0.29966491983241417`, \
-0.10935610832685005`, -0.04926371912841693, -0.30423681876028175`, 
           0.07141326398667391, 0.12338647165277128`, 0.24620504088503115`, 
           0.597815633517575, 0.20300084058805767`, 0.19671318140818483`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -12}, {-1, 14}, {5, 
            6}, {-2, -13}, {-3, 7}, {-4, 8}, {9, 10}, {11, 12}, {-5, -14}, {
            13, -15}, {-6, -16}, {-7, -17}, {-8, 15}, {16, -18}, {-9, 17}, {
            18, -19}, {19, 20}, {-10, -20}, {-11, -21}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 
            2, 1, 1, 2, 2, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 14, 13, 14, 62, 73, 48, 17, 30, 63, 5, 74,
             24, 5, 56, 69, 36, 13, 4, 62}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.1741204516757029, -0.8278982020489325, 
           1.040105925672231, -0.3157916150835334, -0.5004572093959014, 
           0.5666570259843109, -0.5407276621090533, 
           0.1644907268149911, -0.5001386750962791, -0.8295283244657163, \
-0.6824881512487444, -0.3816863267811712, -0.7512680089309631, \
-0.20249266000468213`, 0.029285731022322237`, 0.5669075299938804, 
           0.22741971831999908`, 
           0.02053997130521462, -0.14873951388045548`, -0.5004570923722094}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 5}, {6, 7}, {-3, -14}, {
            8, 9}, {-4, 11}, {-5, -15}, {-6, 10}, {-7, -16}, {12, 
            13}, {-8, -17}, {14, 15}, {16, 17}, {20, -18}, {-9, -19}, {-10, 
            18}, {-11, 19}, {-12, -20}, {-13, -21}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 
            2, 1, 2, 2, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{62, 14, 17, 30, 68, 41, 74, 6, 57, 47, 21, 67,
             3, 58, 64, 61, 72, 15, 15}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.15952429450256278`, \
-0.16290380804733506`, -0.6729643843496378, -0.5001386873354372, 
           0.2491986165434379, 
           0.360934922124859, -0.6078938531863454, -0.6964944237082626, \
-0.3793549851231015, -0.2485264345570557, 
           0.5096341332044796, -0.18036002300214538`, -0.5528330862997226, 
           0.8718266493315987, -0.22566716240763607`, 
           0.8050486271687545, -0.7548235572061532, 0.023945732195491093`, 
           0.2617183395730076}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -13}, {-1, 18}, {-2, 5}, {6, 7}, {
            8, -14}, {-3, 13}, {-4, 9}, {10, 11}, {-5, -15}, {-6, 
            12}, {-7, -16}, {14, 15}, {-8, -17}, {16, -18}, {-9, 
            17}, {-10, -19}, {-11, 19}, {-12, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 
            2, 1, 1, 2, 1, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 47, 65, 62, 34, 71, 2, 57, 35, 74, 57, 13,
             49, 33, 18, 17}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.35634435738252224`, 
           0.31745200968866083`, -0.23883222738608234`, -0.2781126805702363, 
           0.23462758163561093`, 
           0.07195951971778936, -0.14714681237866456`, -0.3793549895707278, \
-0.3614454985772877, 
           0.022120569739307677`, -0.37935416525699184`, -0.4043998369132491, 
           0.6117246669645464, -0.7276444102502886, 0.09402997279271497, 
           0.11833662600791472`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -10}, {-1, 14}, {5, -11}, {-2, 
            6}, {7, 8}, {-3, 9}, {-4, 10}, {-5, -12}, {11, 12}, {
            13, -13}, {-6, -14}, {-7, -15}, {15, 16}, {-8, -16}, {-9, -17}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 
            1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 24, 56, 64, 57, 67, 17, 16, 58, 12, 12, 
            56, 22, 18, 2}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.31152710437278763`, 0.1197726125779719, 
           0.053285290995783274`, -0.37544749765285523`, -0.1244406406387546, 
           0.39572564625080764`, 0.11833656175690022`, 
           0.29178473559200047`, -0.05262507097295449, 
           0.6966993571852136, -0.40087027372652084`, 0.1269019720958764, 
           0.43228409178580085`, -0.42691197417080673`, 0.002558744125743046},
           "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 9}, {-2, 6}, {-3, -9}, {
            7, -10}, {8, -11}, {-4, -12}, {-5, 10}, {11, 12}, {13, 
            14}, {-6, -13}, {-7, -14}, {15, -15}, {-8, -16}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 
            2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 16, 62, 67, 13, 15, 23, 16, 73, 32, 30, 
            31, 9, 57, 50, 71, 6, 60, 25, 41, 50, 35, 1, 65}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.4118209767114762, 
           0.29178473193612753`, -0.09801513042311882, -0.18035942478884492`, \
-0.8307670417173911, 
           0.26171840354154385`, -0.4520470528902836, -0.10589739699863387`, \
-0.23201439592613826`, 0.020427233586165272`, -0.18715286565065115`, 
           1.688699460183381, 0.3918204034336963, 0.13047366418821116`, 
           0.19030159433780636`, 0.0722892989731212, -0.6964936512598134, 
           0.24308485379247657`, -0.24440087270066835`, -0.3794631145302021, \
-0.12008393059881262`, -0.049263341354600365`, 
           0.17275028954780458`, -0.5926684103050546}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -16}, {6, 7}, {-2, 
            9}, {-3, 8}, {-4, -17}, {-5, -18}, {10, 11}, {-6, -19}, {12, 
            13}, {-7, 14}, {15, 16}, {-8, -20}, {17, -21}, {-9, -22}, {-10, 
            18}, {19, 20}, {21, 22}, {-11, 23}, {-12, -23}, {-13, -24}, {-14, 
            24}, {-15, -25}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 
            1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 15, 15, 13, 47, 60, 43, 27, 30, 14, 73, 
            68, 66, 71, 6, 12, 39, 74, 72, 66}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.41182097657781913`, -0.17412045098445383`, -0.31822888215701983`,
            1.040105864734377, 0.31745191739886414`, 0.22050199669242487`, 
           0.6430467073270778, -0.05260523836683256, -0.5001386879488932, \
-0.4780266137505462, 0.5666571215584186, -0.040356989164407775`, 
           0.3115270759680975, 
           0.07195951971778936, -0.6964942429858691, -0.24718264431232417`, \
-0.654929508809972, -0.17543519209357394`, -0.7548235572061532, 
           0.31675942024357706`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 20}, {5, 6}, {
            7, -15}, {-3, 19}, {-4, 8}, {9, 10}, {-5, 11}, {-6, 18}, {12, 
            13}, {-7, 14}, {-8, 16}, {-9, 15}, {-10, -16}, {
            17, -17}, {-11, -18}, {-12, -19}, {-13, -20}, {-14, -21}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 
            1, 2, 1, 1, 2, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{24, 70, 63, 22, 64, 74, 31, 68, 37, 7, 64, 45,
             5, 53, 12, 73, 63, 57, 9, 30, 72, 11, 69, 57, 32, 64}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.1197726125779719, -0.579668837925361, 
           0.5689161463263614, 
           0.4322843519269961, -0.25977805060422776`, -0.8897239215609849, 
           1.6886993788831752`, 0.13078913093278488`, 
           0.7557642430070688, -0.3395773591542599, -0.19786264415675525`, \
-0.7327271557028778, -0.6824881572183399, -0.7142866031748776, \
-0.052835969166131924`, -0.27207525016711775`, -0.3964712421729586, \
-0.12444084441158298`, 0.39182029065031854`, -0.18715102486990642`, 
           0.27139661568866913`, 0.5978155317337297, 0.17806704074660917`, 
           0.1304727390834597, 0.6240551232519804, -0.2530576211268003}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -16}, {5, 6}, {
            7, -17}, {10, 11}, {8, 
            9}, {-2, -18}, {-3, -19}, {-4, -20}, {-5, -21}, {-6, 13}, {14, 
            15}, {-7, -22}, {16, 17}, {18, 19}, {-8, 26}, {-9, -23}, {20, 
            21}, {22, 23}, {-10, -24}, {-11, 24}, {-12, -25}, {-13, 
            25}, {-14, -26}, {-15, -27}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 
            1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 66, 69, 47, 24, 63, 4, 70, 61, 70, 1, 32, 
            18, 33}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.35634435662886466`, \
-0.2589043957933619, 0.2232213128419629, 
           0.3174519578167274, -0.7512682320437998, -1.1497148507386967`, \
-0.09335497279226568, -0.14834691281347778`, -0.30144624999932823`, \
-0.14834872757420436`, -0.8422515432548092, 0.6240553594184224, 
           0.24850093288635677`, -0.4141860762850049}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, 13}, {5, -8}, {6, -9}, {
            7, 8}, {9, 10}, {-2, -10}, {-3, 11}, {-4, -11}, {-5, -12}, {
            14, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 
            1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 35, 16, 61, 1, 72, 56, 41, 40, 23, 64, 6, 
            62, 28}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.17412045098445383`, 
           0.11986397124811154`, -0.6493618568673654, 
           0.5508083174124794, -0.8350429747108077, 0.2064045731035835, 
           0.029285734977615163`, 
           0.36093489171521753`, -0.09538616375413722, -0.4520470047672176, \
-0.2875824924703485, -0.6964936611212478, 0.09939130290101295, 
           0.4964380108678368}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, 5}, {-3, -9}, {6, 7}, {
            8, 9}, {11, 12}, {-4, -10}, {10, -11}, {-5, -12}, {-6, -13}, {-7, 
            13}, {14, -14}, {-8, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 
            1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 23, 49, 62, 9, 29, 11, 73, 68, 27, 4, 16, 
            15, 53, 45, 29, 11, 66, 59, 73, 62, 33}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.16290380453759057`, \
-0.45204704874694945`, 1.1808523781100089`, -0.3818697871105514, 
           0.3918203848903139, -0.2403775754302051, -0.2228246365880382, 
           0.21541388955912666`, 
           0.13078872918287354`, -0.052605520490986324`, \
-0.11358554890280737`, 0.2917847380871996, 
           0.023945719990939612`, -0.7142873743182614, -0.29988441393759135`, \
-0.5410832303700568, 0.5978151804727379, -0.25890453184703466`, 
           0.4621772607631609, 
           0.26047201518237983`, -0.09801508605352882, -0.781940671101145}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 21}, {6, 7}, {14, 15}, {
            8, -13}, {10, 11}, {9, -14}, {-2, -15}, {-3, -16}, {12, -17}, {
            13, -18}, {-4, -19}, {16, 17}, {-5, 19}, {-6, -20}, {-7, 
            18}, {-8, -21}, {-9, 20}, {-10, -22}, {-11, 22}, {-12, -23}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 
            2, 1, 1, 1, 1, 2, 1, 1, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 26, 57, 15, 25, 12, 48, 16, 18, 13, 29, 
            60, 70, 66, 10, 26, 6, 72, 18, 50}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.04926385712113435, 
           0.03188213906621107, -0.1244405623251218, -0.20847689726020024`, 
           0.2408900417082145, -0.3071261764672295, -0.7952655312413199, 
           0.29178473193612753`, 0.03506820931232568, 0.6551238972856783, 
           0.2107325708190726, 0.22050212236249256`, 
           1.1312030994894648`, -0.2589044796334874, 
           0.35089058666472095`, -0.7094957375720989, -0.6964936128294559, \
-0.7548235572061532, -0.35634435952517274`, 0.20180864366050089`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 20}, {-2, 6}, {
            19, -12}, {7, 8}, {-3, -13}, {9, 10}, {-4, -14}, {11, 12}, {
            13, -15}, {-5, 18}, {14, 15}, {-6, 16}, {-7, -16}, {
            17, -17}, {-8, -18}, {-9, -19}, {-10, -20}, {-11, -21}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 
            1, 2, 1, 1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{26, 36, 62, 59, 16, 9, 16, 11, 18, 66, 73, 71,
             36, 4, 31, 21, 66, 11, 5, 45, 6, 38, 30, 60}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.031882101163594634`, 
           0.2689816507895406, -0.03006651680388711, 0.4621771396208425, 
           0.2917847159658229, 0.22751245792300367`, 
           0.17776419304604207`, -0.6794622472822196, -0.017039329734293784`, \
-0.19358228751233253`, -0.23201456322207736`, 0.08854492761968624, 
           0.4454279003958952, 0.1266798652478225, 
           1.6886999407581467`, -0.3520857562987447, -0.2589047073708972, 
           0.5978153613826596, -0.07788086842736353, 0.17924259255854258`, 
           0.05735154295743622, 
           0.39605256453137283`, -0.5001382548975846, -0.2586324337439345}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {22, 23}, {-1, 6}, {7, 
            8}, {-2, -14}, {9, -15}, {10, 11}, {-3, -16}, {-4, -17}, {12, 
            13}, {-5, -18}, {14, -19}, {15, 16}, {17, 18}, {20, 
            21}, {-6, -20}, {-7, 19}, {-8, -21}, {-9, -22}, {-10, -23}, {-11, 
            24}, {-12, -24}, {-13, -25}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 
            2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 61, 9, 33, 71, 10, 1, 65, 61, 13, 40, 60, 
            12, 73, 70, 21, 40, 66}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.2917847299799585, 0.5508083155831267, 
           0.3918203848903139, -0.35989016805984786`, 
           0.465011201564999, -0.14358206321668399`, 
           0.17034287629991973`, -0.8944593792792546, 
           0.25180106412762804`, -0.8190504050692065, -0.16977835070011604`, 
           0.2205026195495643, -0.05283766380134758, -0.2320143573509037, \
-0.1483469078835815, -0.3520858460067773, -0.09538655102808669, \
-0.18834960581458415`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {8, 9}, {5, -12}, {-2, 
            6}, {-3, 7}, {-4, -13}, {10, 11}, {-5, 18}, {-6, -14}, {12, 
            13}, {-7, -15}, {-8, 14}, {-9, 15}, {16, -16}, {
            17, -17}, {-10, -18}, {-11, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 
            1, 1, 2, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{24, 39, 62, 66, 16, 12, 16, 32, 28, 60, 5, 73,
             8, 53, 36, 46, 13, 46, 64, 74, 44}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.11977260949299162`, 
           0.19364830633672403`, -0.03071603947082696, 0.29643493755102224`, 
           0.1777641556752665, 0.3219317430162407, 
           0.29178473275143135`, -0.6191579449552256, 0.26574121432614595`, 
           0.19791721418742436`, 0.19620399503330077`, -0.44771719754398687`, 
           0.6448703386946386, -0.7142873849364291, 
           0.2763927401392827, -0.0024962561813673227`, -0.8307664474608227, \
-0.0024957625086826814`, -0.28758246475270877`, 
           0.1233867843777312, -0.614250856153693}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -11}, {19, -12}, {5, 6}, {-1, 
            7}, {8, -13}, {-2, -14}, {9, 10}, {11, -15}, {-3, 14}, {
            12, -16}, {13, -17}, {-4, -18}, {-5, 15}, {16, 17}, {-6, 
            18}, {-7, -19}, {-8, -20}, {20, 21}, {-9, -21}, {-10, -22}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 
            1, 1, 1, 2, 2, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{23, 22, 36, 30, 18, 49, 24, 38, 30, 21, 59, 
            64, 9, 64, 56, 65, 64, 30, 5}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.1540317393247872, \
-0.44215856971810297`, 
           0.22741975745645293`, -0.5001387323407753, -0.42691111903649626`, 
           0.049373751577387714`, 
           0.11977309912569489`, -0.6425232681251654, -0.813126270279751, 
           0.07877391686318891, 0.3894349487989701, -0.19786272631058122`, 
           0.3918203848903139, -0.1048599955676558, 
           0.02928463289994407, -0.592668639853815, -0.28758243719889487`, \
-0.18715111428808595`, -0.6824879062213425}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {11, 12}, {-1, 6}, {8, 
            9}, {-2, 7}, {-3, -12}, {-4, -13}, {
            10, -14}, {-5, -15}, {-6, -16}, {13, 14}, {15, 16}, {-7, -17}, {
            17, 18}, {-8, -18}, {-9, -19}, {-10, 19}, {-11, -20}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 
            2, 1, 1, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 22, 31, 50, 16, 57, 50, 66, 35, 34, 16, 
            18, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.26466803162234775`, 
           1.3067272458031294`, 1.6886986112223727`, 0.023529767281821184`, 
           0.1427208626696086, -0.379354057433952, -0.16587579771617333`, \
-0.19358226933627232`, -0.12079008336222652`, -0.0821919695612694, 
           0.17776425236073057`, -0.3042368260797188, 0.17486579446358896`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 10}, {6, -9}, {-2, 8}, {
            7, -10}, {-3, -11}, {-4, 9}, {-5, -12}, {11, 12}, {-6, 
            13}, {-7, -13}, {-8, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 
            2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{27, 59, 18, 18, 66, 18, 40, 72, 2, 7, 66}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.0526052461383264, -0.5508115289387217, \
-0.35634435630948413`, -0.3563443553208345, -0.25890443271943075`, 
           0.2485009261953144, -0.1837472453839315, -0.6225063640823025, \
-0.6064864163254411, 0.17635049553445659`, -0.2589043941185105}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {11, -7}, {5, 6}, {-2, 
            7}, {-3, -8}, {8, 9}, {-4, -9}, {10, -10}, {-5, -11}, {-6, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 18, 60, 62, 24, 2, 63, 67, 23, 52, 12, 38,
             23, 73, 21, 32, 1, 68}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.7314965619917491, -0.3563443432888449, 
           0.2205020322478899, -0.27811279599473515`, 
           0.11977261324853028`, -0.14714682423535375`, -0.7166583643094668, \
-0.3348658549340491, -0.7500624281223747, -0.5451615239120864, \
-0.4008702128656729, -0.6425232654563127, -0.45204723288952753`, \
-0.23201456322207736`, 0.07877387125915147, 0.6240553852092416, 
           0.17082326553884064`, -0.04035739678473388}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -10}, {6, -11}, {15, 
            16}, {7, 8}, {9, 10}, {12, 13}, {
            11, -12}, {-2, -13}, {-3, -14}, {-4, 
            14}, {-5, -15}, {-6, -16}, {-7, 17}, {
            18, -17}, {-8, -18}, {-9, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 
            2, 1, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 47, 18, 55, 64, 36, 67, 56, 38, 2, 65, 66,
             46}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.35634435662886466`, 0.317451936873681, 
           0.248500921522961, -0.04546721330087444, -0.28758246073595073`, 
           0.22741963895197004`, -0.4124036443078358, 
           0.10290187064668155`, -0.6425234615596276, -0.6064864238659409, \
-0.5769747412122364, 0.3370826793663819, -0.5218972006756513}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -8}, {-1, -9}, {5, 6}, {7, 
            8}, {-2, 10}, {9, -10}, {-3, -11}, {-4, -12}, {11, 
            12}, {-5, -13}, {-6, 13}, {-7, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 
            1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 56, 29, 31, 68, 22, 23, 10, 67, 24, 29, 
            13, 74, 5, 62, 27, 16, 59, 21, 57, 10, 15, 60, 30, 9, 73, 61, 
            13}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.3115271007778566, 
           0.10290145961580466`, -0.20129758590382285`, 1.6886986113779638`, 
           0.1307896120789882, 
           0.43228434296161167`, -0.7500623733426508, -0.24570368939286458`, 
           0.3957256925334258, -0.7512678613720887, 
           0.19054041227092444`, -0.4044008621151085, -0.8897242318723269, 
           0.046730623346051714`, 0.6829590557573404, -0.2349395662001601, 
           0.2917847760586949, -0.5508114820421062, 
           0.07877389878992824, -0.12444068968045985`, 0.32240375148473666`, 
           0.21882993233104187`, 
           0.19791723834483377`, -0.18715106433169693`, -0.18509710021052972`,
            0.21541369176831782`, -0.4187780277342137, -0.6182970048086336}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {18, 19}, {-2, 5}, {6, 
            7}, {-3, 8}, {17, -16}, {9, 10}, {-4, 11}, {12, -17}, {-5, -18}, {
            13, 14}, {15, -19}, {-6, 
            16}, {-7, -20}, {-8, -21}, {-9, -22}, {-10, 20}, {27, 28}, {21, 
            22}, {23, -23}, {-11, -24}, {-12, 24}, {25, -25}, {
            26, -26}, {-13, -27}, {-14, -28}, {-15, -29}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 
            1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1}], "RootIndex" -> 
          1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 26, 9, 65, 47, 65, 24, 67, 58, 15, 36, 18,
             62, 66}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.17412045172008628`, 0.3075285834673491,
            0.326296320602911, -0.5821519433205635, 
           0.3174519578167274, -0.592668639853815, -0.7512679642775293, 
           0.39572570302384014`, 0.7518576538711974, 0.023945748096377895`, 
           0.22741964745464371`, 
           0.03506820797091048, -0.6042151320057734, -0.47092338553882795`}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {5, 6}, {-2, -9}, {
            7, -10}, {-3, -11}, {8, 9}, {10, -12}, {-4, 14}, {11, 12}, {-5, 
            13}, {-6, -13}, {-7, -14}, {-8, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 
            1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 60, 46, 16, 39, 63, 4, 38, 71, 32, 55, 62,
             70, 47, 12, 11, 57, 44, 66, 67}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.29178473193612753`, 
           0.22050202297057875`, -0.002494603403150674, 0.17776419304604207`, 
           0.028424950713836244`, 0.29282667847009636`, 
           0.12668042032554072`, -0.17727406294947023`, -0.007098421740188134,
            0.624055312116683, -0.04546721330087444, -0.5004572082911887, 
           1.1312042182792528`, -0.21976346876103903`, -0.06481002832934779, 
           0.08756614982676914, -0.12444070353096703`, 0.9774199202194378, 
           0.33185072079169853`, -0.2125371356334691}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {5, -12}, {
            6, -13}, {-2, -14}, {9, 10}, {-3, -15}, {-4, 11}, {-5, 20}, {12, 
            13}, {14, 15}, {18, -16}, {-6, -17}, {16, 
            17}, {-7, -18}, {-8, -19}, {-9, 19}, {-10, -20}, {-11, -21}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 
            2, 1, 2, 2, 2, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 15, 18, 24, 30, 27, 68, 34, 73, 25, 21, 
            22, 65, 40, 56, 23, 5, 4, 49, 40}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.3115270974595421, -0.20847690272636465`, -0.3563443578240246, 
           0.11977261223136226`, -0.18715285013046112`, 
           0.5221186016670005, -0.19353277555567328`, 0.07621875639614228, 
           0.6227827964491794, -0.5154358436796826, 
           0.07877399025883958, -0.4421601956439263, -0.2751847456332581, \
-0.1697783253823033, 
           0.10290151836880701`, -0.7500624011545387, -0.4424896870364661, \
-0.16366211084296878`, 1.180854021668143, -0.09538596179047176}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {14, -12}, {5, 6}, {7, 8}, {
            13, -13}, {-2, 9}, {-3, -14}, {10, 11}, {
            12, -15}, {-4, -16}, {-5, -17}, {-6, -18}, {15, 16}, {-7, -19}, {
            17, -20}, {-8, 18}, {-9, 19}, {-10, 20}, {-11, -21}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 
            2, 1, 1, 1, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 66, 47, 15, 24, 2, 65, 31, 2, 34, 35, 12, 
            1, 56, 60, 32, 9, 63, 23, 66, 13, 66, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.29178473244838665`, 0.3115270933413381, 
           0.3174519578167274, -0.16274887259884108`, 0.11977261359513991`, 
           0.14558666959802835`, -0.009070694985511274, 
           0.1967131737173562, -0.6064852292921561, 0.07621876471726174, 
           0.119865215371869, -0.36199900399118246`, -0.8419164774555243, 
           0.029284730169616968`, 0.2205016183713655, 0.624055309276268, 
           0.39182077138328, -0.7166582600244382, -0.7500637726080255, \
-0.18834986808275955`, -0.4044009308524621, -0.25890466602606255`, \
-0.6964944401439919}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -13}, {9, -14}, {-1, 5}, {
            6, -15}, {-2, 7}, {8, -16}, {-3, -17}, {10, 11}, {-4, 12}, {14, 
            15}, {13, -18}, {-5, -19}, {16, 17}, {-6, -20}, {-7, 18}, {19, 
            20}, {-8, -21}, {21, 22}, {-9, -22}, {-10, -23}, {-11, 
            23}, {-12, -24}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 
            2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{17, 23, 16, 27, 62, 18, 39, 50, 30, 73, 60, 9,
             13, 26, 59, 62, 15}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.41182097657781913`, -0.4520470520743589,
            0.01139695185503578, -0.05260534104547537, -0.1493034863721825, \
-0.42691111903649626`, 0.19364836329153823`, 
           0.02352974649352718, -0.5001387359581706, -0.19195402111022974`, 
           0.22050198591734116`, 0.22959875400662755`, -0.40440075962687905`, 
           0.38886171612178533`, -0.04825067699787011, -0.43092190089156146`, 
           0.21882994043635007`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -8}, {6, 7}, {16, -9}, {
            8, 9}, {-2, -10}, {10, -11}, {-3, 14}, {-4, 11}, {12, -12}, {
            13, -13}, {-5, -14}, {15, -15}, {-6, -16}, {17, -17}, {-7, -18}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 
            1, 1, 2, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{38, 48, 15, 22, 34, 16, 13, 55, 62, 46, 30, 
            23, 17, 66, 1, 59, 36}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.7506026784748192, \
-0.08247020083342838, -0.17412045102883722`, 
           0.4322843036235464, -0.2053771012493868, -0.6493618694902485, 
           1.040105864734377, -0.27808540505432067`, -0.5004572024061158, 
           0.009666023574148197, -0.18715300245308808`, -0.7500623730858997, \
-0.21434387107342712`, -0.2589044777590783, -0.8341654280017821, \
-0.22097133866630037`, 0.2274197059825236}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {-2, 6}, {-3, 
            5}, {-4, -12}, {-5, 7}, {8, 9}, {-6, 10}, {-7, -13}, {
            11, -14}, {-8, 12}, {13, 14}, {15, 16}, {-9, -15}, {
            17, -16}, {-10, -17}, {-11, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 
            2, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 24, 62, 18, 66, 35, 22, 43, 72, 48, 14, 
            17, 74, 33}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.1629038051683609, 
           
           0.11977261284699614`, -0.09801508388554603, -0.4269111477954648, \
-0.2589044389158204, -0.04926390275731923, 0.4322843561752556, 
           0.4595916882759541, 0.013936765527886502`, 
           0.09018676632934308, -0.7295458361455163, -0.2143439696999354, 
           0.123388036473981, -0.7819407432949825}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 14}, {6, 7}, {-2, -8}, {
            8, -9}, {11, 12}, {-3, 9}, {10, -10}, {-4, -11}, {-5, -12}, {
            13, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 
            2, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 46, 60, 13, 1, 65, 63, 56, 4, 25, 1, 39, 
            49, 64, 46, 44, 43, 59, 74, 7, 70, 7, 17, 32, 16}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3563443552427805, \
-0.0024948493573751784`, 0.22050201946144887`, 
           1.0401060851096702`, -0.8356017308741901, -0.28036216549780457`, \
-0.7166583829610467, 0.1765189615291285, 
           0.1266817096129933, -0.3249303434605455, 
           0.17204879410649587`, -1.059222940090729, 
           1.1808537451209435`, -0.2875821724389187, -1.0412977430268935`, 
           0.9774185145021459, 0.6430479982900108, 0.4621767855390364, 
           0.12338692015888397`, -0.44757437592876226`, \
-0.40079389403094057`, -0.33957791416650185`, 0.516606574346298, 
           0.6240561978065333, -0.14843773785992398`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 21}, {6, 7}, {20, -14}, {
            8, -15}, {-2, -16}, {9, -17}, {10, 11}, {-3, 12}, {-4, -18}, {13, 
            14}, {15, 16}, {19, -19}, {-5, 17}, {-6, 
            18}, {-7, -20}, {-8, -21}, {-9, -22}, {-10, -23}, {22, 23}, {-11, 
            24}, {25, -24}, {-12, -25}, {-13, -26}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 
            1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{64, 30, 17, 15, 32, 52, 23, 61, 12, 55, 10, 
            61, 7, 11, 14, 39, 16, 74, 21, 74, 4, 13, 70, 31, 59, 5, 6, 7, 13,
             6, 65, 73, 68, 67, 62}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.3348747802114964, \
-0.18715300646416488`, 0.41182097657781913`, -0.20847692091211822`, 
           0.6240554520849173, -0.5451616764337723, -0.4520470523216873, 
           0.8050477507185887, -0.05283592333919196, -0.27808540505432067`, 
           0.8118440116935526, -0.4187782231063859, -0.4475732396195773, \
-0.22282314919138302`, -0.3157904481051843, -0.6549295056945255, 
           0.2917852201061941, -0.26942393118269514`, 
           0.07877379265628204, -0.26942376121536293`, -0.09335433656137315, 
           1.0401058709466557`, -0.27457039565674357`, 1.688698630599653, 
           0.46217742450109967`, -0.20249173284626143`, -0.3777465068360577, 
           0.584281322310737, 0.5963491680060713, 
           0.057352519787961964`, -0.5926688411042136, 0.3165962002109124, 
           0.13078962608240285`, -0.2191286313285996, -0.030066539650912577`},
           "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {7, 8}, {-2, 5}, {-3, 
            6}, {-4, -21}, {9, 10}, {-5, 34}, {11, -22}, {-6, 21}, {
            12, -23}, {-7, 13}, {14, 15}, {16, 17}, {20, -24}, {18, 
            19}, {-8, -25}, {-9, -26}, {-10, -27}, {-11, -28}, {22, 23}, {24, 
            25}, {-12, 32}, {-13, 26}, {-14, 30}, {27, -29}, {-15, 28}, {
            29, -30}, {-16, -31}, {31, -32}, {-17, -33}, {
            33, -34}, {-18, -35}, {-19, 35}, {-20, -36}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1, 
            1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 
            1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{38, 16, 25, 64, 72, 65, 62, 13, 38, 60, 69, 
            41, 23, 67, 23, 31, 69, 1, 34}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.7506026180089416, 0.05393736185323622, 
           0.712890384282054, -0.33487538200233047`, -0.11837946062415061`, \
-0.2646680491493827, -0.5004572093959014, 
           0.638922354844814, -0.7506008032834748, -0.25863261168254237`, 
           
           0.7103177481178085, -0.37946311587501746`, -0.7500626269946755, \
-0.37363400155014537`, -0.4520470517779729, 0.19671333263653135`, 
           0.6557148552669689, -0.8348552609300821, 0.07621865116337367}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {
            6, -9}, {-1, -10}, {-2, -11}, {7, 8}, {9, 10}, {15, -12}, {11, 
            12}, {-3, -13}, {-4, -14}, {-5, 13}, {14, -15}, {-6, -16}, {
            16, -17}, {-7, 17}, {18, -18}, {19, -19}, {-8, -20}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 
            1, 1, 2, 1, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 31, 18, 32, 34, 12, 69, 14, 52, 10, 29, 
            44, 40, 61, 4, 74, 1}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.3115270970595345, 
           1.6886986128039378`, -0.3563443578240246, 
           0.6240554076942955, -0.0821920550817773, -0.3459972074788693, 
           0.5669075016611833, -0.14325521307576805`, -0.4193927642187174, \
-0.021965494078626108`, 
           0.13937818923949563`, -0.09404754657907677, -0.16977841802902938`, 
           0.25180116652081264`, 0.5442809812600595, -0.6622340934192392, 
           0.17567806625680404`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -10}, {5, 6}, {-2, 
            7}, {-3, -11}, {8, 9}, {-4, -12}, {-5, 10}, {
            11, -13}, {-6, -14}, {-7, 13}, {14, 15}, {-8, -15}, {16, -16}, {
            17, -17}, {-9, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 
            2, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{16, 18, 62, 13, 62, 24, 36, 37}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.29178473193612753`, 
           0.248500921522961, -0.27811268576710013`, -0.8307670332865991, \
-0.43092190089156146`, -0.7512680378453584, 0.26898243002212796`, 
           0.06323883402701147}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -5}, {4, -6}, {-2, 5}, {6, -7}, {
            7, -8}, {-3, 8}, {-4, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 1}], 
          "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{18, 48, 47, 66, 66, 56, 55, 70, 36, 48, 30, 
            21, 16, 31}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.35634435662886466`, \
-0.795265476060794, -0.24852590297473887`, -0.25890443110102135`, 
           0.337082616094865, 
           0.17651777750837283`, -0.04546541135001786, -0.14834704940773236`, 
           0.22742008103567346`, 0.2628424372640574, -0.18715299776365724`, 
           0.07877387129814961, 0.17776420269184268`, 0.19671376599201262`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {11, -10}, {-2, 5}, {-3, 
            6}, {7, 8}, {-4, -11}, {9, 10}, {-5, -12}, {-6, -13}, {12, 
            13}, {-7, 14}, {-8, -14}, {-9, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 
            2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{62, 21, 44, 18, 69, 64, 1, 65, 61, 73, 35, 67,
             58, 43, 34, 28, 32, 31, 15, 73}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.09801513259110162, 0.07877388947555508,
            0.9774182165259946, -0.35634436222902366`, 
           0.621509778156704, -0.2943022229530188, -0.8356198017095124, \
-0.28036218612226493`, 0.25180114246845475`, 
           0.2604717105647212, -0.12078955252302193`, 0.8041220800486011, 
           0.7518596218636935, 0.6430482987004922, -0.08219080078707897, 
           0.3810891480732046, -0.6191587415831954, 
           1.688698611547773, -0.20847688767629746`, 0.5666571500607374}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, 13}, {
            6, -11}, {-1, -12}, {7, 8}, {9, -13}, {10, -14}, {-2, -15}, {-3, 
            11}, {-4, -16}, {14, 15}, {18, -17}, {-5, 16}, {
            17, -18}, {-6, -19}, {-7, -20}, {-8, 19}, {-9, 20}, {-10, -21}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 
            1, 1, 2, 1, 2, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{40, 24, 60, 26, 62, 16, 18, 40, 2, 73, 8, 6, 
            73, 12, 60, 16, 68, 65, 63}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.7314965619917491, 0.11977261010862539`, 
           0.2205020322478899, 0.03188210628673965, -0.030716098941189984`, 
           0.17776416899049097`, -0.3563446651732658, -0.09538632114534751, 
           0.5750938956379104, -0.19195323414628973`, 0.6448704834595373, 
           0.05735111902682338, -0.19195346132606228`, 0.321931956505602, 
           0.19791723834483377`, 0.1427210783009245, 
           0.2491987063899943, -0.008821970563428677, -0.7166585909977883}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -9}, {6, 7}, {
            16, -10}, {-2, 8}, {-3, -11}, {9, -12}, {10, -13}, {11, -14}, {
            12, -15}, {13, 14}, {-4, -16}, {15, -17}, {-5, -18}, {-6, 
            17}, {-7, 18}, {19, -19}, {-8, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 
            2, 2, 2, 1, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{62, 22, 13, 50, 16, 35, 2, 56, 60, 69, 63, 12,
             74, 7, 24, 31, 6}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.15952429233457988`, 
           1.3067272458031294`, 0.6389223264325974, 0.0235296027669836, 
           0.1427210862543018, -0.36144592344705195`, -0.1527767754509588, 
           0.17651820964231058`, 0.22050225542994428`, 
           0.5669077269223788, -0.2536876775439896, 
           0.32220034872588155`, -0.7759798003441567, -0.3395773206663071, 
           0.11977261290398089`, 0.19671333391210966`, 0.05735276429117431}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {13, -9}, {6, -10}, {-1, 
            10}, {7, 8}, {-2, -11}, {-3, 9}, {-4, -12}, {11, -13}, {
            12, -14}, {-5, -15}, {14, 15}, {-6, -16}, {16, -17}, {-7, 
            17}, {-8, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 1, 
            1, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{62, 21, 24, 57, 70, 70, 63, 64, 38, 17, 17, 
            22, 1, 17, 73, 67, 29, 74}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.09801513042311882, 0.5096322938057485, 
           0.11977261325059052`, -0.12444066024664768`, 0.49142781592856366`, 
           1.131202593469169, -0.7166583301275873, 0.28774506302242076`, 
           0.3960514514033848, 0.13777036133071285`, -0.4036407711542984, 
           1.306727372125776, -0.8364769716076941, -0.6729643711441069, 
           0.08753235845499063, 
           0.19585996559199836`, -0.49478590437523984`, -0.3831687802063053}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {12, -9}, {6, 7}, {-1, -10}, {
            8, -11}, {11, -12}, {9, -13}, {-2, 10}, {-3, -14}, {-4, -15}, {13,
             14}, {15, 16}, {-5, 18}, {-6, -16}, {
            17, -17}, {-7, -18}, {-8, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 
            2, 1, 2, 2, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{36, 69, 25, 24, 68, 11, 59, 36, 17, 73, 16, 
            26, 72, 26, 74, 17, 62, 34, 71}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.22741976404092812`, 
           0.22322131910370024`, 0.7128903800093243, 
           0.11977261223136226`, -0.1935324772190441, -0.6248263734097943, 
           0.9726047087816161, 0.36461468613405223`, 0.11833657945763076`, 
           0.6227822950213584, 0.3170479371576449, -0.5469817528764436, 
           0.27139658057219274`, 0.031882101163594634`, -0.7759798174097821, 
           0.1377703910872008, -0.030716079813857267`, 0.2346275606518704, 
           0.04390540000670712}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -11}, {4, -12}, {5, 6}, {-2, 
            7}, {13, 14}, {8, 9}, {10, -13}, {11, -14}, {-3, -15}, {-4, 
            12}, {-5, -16}, {-6, -17}, {15, 16}, {-7, 17}, {-8, -18}, {
            18, -19}, {-9, 19}, {-10, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 
            1, 2, 1, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 55, 71, 17, 13, 32, 24, 14, 7, 3, 1, 17, 
            38, 31, 6, 35, 55, 72, 48}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.3115271042640413, -0.08141486030101397, 
           0.1564577981497315, -0.6729643805570431, 0.6389223264325974, 
           0.6600121567542363, -0.7512681330294608, -0.4780265969488129, \
-0.33957734857475863`, -0.5528342169954295, 0.17043663809688292`, 
           0.13777035356503387`, 0.3960515686275552, 
           1.6886986074690284`, -0.6964936328668685, -0.5271754109471738, \
-0.08141486172110934, 0.2064045822115852, -0.33124693453923326`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, 13}, {-2, 5}, {
            6, -10}, {7, 8}, {9, -11}, {11, -12}, {
            10, -13}, {-3, -14}, {-4, -15}, {14, -16}, {17, 18}, {-5, 
            15}, {-6, 16}, {-7, -17}, {19, -18}, {-8, -19}, {-9, -20}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 
            1, 1, 2, 1, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{66, 18, 73, 4, 1, 65, 56, 17, 15, 21, 13, 69, 
            17, 68, 16, 39, 56}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.3115271007778566, -0.3042368183653088, 
           0.7835254698242613, 0.12668013670927847`, 
           1.1750876277311413`, -0.2751847442892812, 0.10290149987127195`, 
           0.11833753474459963`, -0.16274887249642145`, 0.07877388986658906, 
           1.0826789756650808`, 0.6215096761893122, 
           0.13777035019583206`, -0.04035750164317925, 0.3170496779444263, 
           0.1936486262726771, 0.05328516499882524}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {10, -8}, {6, 7}, {8, 
            9}, {-1, -9}, {-2, -10}, {-3, -11}, {-4, -12}, {11, 12}, {
            13, -13}, {-5, -14}, {14, -15}, {-6, 15}, {16, -16}, {
            17, -17}, {-7, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
            2, 2, 1, 1, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{61, 61, 14, 16, 38, 15, 33, 31, 27, 32, 12, 2,
             63, 24, 31, 14, 72}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.5508083155831267, -0.30144557425588125`, -0.1432552148719326, 
           0.10018101659660994`, -0.6425232455257346, 
           0.023945722330060648`, -0.35989013909947776`, 1.6886987966558333`, 
           0.5221188213991379, 
           0.6240552959917487, -0.2911247334455611, -0.6064863758503627, \
-0.7166585766004436, 0.11977263116212933`, -1.295273519819041, 
           0.46389586782257375`, 0.20640462772828738`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -9}, {6, 7}, {-1, 5}, {-2, -10}, {
            8, -11}, {15, -12}, {9, 10}, {-3, -13}, {-4, 11}, {12, 
            13}, {-5, -14}, {14, -15}, {-6, -16}, {16, 
            17}, {-7, -17}, {-8, -18}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 
            1, 2, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 22, 70, 6, 70, 40, 4, 69, 16, 42, 60, 36, 
            59, 62, 61, 15, 14, 17}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.2646679898078168, 
           1.3067272458031294`, -0.4565411237243202, -0.6964935902436418, 
           0.4914277356641259, -0.16977855585434298`, 0.5442809812600595, 
           0.6215100604901647, 
           0.3170478022030965, -0.09997276896619545, -0.2812163879597098, 
           0.26898280645410155`, 0.972606399377641, -0.5004573503131144, 
           0.8050492654654287, -0.20847689718421591`, -0.4780265969488129, 
           0.22312226008398484`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, 16}, {-2, 6}, {9, 
            10}, {-3, 7}, {8, -12}, {-4, -13}, {-5, 11}, {-6, -14}, {-7, 
            12}, {13, 14}, {15, -15}, {-8, -16}, {-9, -17}, {-10, 17}, {
            18, -18}, {-11, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 
            2, 2, 2, 2, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{70, 16, 65, 33, 72, 16, 58, 21, 23, 67, 49, 
            57, 23, 16}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.4007919883840869, 
           0.29178472909555886`, -0.264668032521878, -0.35989016527548134`, 
           0.3986776224746267, 0.29178473700071583`, -0.05262507097295449, 
           0.07877388938639063, -0.15402980354978424`, -0.3736342405510835, 
           1.1808542859718063`, -0.12444057798938457`, -0.154031242248162, 
           0.17776416000882844`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, -8}, {5, 6}, {-1, -9}, {7, -10}, {
            14, -11}, {-2, 8}, {9, 10}, {11, 12}, {-3, -12}, {-4, 
            13}, {-5, -13}, {-6, -14}, {-7, -15}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 
            2, 2}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{35, 23, 59, 15, 62, 17, 47, 15, 62, 69, 69, 
            65, 13, 18, 31, 64, 28, 19, 63, 42, 38}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {
           0.11986397030983242`, -0.15403173927910085`, 
           0.46217724072035926`, -0.17412045103536533`, \
-0.030716098941189984`, -0.21434383786071942`, 0.12144192333811488`, 
           0.02394575002861557, -0.6042144677966279, 0.6215094972421511, 
           0.6215105169375175, -0.009070545303920943, -0.8307670921418691, 
           0.11531939367286237`, 
           1.6886986329443765`, -0.28758212891086865`, -0.3267338627057521, \
-0.2733434271252211, -0.7166583061874041, -0.23762430991078087`, \
-0.8428880210316869}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {-1, -12}, {-2, 6}, {
            15, -13}, {7, 8}, {9, -14}, {11, 12}, {
            10, -15}, {-3, -16}, {-4, -17}, {13, -18}, {-5, 14}, {-6, -19}, {
            16, 17}, {-7, -20}, {18, 19}, {-8, -21}, {-9, 20}, {-10, 
            21}, {-11, -22}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 
            2, 1, 2, 2, 1, 1, 2, 2, 1}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{38, 21, 25, 65, 14, 16, 67, 60, 29, 50, 2, 35,
             72, 5, 74, 24, 33, 13, 31}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.7506027439663843, 0.07877389420375513, 
           0.712890384282054, -0.2646680323283288, -0.31578963651654757`, 
           0.29178473193612753`, -0.334865361731425, 0.19791909823989484`, 
           0.4534849131053815, 
           0.1903008494568399, -0.1471469042282738, -0.04926369877613346, \
-0.7548235572061532, 0.04672945544181961, -0.6078940369769228, 
           0.11977261359513991`, -0.7276458366406997, -0.8307675281060476, 
           0.19671334031710241`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -8}, {4, -9}, {5, 6}, {7, -10}, {
            16, -11}, {8, 9}, {10, 11}, {15, -12}, {12, -13}, {13, 
            14}, {-2, -14}, {-3, -15}, {-4, -16}, {-5, -17}, {17, -18}, {18, 
            19}, {-6, -19}, {-7, -20}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 
            2, 2, 1, 1, 1, 2, 2}], "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{65, 16, 16, 46, 1, 56, 60, 9, 65, 70, 72, 15, 
            17}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.2646680284669629, 0.3170477999417636, 
           0.29178473193612753`, 0.00966602711953335, -0.8340514081308834, 
           0.17651898932604881`, 0.22050207885862783`, 
           0.22959928846331956`, -0.5821520841681407, 
           0.4914277164201799, -0.7548235572061532, -0.16274887259884108`, 
           0.11833666301036272`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, 4}, {12, -8}, {5, -9}, {6, 7}, {
            8, 9}, {10, 11}, {-2, -10}, {-3, -11}, {-4, -12}, {-5, -13}, {-6, 
            13}, {-7, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 
            1}], "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{26, 63, 33, 17, 15, 23, 15, 55, 38, 13, 6, 8, 
            18, 8, 71, 66, 65, 64, 74, 60, 47, 28, 37, 47}], 
          "NominalSplits" -> {}, 
          "NumericalThresholds" -> {0.03188206163183532, 
           0.5689161030361412, -0.7819408477968874, -0.4036407774362707, \
-0.3639569100241551, -0.750062373858448, 
           0.023945748096377895`, -0.11736247740787864`, -0.6425233506287071, \
-0.6182969248080203, -0.6964936125839278, -0.9399150544350698, 
           0.03506821399700344, -0.2108133757637829, 
           0.08376398422039488, -0.18834996759882405`, -0.5511386951352613, \
-0.3754471484663293, -0.7216389651089097, -0.6789179187842809, 
           0.048584669145720016`, 0.036650777711912, 
           0.06323983247968168, -0.24852616344432232`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {4, 5}, {17, 18}, {-1, 
            6}, {-2, -16}, {7, 8}, {9, 10}, {14, -17}, {-3, 11}, {-4, 
            13}, {-5, 12}, {-6, -18}, {-7, -19}, {15, 
            16}, {-8, -20}, {-9, -21}, {-10, 19}, {-11, 20}, {-12, -22}, {-13,
             21}, {22, -23}, {-14, 23}, {24, -24}, {-15, -25}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 
            2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1}], "RootIndex" -> 1, 
          "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{15, 16, 23, 68, 59, 50, 73, 70, 25, 11, 38, 
            31, 4, 40, 6, 18, 7, 66}], "NominalSplits" -> {}, 
          "NumericalThresholds" -> {-0.17412045102883722`, \
-0.6493618593070938, -0.750062373858448, -0.19353252014240296`, \
-0.12099337903508456`, -0.14685803202314518`, -0.19195352687634704`, 
           0.4914281493766359, -0.0761784936909049, -0.3368474977350555, \
-0.6425233898736504, 
           0.19671316152132068`, -0.09335452387377396, -0.09538586716002073, \
-0.6964943924718083, 0.03506832088933082, 
           0.17635002708041903`, -0.4709234480782505}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {4, 5}, {-3, 6}, {-4, 18}, {
            7, -13}, {8, 9}, {-5, -14}, {10, 11}, {-6, 12}, {-7, 15}, {-8, 
            13}, {14, -15}, {-9, -16}, {-10, 16}, {
            17, -17}, {-11, -18}, {-12, -19}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 
            2, 1, 1, 1, 1, 1}], "RootIndex" -> 1, "NominalDimension" -> 0|>]},
       "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|"Info" -> <|"Weight" -> CompressedData["
1:eJxTTMoPSmVkYGDwYoCBD/aT1XxnmWReGqVHaYpoAN6V9GI=
            "], "Type" -> "NumericalVector"|>, "Key" -> 
         "(f4(f1f2f3f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22))", 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], 
      "OOBConfusionMatrix" -> {{0.8611820417504887, 0.1478164834483862}, {
       0.1388179582495112, 0.8521835165516138}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 3.7375985810522794`|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> 74^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "Default", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`UnknownType, TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|
        "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], <||>], "InputDimension" -> 74, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"flat"}, "ID" -> 
           6404275688804442599|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"smooth"}, "ID" -> 
           4575732249387628280|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"red"}, "ID" -> 
           3658202952684178320|>, 
         "f4" -> <|
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {False}, "ID" -> 
           3307598117108330234|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"spicy"}, "ID" -> 
           7987930925393733938|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"free"}, "ID" -> 
           2832356403945983456|>, 
         "f7" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"close"}, "ID" -> 
           5531436025408857606|>, 
         "f8" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"narrow"}, "ID" -> 
           5486659214035290257|>, 
         "f9" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"buff"}, "ID" -> 
           8791712813790416916|>, 
         "f10" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"tapering"}, "ID" -> 
           6525974491541512302|>, 
         "f11" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"bulbous"}, "ID" -> 
           6445599732101226653|>, 
         "f12" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"smooth"}, "ID" -> 
           3234593877005704202|>, 
         "f13" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"silky"}, "ID" -> 
           1373831526003874118|>, 
         "f14" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           8361547209790958849|>, 
         "f15" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           5107351153124021432|>, 
         "f16" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"partial"}, "ID" -> 
           408902716829814960|>, 
         "f17" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           8286167595712173953|>, 
         "f18" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"one"}, "ID" -> 
           4602950353885572365|>, 
         "f19" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"evanescent"}, 
           "ID" -> 9098098453227995695|>, 
         "f20" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"white"}, "ID" -> 
           1579092101029993977|>, 
         "f21" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"several"}, "ID" -> 
           5191366365068814304|>, 
         "f22" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"woods"}, "ID" -> 
           5385840843282464146|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 2.554961, 
      "MaxTrainingMemory" -> 87976320, "DataMemory" -> 5732496, 
      "FunctionMemory" -> 486360, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 8, 10, 22, 1, 36.088668`8.309945832280784}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.932330496099436*^9},
 CellLabel->"Out[29]=",
 CellID->846428903,ExpressionUUID->"47ea79cd-09b3-4378-a705-490e8cd44d39"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5. Obtain accuracies after shuffling.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384660046543*^9}, 3.661480797347598*^9},
 CellID->185913939,ExpressionUUID->"93561c42-d442-42c2-a410-745953589cd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accs", " ", "=", " ", 
  RowBox[{"AccuracyByVariableShuffling", "[", 
   RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "varNames"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.6603846897457857`*^9}, {3.6614779546264153`*^9, 
  3.6614779549744463`*^9}},
 CellLabel->"In[30]:=",
 CellID->66866388,ExpressionUUID->"30660acf-6b32-4a1c-93c9-46068875d164"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"cap-shape\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"cap-surface\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"cap-color\"\>", "\[Rule]", "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"bruises?\"\>", "\[Rule]", "0.9991796554552912`"}], ",", 
   RowBox[{"\<\"odor\"\>", "\[Rule]", "0.7830188679245284`"}], ",", 
   RowBox[{"\<\"gill-attachment\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"gill-spacing\"\>", "\[Rule]", "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"gill-size\"\>", "\[Rule]", "0.9979491386382281`"}], ",", 
   RowBox[{"\<\"gill-color\"\>", "\[Rule]", "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"stalk-shape\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"stalk-root\"\>", "\[Rule]", "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"stalk-surface-above-ring\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"stalk-surface-below-ring\"\>", "\[Rule]", 
    "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"stalk-color-above-ring\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"stalk-color-below-ring\"\>", "\[Rule]", 
    "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"veil-type\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"veil-color\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"ring-number\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"ring-type\"\>", "\[Rule]", "0.9995898277276456`"}], ",", 
   RowBox[{"\<\"spore-print-color\"\>", "\[Rule]", "0.9823625922887613`"}], 
   ",", 
   RowBox[{"\<\"population\"\>", "\[Rule]", "0.9991796554552912`"}], ",", 
   RowBox[{"\<\"habitat\"\>", "\[Rule]", "1.`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330506429986*^9},
 CellLabel->"Out[30]=",
 CellID->1920888698,ExpressionUUID->"e4c73886-8b54-456d-a7c4-19b16ed87a6c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6. Tabulate the results.", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.6603846715328293`*^9}, 3.6614808011056843`*^9},
 CellID->1672122580,ExpressionUUID->"69deff9a-dfe0-4b56-ab25-c9a9c200e0e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"Grid", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"Prepend", "[", "\n", "      ", 
      RowBox[{
       RowBox[{"List", " ", "@@@", " ", 
        RowBox[{"Normal", "[", 
         RowBox[{"accs", "/", 
          RowBox[{"First", "[", "accs", "]"}]}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", " ", "Bold", ",", " ", "Blue", ",", " ", 
           RowBox[{"FontFamily", " ", "->", " ", "\"\<Times\>\""}]}], "]"}], 
         " ", "&"}], " ", "/@", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<shuffled variable\>\"", ",", " ", "\"\<accuracy ratio\>\""}], 
         "}"}]}]}], "]"}], ",", "\n", "    ", 
     RowBox[{"Alignment", " ", "->", " ", "Left"}], ",", " ", 
     RowBox[{"Dividers", " ", "->", " ", "All"}]}], "]"}], "\n"}]}]], "Input",\

 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.6603846863983*^9}},
 CellLabel->"In[31]:=",
 CellID->1393197418,ExpressionUUID->"5fd73fdc-ce72-4c5d-b243-c7dbb2b00c33"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"shuffled variable\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["\<\"accuracy ratio\"\>",
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontFamily->"Times",
      FontWeight->Bold,
      FontColor->RGBColor[0, 0, 1]]},
    {"None", "1.`"},
    {"\<\"cap-shape\"\>", "1.`"},
    {"\<\"cap-surface\"\>", "1.`"},
    {"\<\"cap-color\"\>", "0.9995898277276456`"},
    {"\<\"bruises?\"\>", "0.9991796554552912`"},
    {"\<\"odor\"\>", "0.7830188679245284`"},
    {"\<\"gill-attachment\"\>", "1.`"},
    {"\<\"gill-spacing\"\>", "0.9995898277276456`"},
    {"\<\"gill-size\"\>", "0.9979491386382281`"},
    {"\<\"gill-color\"\>", "0.9995898277276456`"},
    {"\<\"stalk-shape\"\>", "1.`"},
    {"\<\"stalk-root\"\>", "0.9995898277276456`"},
    {"\<\"stalk-surface-above-ring\"\>", "1.`"},
    {"\<\"stalk-surface-below-ring\"\>", "0.9995898277276456`"},
    {"\<\"stalk-color-above-ring\"\>", "1.`"},
    {"\<\"stalk-color-below-ring\"\>", "0.9995898277276456`"},
    {"\<\"veil-type\"\>", "1.`"},
    {"\<\"veil-color\"\>", "1.`"},
    {"\<\"ring-number\"\>", "1.`"},
    {"\<\"ring-type\"\>", "0.9995898277276456`"},
    {"\<\"spore-print-color\"\>", "0.9823625922887613`"},
    {"\<\"population\"\>", "0.9991796554552912`"},
    {"\<\"habitat\"\>", "1.`"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.9323305064562597`*^9},
 CellLabel->"Out[31]=",
 CellID->1254681935,ExpressionUUID->"7b56274c-95a2-420e-a8b4-2ed2a5145377"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
7. Further confirmation of the found variable importance can be done using \
the mosaic plots.
    Looking at the plot we can see why \[OpenCurlyDoubleQuote]odor\
\[CloseCurlyDoubleQuote] is so decisive -- the odor values for \
\[OpenCurlyDoubleQuote]poisonous\[OpenCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]edible\[CloseCurlyDoubleQuote] intersect very little.\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384702356645*^9}, {3.661478747015662*^9, 
   3.661478835597768*^9}, 3.6614808045369377`*^9, 3.661481476231979*^9},
 CellID->1740514500,ExpressionUUID->"8fd339c5-e87f-4c4d-9a74-e5d3a86ad519"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{"Flatten", " ", "/@", " ", 
     RowBox[{"(", 
      RowBox[{"List", " ", "@@@", " ", "trainingSet"}], ")"}]}], ")"}]}], 
  ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{"MosaicPlot", "[", 
   RowBox[{
    RowBox[{"t", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", 
       RowBox[{"{", 
        RowBox[{"5", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"\"\<FirstAxis\>\"", "\[Rule]", "\"\<Top\>\""}], ",", " ", 
    RowBox[{"\"\<LabelRotation\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0.5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"ColorRules", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"2", " ", "->", " ", 
       RowBox[{"ColorData", "[", 
        RowBox[{"7", ",", " ", "\"\<ColorList\>\""}], "]"}]}], "}"}]}], ",", 
    RowBox[{"ImageSize", "->", "Medium"}]}], " ", "]"}]}]}], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
  3.6603846482451572`*^9, 3.660384704280954*^9}, {3.661477973086392*^9, 
  3.6614779835260153`*^9}, {3.661478026018877*^9, 3.6614780839436007`*^9}, {
  3.661478205589163*^9, 3.661478315073452*^9}, {3.661485636578145*^9, 
  3.6614856603806953`*^9}, {3.93232828086027*^9, 3.9323282823755417`*^9}, {
  3.9323301996236963`*^9, 3.932330200513155*^9}},
 CellLabel->"In[32]:=",
 CellID->1952445713,ExpressionUUID->"4f48dd25-510b-4bc4-87e7-e5816a32b13e"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0., 0.}, {0.04166021807949349, 0.9890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], 
            "0.049595497713682726`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"almond\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.049595497713682726`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "1.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 
           0.049595497713682726`}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.049595497713682726`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0., 0.9990109890109892}, {0.04166021807949349, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], 
            "0.049595497713682726`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"almond\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 
           0.049595497713682726`}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.061660218079493484, 0.}, {0.1018431234611326, 0.9890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], 
            "0.04783679212099894`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"anise\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.04783679212099894`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "1.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 0.04783679212099894}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.04783679212099894}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.061660218079493484, 0.9990109890109892}, {0.1018431234611326, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], 
            "0.04783679212099894`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"anise\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 0.04783679212099894}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.1218431234611326, 0.}, {0.14223003869152304, 0.0009890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            "0.02427013717903623`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 
           0.02427013717903623}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.1218431234611326, 0.01098901098901099}, {0.14223003869152304, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            "0.02427013717903623`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.02427013717903623`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "1.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 
           0.02427013717903623}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.02427013717903623}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.16223003869152303, 0.}, {0.22353851565247976, 0.0009890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], 
            "0.07298628209637707`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 0.07298628209637707}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.16223003869152303, 0.01098901098901099}, {0.22353851565247976, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], 
            "0.07298628209637707`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.07298628209637707`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "1.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 0.07298628209637707}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.07298628209637707}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.24353851565247975, 0.}, {0.46676046429827645, 0.0009890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], 
            "0.2657404150545199`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"foul\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 0.2657404150545199}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.24353851565247975, 0.01098901098901099}, {0.46676046429827645, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], 
            "0.2657404150545199`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"foul\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.2657404150545199`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "1.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 0.2657404150545199}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.2657404150545199}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, 
    {GrayLevel[0.7], 
     TagBox[
      TooltipBox[RectangleBox[{0.48676046429827646, 0}, {0.49030601477312696, 1}],
       TagBox[
        GridBox[{{
           StyleBox["\"condition\"", 
            RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
           
           StyleBox["\"event\"", 
            RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
           
           StyleBox["\"probability\"", 
            RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
            False]}, {"\"\"", 
           TagBox[
            FormBox[
             RowBox[{"\"musty\""}], TraditionalForm], DisplayForm], 
           "0.004220893422441084`"}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
         GridBoxDividers -> {
          "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
      Annotation[#, 
       Grid[{{
          Style["condition", 
           RGBColor[0, 0, 1], FontFamily -> "Times"], 
          Style["event", 
           RGBColor[0, 0, 1], FontFamily -> "Times"], 
          Style["probability", 
           RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
          DisplayForm[
           FormBox[
            RowBox[{"\"musty\""}], TraditionalForm]], 0.004220893422441084}}, 
        Alignment -> Left, Dividers -> {None, {False, True, False}}], 
       "Tooltip"]& ]}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.510306014773127, 0.}, {0.875349982412944, 0.9579481991096722}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            "0.4345761519521632`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"none\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.42050650721069294`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.9676244435451234`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 0.4345761519521632}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.42050650721069294`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.9676244435451234}}, 
         Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.510306014773127, 0.9679481991096722}, {0.875349982412944, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            "0.4345761519521632`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"none\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.014069644741470277`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.03237555645487657`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 0.4345761519521632}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.014069644741470277`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.03237555645487657}}, Alignment -> Left, 
         Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.8953499824129441, 0.}, {0.9209074920858248, 0.0009890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            "0.030425606753429476`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 
           0.030425606753429476`}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.8953499824129441, 0.01098901098901099}, {0.9209074920858248, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            "0.030425606753429476`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.030425606753429476`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "1.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 
           0.030425606753429476`}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.030425606753429476`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7568627450980392, 0.7058823529411765, 0.5764705882352941], 
      TagBox[
       TooltipBox[RectangleBox[{0.9409074920858248, 0.}, {1., 0.0009890109890109892}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], 
            "0.07034822370735139`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\"", "\[Intersection]", "\"edible\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 0.07034822370735139}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\"", "\[Intersection]", "\"edible\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.9409074920858248, 0.01098901098901099}, {1., 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], 
            "0.07034822370735139`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\"", "\[Intersection]", "\"poisonous\""}], 
              TraditionalForm], DisplayForm], "0.07034822370735139`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "1.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 0.07034822370735139}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\"", "\[Intersection]", "\"poisonous\""}], 
             TraditionalForm]], 0.07034822370735139}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 1.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}}, 
   {GrayLevel[
    0], {{InsetBox["\<\"almond\"\>", {0.020830109039746744, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"anise\"\>", {0.08175167077031303, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"creosote\"\>", {0.13203658107632782, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"fishy\"\>", {0.1928842771720014, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"foul\"\>", {0.3551494899753781, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"musty\"\>", {0.4885332395357017, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"none\"\>", {0.6928279985930355, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"pungent\"\>", {0.9081287372493845, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"spicy\"\>", {0.9704537460429123, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}]}, {
      InsetBox["\<\"edible\"\>", {1, 0.0004945054945054946}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"poisonous\"\>", {1, 0.5054945054945055}, NCache[
       ImageScaled[{Rational[1, 2], Rational[3, 2]}], 
        ImageScaled[{0.5, 1.5}]], Automatic, {0, 1}]}}, {}}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{3.9323305066802673`*^9},
 CellLabel->"Out[33]=",
 CellID->1297351652,ExpressionUUID->"aa354301-e794-4162-a060-bd081fbb854a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here is a mosaic plot showing the conditional probabilities from a different \
direction.\
\>", "Text",
 CellChangeTimes->{{3.6614814900362587`*^9, 3.6614815321866703`*^9}},
 CellID->1197495207,ExpressionUUID->"0f2a56d1-f413-4ffe-9b75-be49734b6a79"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"t", " ", "=", " ", 
   RowBox[{"(", 
    RowBox[{"Flatten", " ", "/@", " ", 
     RowBox[{"(", 
      RowBox[{"List", " ", "@@@", " ", "trainingSet"}], ")"}]}], ")"}]}], 
  ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{"MosaicPlot", "[", 
   RowBox[{
    RowBox[{"t", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "5"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"\"\<FirstAxis\>\"", "\[Rule]", "\"\<Left\>\""}], ",", " ", 
    RowBox[{"\"\<LabelRotation\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0.5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"ColorRules", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"2", "->", " ", 
       RowBox[{"ColorData", "[", 
        RowBox[{"7", ",", " ", "\"\<ColorList\>\""}], "]"}]}], "}"}]}], " ", 
    ",", 
    RowBox[{"ImageSize", "->", "Medium"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.661478899632202*^9, 3.6614789583699837`*^9}, {
   3.932328263082938*^9, 3.932328268348565*^9}, 3.932330205675995*^9},
 CellLabel->"In[34]:=",
 CellID->85204365,ExpressionUUID->"85135f28-442a-4420-b72c-41059ff37350"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.7529411764705882, 0.4836601307189542, 0.4657952069716776], 
      TagBox[
       TooltipBox[RectangleBox[{0., 0.}, {0.08756965844997926, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"almond\""}], 
              TraditionalForm], DisplayForm], "0.049595497713682726`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], 
            "0.09575551782682512`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"almond\""}], 
             TraditionalForm]], 0.049595497713682726`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 0.09575551782682512}},
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.4958605664488017, 0.3416122004357298, 0.29586056644880177`], 
      
      TagBox[
       TooltipBox[RectangleBox[{0.09756965844997925, 0.}, {0.18203400986272525, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"anise\""}], 
              TraditionalForm], DisplayForm], "0.04783679212099894`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], 
            "0.09235993208828523`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"anise\""}], 
             TraditionalForm]], 0.04783679212099894}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 0.09235993208828523}}, 
         Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.6313725490196078, 0.5372549019607844, 0.469281045751634], 
      TagBox[
       TooltipBox[RectangleBox[{0.19203400986272523, 0.}, {0.19294852278519042, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"creosote\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            "0.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"creosote\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[
      0.49542483660130715`, 0.4466230936819172, 0.36732026143790847`], 
      TagBox[
       TooltipBox[RectangleBox[{0.20294852278519043, 0.}, {0.20386303570765565, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"fishy\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], "0.`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"fishy\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.7241830065359477, 0.7167755991285403, 0.5699346405228758], 
      TagBox[
       TooltipBox[RectangleBox[{0.21386303570765566, 0.}, {0.21477754863012086, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"foul\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], "0.`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"foul\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 0.}}, Alignment -> Left,
          Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.538562091503268, 0.6261437908496732, 0.5254901960784314], 
      TagBox[
       TooltipBox[RectangleBox[{0.22477754863012084, 0.}, {0.2256920615525861, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"musty\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"musty\""}], TraditionalForm], DisplayForm], "0.`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"musty\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"musty\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.547276688453159, 0.6191721132897603, 0.6339869281045751], 
      TagBox[
       TooltipBox[RectangleBox[{0.23569206155258607, 0.}, {0.9781709741550699, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"none\""}], 
              TraditionalForm], DisplayForm], "0.42050650721069294`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            "0.8118845500848897`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"none\""}], 
             TraditionalForm]], 0.42050650721069294`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 0.8118845500848897}}, 
         Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.36688453159041395`, 0.3769063180827887, 0.3847494553376906], 
      
      TagBox[
       TooltipBox[RectangleBox[{0.9881709741550699, 0.}, {0.989085487077535, 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"pungent\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            "0.`"}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
          False, GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"pungent\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.9990854870775349, 0.}, {1., 0.5075800211044671}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            "0.5179387970453746`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"edible\"", "\[Intersection]", "\"spicy\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"edible\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], "0.`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 0.5179387970453746}, {
          "", 
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\"", "\[Intersection]", "\"spicy\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"edible\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}}, {
     {RGBColor[0.7529411764705882, 0.4836601307189542, 0.4657952069716776], 
      TagBox[
       TooltipBox[RectangleBox[{0., 0.5275800211044671}, {0.0009181636726546907, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"almond\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"almond\""}], TraditionalForm], DisplayForm], "0.`"}},
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"almond\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"almond\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.4958605664488017, 0.3416122004357298, 0.29586056644880177`], 
      
      TagBox[
       TooltipBox[RectangleBox[{0.01091816367265469, 0.5275800211044671}, {0.011836327345309382, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"anise\""}], 
              TraditionalForm], DisplayForm], "0.`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"anise\""}], TraditionalForm], DisplayForm], "0.`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"anise\""}], 
             TraditionalForm]], 0.}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"anise\""}], TraditionalForm]], 0.}}, Alignment -> 
         Left, Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.6313725490196078, 0.5372549019607844, 0.469281045751634], 
      TagBox[
       TooltipBox[RectangleBox[{0.02183632734530938, 0.5275800211044671}, {0.06806273625678232, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"creosote\""}], 
              TraditionalForm], DisplayForm], "0.024270137179036227`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"creosote\""}], TraditionalForm], DisplayForm], 
            "0.05034658883619117`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"creosote\""}], 
             TraditionalForm]], 0.024270137179036227`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"creosote\""}], TraditionalForm]], 
           0.05034658883619117}}, Alignment -> Left, 
         Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[
      0.49542483660130715`, 0.4466230936819172, 0.36732026143790847`], 
      TagBox[
       TooltipBox[RectangleBox[{0.07806273625678231, 0.5275800211044671}, {0.2170769369688205, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"fishy\""}], 
              TraditionalForm], DisplayForm], "0.07298628209637707`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"fishy\""}], TraditionalForm], DisplayForm], 
            "0.15140459686245897`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"fishy\""}], 
             TraditionalForm]], 0.07298628209637707}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"fishy\""}], TraditionalForm]], 0.15140459686245897`}},
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.7241830065359477, 0.7167755991285403, 0.5699346405228758], 
      TagBox[
       TooltipBox[RectangleBox[{0.2270769369688205, 0.5275800211044671}, {0.7332226171516872, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"foul\""}], 
              TraditionalForm], DisplayForm], "0.2657404150545199`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"foul\""}], TraditionalForm], DisplayForm], 
            "0.5512586647209049`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"foul\""}], 
             TraditionalForm]], 0.2657404150545199}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"foul\""}], TraditionalForm]], 0.5512586647209049}}, 
         Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.538562091503268, 0.6261437908496732, 0.5254901960784314], 
      TagBox[
       TooltipBox[RectangleBox[{0.7432226171516872, 0.5275800211044671}, {0.7512619926145522, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"musty\""}], 
              TraditionalForm], DisplayForm], "0.004220893422441083`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"musty\""}], TraditionalForm], DisplayForm], 
            "0.008755928493250638`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"musty\""}], 
             TraditionalForm]], 0.004220893422441083}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"musty\""}], TraditionalForm]], 0.008755928493250638}},
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.547276688453159, 0.6191721132897603, 0.6339869281045751], 
      TagBox[
       TooltipBox[RectangleBox[{0.7612619926145521, 0.5275800211044671}, {0.7880599108241018, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"none\""}], 
              TraditionalForm], DisplayForm], "0.014069644741470278`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"none\""}], TraditionalForm], DisplayForm], 
            "0.029186428310835465`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"none\""}], 
             TraditionalForm]], 0.014069644741470278`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"none\""}], TraditionalForm]], 0.029186428310835465`}},
          Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}, 
     {RGBColor[0.36688453159041395`, 0.3769063180827887, 0.3847494553376906], 
      
      TagBox[
       TooltipBox[RectangleBox[{0.7980599108241018, 0.5275800211044671}, {0.8560104089522524, 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"pungent\""}], 
              TraditionalForm], DisplayForm], "0.030425606753429476`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"pungent\""}], TraditionalForm], DisplayForm], 
            "0.06311565122218168`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"pungent\""}], 
             TraditionalForm]], 0.030425606753429476`}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"pungent\""}], TraditionalForm]], 
           0.06311565122218168}}, Alignment -> Left, 
         Dividers -> {None, {False, True, False}}], "Tooltip"]& ]}, 
     {RGBColor[0.2627450980392157, 0.3411764705882353, 0.4470588235294118], 
      TagBox[
       TooltipBox[RectangleBox[{0.8660104089522525, 0.5275800211044671}, {1., 1.}],
        TagBox[
         GridBox[{{
            StyleBox["\"condition\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"event\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> False], 
            StyleBox["\"probability\"", 
             RGBColor[0, 0, 1], FontFamily -> "Times", StripOnInput -> 
             False]}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            "0.4820612029546254`"}, {"\"\"", 
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\"", "\[Intersection]", "\"spicy\""}], 
              TraditionalForm], DisplayForm], "0.07034822370735139`"}, {
            TagBox[
             FormBox[
              RowBox[{"\"poisonous\""}], TraditionalForm], DisplayForm], 
            TagBox[
             FormBox[
              RowBox[{"\"spicy\""}], TraditionalForm], DisplayForm], 
            "0.1459321415541773`"}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
          GridBoxDividers -> {
           "Columns" -> {{None}}, "Rows" -> {False, True, False}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]],
       Annotation[#, 
        Grid[{{
           Style["condition", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["event", 
            RGBColor[0, 0, 1], FontFamily -> "Times"], 
           Style["probability", 
            RGBColor[0, 0, 1], FontFamily -> "Times"]}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           0.4820612029546254}, {"", 
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\"", "\[Intersection]", "\"spicy\""}], 
             TraditionalForm]], 0.07034822370735139}, {
           DisplayForm[
            FormBox[
             RowBox[{"\"poisonous\""}], TraditionalForm]], 
           DisplayForm[
            FormBox[
             RowBox[{"\"spicy\""}], TraditionalForm]], 0.1459321415541773}}, 
         Alignment -> Left, Dividers -> {None, {False, True, False}}], 
        "Tooltip"]& ]}}}, 
   {GrayLevel[
    0], {{InsetBox["\<\"edible\"\>", {0, 0.25379001055223355}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {0, 1}], 
      InsetBox["\<\"poisonous\"\>", {0, 0.7637900105522335}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {0, 1}]}, {
      InsetBox["\<\"almond\"\>", {0.00045908183632734534, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"anise\"\>", {0.011377245508982036, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"creosote\"\>", {0.04494953180104585, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"fishy\"\>", {0.1475698366128014, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"foul\"\>", {0.48014977706025386, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"musty\"\>", {0.7472423048831197, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"none\"\>", {0.7746609517193269, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"pungent\"\>", {0.8270351598881771, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}], 
      InsetBox["\<\"spicy\"\>", {0.9330052044761262, 1}, NCache[
       ImageScaled[{Rational[1, 2], Rational[-1, 2]}], 
        ImageScaled[{0.5, -0.5}]], Automatic, {1, 0.5}]}}, {}}},
  ImageSize->Medium]], "Output",
 CellChangeTimes->{3.9323305069094677`*^9},
 CellLabel->"Out[35]=",
 CellID->1187747173,ExpressionUUID->"054c0a71-b308-430f-b074-1b6396597b3c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
5a. In order to use F-scores instead of overall accuracy the desired class \
labels are specified with
    the option \"ClassLabels\".\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.660384712470241*^9}, {3.661477836956293*^9, 3.6614778378738422`*^9}, 
   3.661480808665168*^9, 3.9323282226729*^9},
 CellID->1529530214,ExpressionUUID->"d677119a-4c9b-492c-8081-4c6602a6920f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"accs", " ", "=", " ", 
   RowBox[{"AccuracyByVariableShuffling", "[", 
    RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "varNames", ",", " ", 
     RowBox[{"\"\<ClassLabels\>\"", " ", "->", " ", "classLabels"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.6603847570770683`*^9}, {3.6614785190254593`*^9, 3.661478519463778*^9}, 
   3.932328221385548*^9},
 CellLabel->"In[36]:=",
 CellID->1435052108,ExpressionUUID->"8aef9abb-3a61-44df-a0cf-d16f11fb783f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"cap-shape\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"cap-surface\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"cap-color\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9992088607594937`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"bruises?\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9992088607594937`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"odor\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.816793893129771`", ",", "0.7617156473391579`"}], "}"}]}], ",", 
   RowBox[{"\<\"gill-attachment\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"gill-spacing\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9984189723320158`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"gill-size\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9960567823343849`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"gill-color\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-shape\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-root\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-surface-above-ring\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-surface-below-ring\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-color-above-ring\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"stalk-color-below-ring\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9992088607594937`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"veil-type\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"veil-color\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"ring-number\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"ring-type\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9992088607594937`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"spore-print-color\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9809372517871324`", ",", "0.9762510602205259`"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"population\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.9984189723320158`", ",", "1.`"}], "}"}]}], ",", 
   RowBox[{"\<\"habitat\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1.`", ",", "1.`"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330516716385*^9},
 CellLabel->"Out[36]=",
 CellID->1606237746,ExpressionUUID->"7457c5ae-029e-4b61-9491-01eb46de25d8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
5b. Here is another example that uses the class label with the smallest \
F-score.
    (Probably the most important since it is most misclassified).\
\>", "Text",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.660384720594095*^9}, 3.6614808103758087`*^9, 3.932327612913493*^9},
 CellID->336098632,ExpressionUUID->"1108a780-4ef1-4efc-a726-7ee0c7fd569b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accs", " ", "=", " ", 
  RowBox[{"AccuracyByVariableShuffling", "[", 
   RowBox[{
   "clFunc", ",", " ", "testSet", ",", " ", "varNames", ",", "\n", 
    "                                     ", 
    RowBox[{
     RowBox[{
      RowBox[{"\"\<ClassLabels\>\"", " ", "->", " ", 
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"Min", "[", "#", "]"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}]}], " ", 
      "&"}], "@", "\n", 
     "                                                                ", 
     RowBox[{"ClassifierMeasurements", "[", 
      RowBox[{"clFunc", ",", " ", "testSet", ",", " ", "\"\<FScore\>\""}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6603845870882998`*^9, 3.660384612683689*^9}, {
   3.6603846482451572`*^9, 3.660384676325376*^9}, {3.660384708512055*^9, 
   3.6603847548836718`*^9}, {3.66147852334604*^9, 3.661478523727344*^9}, 
   3.9323282181028852`*^9},
 CellLabel->"In[37]:=",
 CellID->927716414,ExpressionUUID->"e112534a-82f4-4242-ad01-8e2dd6dc66e4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"cap-shape\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"cap-surface\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"cap-color\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"bruises?\"\>", "\[Rule]", 
    RowBox[{"{", "0.9992088607594937`", "}"}]}], ",", 
   RowBox[{"\<\"odor\"\>", "\[Rule]", 
    RowBox[{"{", "0.8211169284467714`", "}"}]}], ",", 
   RowBox[{"\<\"gill-attachment\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"gill-spacing\"\>", "\[Rule]", 
    RowBox[{"{", "0.9984189723320158`", "}"}]}], ",", 
   RowBox[{"\<\"gill-size\"\>", "\[Rule]", 
    RowBox[{"{", "0.9968429360694554`", "}"}]}], ",", 
   RowBox[{"\<\"gill-color\"\>", "\[Rule]", 
    RowBox[{"{", "0.9992088607594937`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-shape\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-root\"\>", "\[Rule]", 
    RowBox[{"{", "0.9992088607594937`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-surface-above-ring\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-surface-below-ring\"\>", "\[Rule]", 
    RowBox[{"{", "0.9992088607594937`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-color-above-ring\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"stalk-color-below-ring\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"veil-type\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"veil-color\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"ring-number\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}], ",", 
   RowBox[{"\<\"ring-type\"\>", "\[Rule]", 
    RowBox[{"{", "0.9984189723320158`", "}"}]}], ",", 
   RowBox[{"\<\"spore-print-color\"\>", "\[Rule]", 
    RowBox[{"{", "0.9808459696727854`", "}"}]}], ",", 
   RowBox[{"\<\"population\"\>", "\[Rule]", 
    RowBox[{"{", "0.9984189723320158`", "}"}]}], ",", 
   RowBox[{"\<\"habitat\"\>", "\[Rule]", 
    RowBox[{"{", "1.`", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932330527238266*^9},
 CellLabel->"Out[37]=",
 CellID->20870585,ExpressionUUID->"e208695c-917c-4d26-8a22-24911fb12e36"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "5c. It is good idea to verify that we get the same results using different \
classifiers. Below is given code that computes the shuffled accuracies and \
returns the relative damage scores for a set of methods of ",
 StyleBox["Classify", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.660974679875415*^9, 3.660974817215042*^9}, 
   3.661386697093895*^9, 3.661386804010661*^9, 3.661479966539384*^9, 
   3.661480812962834*^9},
 CellID->261284131,ExpressionUUID->"753c5f2e-5903-469e-980d-a53cc80d2226"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mres", "=", 
   RowBox[{"Association", "@", 
    RowBox[{"Map", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "clMethod", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"cf", "=", 
          RowBox[{"Classify", "[", 
           RowBox[{"trainingSet", ",", 
            RowBox[{"Method", "\[Rule]", "clMethod"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"accRes", "=", 
          RowBox[{"AccuracyByVariableShuffling", "[", 
           RowBox[{"cf", ",", "testSet", ",", "varNames"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"clMethod", "->", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"accRes", "[", "None", "]"}], "-", 
             RowBox[{"Rest", "[", "accRes", "]"}]}], ")"}], "/", 
           RowBox[{"accRes", "[", "None", "]"}]}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<LogisticRegression\>\"", ",", "\"\<NearestNeighbors\>\"", ",", 
        "\"\<RandomForest\>\"", ",", "\"\<SupportVectorMachine\>\""}], 
       "}"}]}], "]"}]}]}], " ", ";"}], "\n", 
 RowBox[{"Dataset", "[", "mres", "]"}]}], "Input",
 CellChangeTimes->{{3.66078295610428*^9, 3.660782975418014*^9}, {
   3.660783030312707*^9, 3.660783044990341*^9}, {3.6609499064605494`*^9, 
   3.660949911443185*^9}, {3.660961430613764*^9, 3.660961575380033*^9}, {
   3.6609616093212957`*^9, 3.660961688365486*^9}, {3.660961803150673*^9, 
   3.660961825704174*^9}, {3.660961857024324*^9, 3.660961862008582*^9}, {
   3.660961936429467*^9, 3.660961938047061*^9}, {3.660974841686441*^9, 
   3.660974866277235*^9}, {3.661000087193057*^9, 3.6610001133814983`*^9}, {
   3.661000205546337*^9, 3.6610002274459143`*^9}, {3.661479977184216*^9, 
   3.6614799989717207`*^9}, {3.6614801003234377`*^9, 3.661480102433003*^9}, {
   3.661480193563398*^9, 3.661480194608856*^9}, {3.661480313229581*^9, 
   3.6614803136008797`*^9}, {3.9323284019319696`*^9, 3.932328402378138*^9}, 
   3.932329929994317*^9},
 CellLabel->"In[38]:=",
 CellID->1945815249,ExpressionUUID->"9677cc11-db67-4bca-b134-c81106e6b86d"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "LogisticRegression" -> <|
        "cap-shape" -> 0., "cap-surface" -> 0., "cap-color" -> 
         0.0004105090311987007, "bruises?" -> 0.0016420361247946919`, "odor" -> 
         0.1301313628899836, "gill-attachment" -> 0., "gill-spacing" -> 
         0.016830870279146065`, "gill-size" -> 0.1732348111658456, 
         "gill-color" -> 0.0008210180623972904, "stalk-shape" -> 
         0.02791461412151065, "stalk-root" -> 0.05131362889983582, 
         "stalk-surface-above-ring" -> 0.0020525451559933925`, 
         "stalk-surface-below-ring" -> 0.002873563218390794, 
         "stalk-color-above-ring" -> 0.004105090311986785, 
         "stalk-color-below-ring" -> 0.008620689655172382, "veil-type" -> 0., 
         "veil-color" -> 0.006157635467980289, 
         "ring-number" -> -0.0004105090311987007, "ring-type" -> 
         0.03160919540229885, "spore-print-color" -> 0.03448275862068964, 
         "population" -> 0.002873563218390794, 
         "habitat" -> -0.0004105090311987007|>, 
       "NearestNeighbors" -> <|
        "cap-shape" -> 0., "cap-surface" -> 0., "cap-color" -> 0., "bruises?" -> 
         0.014778325123152672`, "odor" -> 0., "gill-attachment" -> 0., 
         "gill-spacing" -> 0.0008210180623972904, 
         "gill-size" -> -0.0008210180623974014, "gill-color" -> 0., 
         "stalk-shape" -> 0.05418719211822661, "stalk-root" -> 0., 
         "stalk-surface-above-ring" -> 0., "stalk-surface-below-ring" -> 
         0.0008210180623972904, "stalk-color-above-ring" -> 0., 
         "stalk-color-below-ring" -> 0.0008210180623972904, "veil-type" -> 0.,
          "veil-color" -> 0., "ring-number" -> 0., "ring-type" -> 0., 
         "spore-print-color" -> 0.001231527093595991, "population" -> 
         0.0004105090311987007, "habitat" -> 0.002873563218390794|>, 
       "RandomForest" -> <|
        "cap-shape" -> 0.0008203445447088065, "cap-surface" -> 0., 
         "cap-color" -> 0.0008203445447088065, "bruises?" -> 
         0.00041017227235440323`, "odor" -> 0.30844954881050046`, 
         "gill-attachment" -> 0., "gill-spacing" -> 0.0008203445447088065, 
         "gill-size" -> 0.0012305168170632097`, "gill-color" -> 0., 
         "stalk-shape" -> 0.0008203445447088065, "stalk-root" -> 
         0.00041017227235440323`, "stalk-surface-above-ring" -> 0., 
         "stalk-surface-below-ring" -> 0., "stalk-color-above-ring" -> 0., 
         "stalk-color-below-ring" -> 0., "veil-type" -> 0., "veil-color" -> 
         0., "ring-number" -> 0., "ring-type" -> 0.0008203445447088065, 
         "spore-print-color" -> 0.009844134536505345, "population" -> 0., 
         "habitat" -> 0.00041017227235440323`|>, 
       "SupportVectorMachine" -> <|
        "cap-shape" -> 0., "cap-surface" -> 0., "cap-color" -> 0., "bruises?" -> 
         0.013535684987694863`, "odor" -> 0.006972928630024633, 
         "gill-attachment" -> 0., "gill-spacing" -> 0.003281378178835115, 
         "gill-size" -> 0.10418375717801476`, "gill-color" -> 0., 
         "stalk-shape" -> 0.009023789991796538, "stalk-root" -> 
         0.008613617719442135, "stalk-surface-above-ring" -> 0., 
         "stalk-surface-below-ring" -> 0.00656275635767023, 
         "stalk-color-above-ring" -> 0., "stalk-color-below-ring" -> 0., 
         "veil-type" -> 0., "veil-color" -> 0., "ring-number" -> 0., 
         "ring-type" -> 0.003691550451189518, "spore-print-color" -> 
         0.004101722723543921, "population" -> 0., "habitat" -> 0.|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "cap-shape"} -> 
        1, {All, "cap-surface"} -> 1, {All, "cap-color"} -> 
        1, {All, "bruises?"} -> 1, {All, "odor"} -> 
        1, {All, "gill-attachment"} -> 1, {All, "gill-spacing"} -> 
        1, {All, "gill-size"} -> 1, {All, "gill-color"} -> 
        1, {All, "stalk-shape"} -> 1, {All, "stalk-root"} -> 
        1, {All, "stalk-surface-above-ring"} -> 
        1, {All, "stalk-surface-below-ring"} -> 
        1, {All, "stalk-color-above-ring"} -> 
        1, {All, "stalk-color-below-ring"} -> 1, {All, "veil-type"} -> 
        1, {All, "veil-color"} -> 1, {All, "ring-number"} -> 
        1, {All, "ring-type"} -> 1, {All, "spore-print-color"} -> 
        1, {All, "population"} -> 1, {All, "habitat"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "cap-shape" -> TypeSystem`PackageScope`AtomShape[60], 
             "cap-surface" -> TypeSystem`PackageScope`AtomShape[60], 
             "cap-color" -> TypeSystem`PackageScope`AtomShape[60], "bruises?" -> 
             TypeSystem`PackageScope`AtomShape[60], "odor" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-attachment" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-spacing" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-size" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-shape" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-root" -> 
             TypeSystem`PackageScope`AtomShape[60], 
             "stalk-surface-above-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], 
             "stalk-surface-below-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-color-above-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-color-below-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "veil-type" -> 
             TypeSystem`PackageScope`AtomShape[60], "veil-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "ring-number" -> 
             TypeSystem`PackageScope`AtomShape[60], "ring-type" -> 
             TypeSystem`PackageScope`AtomShape[60], "spore-print-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "population" -> 
             TypeSystem`PackageScope`AtomShape[60], "habitat" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 10, {All}]]], 4, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "cap-shape", "cap-surface", "cap-color", "bruises?", "odor", 
         "gill-attachment", "gill-spacing", "gill-size", "gill-color", 
         "stalk-shape", "stalk-root", "stalk-surface-above-ring", 
         "stalk-surface-below-ring", "stalk-color-above-ring", 
         "stalk-color-below-ring", "veil-type", "veil-color", "ring-number", 
         "ring-type", "spore-print-color", "population", "habitat"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 4], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "cap-shape"} -> 
        1, {All, "cap-surface"} -> 1, {All, "cap-color"} -> 
        1, {All, "bruises?"} -> 1, {All, "odor"} -> 
        1, {All, "gill-attachment"} -> 1, {All, "gill-spacing"} -> 
        1, {All, "gill-size"} -> 1, {All, "gill-color"} -> 
        1, {All, "stalk-shape"} -> 1, {All, "stalk-root"} -> 
        1, {All, "stalk-surface-above-ring"} -> 
        1, {All, "stalk-surface-below-ring"} -> 
        1, {All, "stalk-color-above-ring"} -> 
        1, {All, "stalk-color-below-ring"} -> 1, {All, "veil-type"} -> 
        1, {All, "veil-color"} -> 1, {All, "ring-number"} -> 
        1, {All, "ring-type"} -> 1, {All, "spore-print-color"} -> 
        1, {All, "population"} -> 1, {All, "habitat"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[224.00000000000003`], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[<|
            "cap-shape" -> TypeSystem`PackageScope`AtomShape[60], 
             "cap-surface" -> TypeSystem`PackageScope`AtomShape[60], 
             "cap-color" -> TypeSystem`PackageScope`AtomShape[60], "bruises?" -> 
             TypeSystem`PackageScope`AtomShape[60], "odor" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-attachment" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-spacing" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-size" -> 
             TypeSystem`PackageScope`AtomShape[60], "gill-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-shape" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-root" -> 
             TypeSystem`PackageScope`AtomShape[60], 
             "stalk-surface-above-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], 
             "stalk-surface-below-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-color-above-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "stalk-color-below-ring" -> 
             TypeSystem`PackageScope`AtomShape[60], "veil-type" -> 
             TypeSystem`PackageScope`AtomShape[60], "veil-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "ring-number" -> 
             TypeSystem`PackageScope`AtomShape[60], "ring-type" -> 
             TypeSystem`PackageScope`AtomShape[60], "spore-print-color" -> 
             TypeSystem`PackageScope`AtomShape[60], "population" -> 
             TypeSystem`PackageScope`AtomShape[60], "habitat" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 10, {All}]]], 4, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{
        "cap-shape", "cap-surface", "cap-color", "bruises?", "odor", 
         "gill-attachment", "gill-spacing", "gill-size", "gill-color", 
         "stalk-shape", "stalk-root", "stalk-surface-above-ring", 
         "stalk-surface-below-ring", "stalk-color-above-ring", 
         "stalk-color-below-ring", "veil-type", "veil-color", "ring-number", 
         "ring-type", "spore-print-color", "population", "habitat"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 4], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 4, "DataColumnCount" -> 
     22, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cap-shape", 
                  Style[
                  "cap-shape", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "cap-shape"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "cap-shape"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cap-surface", 
                  Style[
                  "cap-surface", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "cap-surface"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "cap-surface"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cap-color", 
                  Style[
                  "cap-color", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "cap-color"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "cap-color"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["bruises?", 
                  Style[
                  "bruises?", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "bruises?"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "bruises?"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["odor", 
                  Style[
                  "odor", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "odor"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "odor"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["gill-attachment", 
                  Style[
                  "gill-attachment", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "gill-attachment"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "gill-attachment"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["gill-spacing", 
                  Style[
                  "gill-spacing", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "gill-spacing"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "gill-spacing"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["gill-size", 
                  Style[
                  "gill-size", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "gill-size"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "gill-size"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["gill-color", 
                  Style[
                  "gill-color", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "gill-color"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "gill-color"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["stalk-shape", 
                  Style[
                  "stalk-shape", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "stalk-shape"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "stalk-shape"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LogisticRegression", 
                  Style[
                  "LogisticRegression", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["LogisticRegression"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["cap-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["cap-surface"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000410509"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["cap-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00164204"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["bruises?"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.130131"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["odor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["gill-attachment"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0168309"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["gill-spacing"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.173235"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["gill-size"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000821018"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["gill-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0279146"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["LogisticRegression"], 
                 Key["stalk-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["NearestNeighbors", 
                  Style[
                  "NearestNeighbors", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["NearestNeighbors"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["cap-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["cap-surface"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["cap-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0147783"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["bruises?"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["odor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["gill-attachment"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000821018"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["gill-spacing"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["-0.000821018"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["gill-size"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["gill-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0541872"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["NearestNeighbors"], 
                 Key["stalk-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RandomForest", 
                  Style[
                  "RandomForest", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["RandomForest"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000820345"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["cap-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["cap-surface"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000820345"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["cap-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000410172"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["bruises?"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.30845"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["odor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["gill-attachment"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000820345"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["gill-spacing"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00123052"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["gill-size"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["gill-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.000820345"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["RandomForest"], 
                 Key["stalk-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SupportVectorMachine", 
                  Style[
                  "SupportVectorMachine", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["SupportVectorMachine"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["cap-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["cap-surface"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["cap-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0135357"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["bruises?"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00697293"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["odor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["gill-attachment"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00328138"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["gill-spacing"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.104184"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["gill-size"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["gill-color"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.00902379"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["SupportVectorMachine"], 
                 Key["stalk-shape"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 22, 1], {1, 22 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 22, 1], {1, 22 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 22, 1], {1, 22 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 22, 1], {1, 22 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       1274.1110438368057`, {105.30746017456055`, 111.92122970581055`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      1274.1110438368057`, {105.30746017456055`, 111.92122970581055`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.932330581073455*^9},
 CellLabel->"Out[39]=",
 CellID->221886230,ExpressionUUID->"a4656d7d-acdc-4259-9853-5970ab003a8b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.661479008656425*^9, 3.661479010546084*^9}},
 CellID->327821551,ExpressionUUID->"536f1e3b-4e11-4bfd-bb27-2ce4377b7048"],

Cell[TextData[{
 "[1] Anton Antonov, ",
 ButtonBox["\[OpenCurlyDoubleQuote]Classification and association rules for \
census income data\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2014/03/30/\
classification-and-association-rules-for-census-income-data/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2014/03/30/classification-\
and-association-rules-for-census-income-data/"],
 ", (2014), ",
 ButtonBox["MathematicaForPrediction at WordPress.com",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com"], None},
  ButtonNote->"https://mathematicaforprediction.wordpress.com"],
 "."
}], "Text",
 CellChangeTimes->{{3.66147922765162*^9, 3.661479231190834*^9}, {
  3.9323299462514343`*^9, 3.932329958300096*^9}},
 CellID->1401253102,ExpressionUUID->"2299de7a-f371-45a0-9fa8-c3f0dcc4cd10"],

Cell[TextData[{
 "[2] Anton Antonov, ",
 ButtonBox["Variable importance determination by classifiers implementation \
in Mathematica",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"],
 ", (2015), source code at ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[", ",
  FontSlant->"Italic"],
 " ",
 ButtonBox["https://github.com/antononcube/MathematicaForPrediction",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 ", package ",
 ButtonBox["VariableImportanceByClassifiers.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
VariableImportanceByClassifiers.m"],
 "."
}], "Text",
 CellChangeTimes->{{3.661479287995727*^9, 3.661479298184881*^9}},
 CellID->1555212312,ExpressionUUID->"3399f0fa-6643-440e-b7d9-594f9b59e535"],

Cell[TextData[{
 "[3] Anton Antonov, ",
 ButtonBox["\[OpenCurlyDoubleQuote]Importance of variables investigation \
guide\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Importance-of-variables-investigation-guide.pdf"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
Documentation/Importance-of-variables-investigation-guide.pdf"],
 ", (2016),  ",
 ButtonBox["MathematicaForPrediction at GitHub",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction"], None},
  ButtonNote->"https://github.com/antononcube/MathematicaForPrediction"],
 StyleBox[".",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.6614796177124*^9, 3.661479620913443*^9}, {
  3.932329989251244*^9, 3.932329991551087*^9}},
 CellID->1429860147,ExpressionUUID->"e42f772c-760a-47b2-9215-0938f306d75f"],

Cell[TextData[{
 "[4] Anton Antonov, ",
 ButtonBox["MosaicPlot WL paclet",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MosaicPlot/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MosaicPlot/"],
 ", (2023), ",
 ButtonBox["Wolfram Language Paclet Repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/"], None},
  ButtonNote->"https://resources.wolframcloud.com/PacletRepository/"],
 "."
}], "Text",
 CellChangeTimes->{{3.661479242524207*^9, 3.661479245512258*^9}, {
  3.661479372249406*^9, 3.661479372663248*^9}, {3.932329995220978*^9, 
  3.932330094925992*^9}},
 CellID->1317480699,ExpressionUUID->"9dbd158d-40c4-4c6b-a788-f9beb7a36b49"],

Cell["\<\
[5] Leo Breiman et al., Classification and regression trees, Chapman & Hall, \
1984, ISBN-13: 978-0412048418.\
\>", "Text",
 CellChangeTimes->{{3.661479210899446*^9, 3.6614792148225107`*^9}, {
  3.661479374155905*^9, 3.6614793741897507`*^9}},
 CellID->194223876,ExpressionUUID->"b560fed3-f08e-4af1-8ff8-e78f3eeb6f7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "TutorialMoreAboutSection",
 CellChangeTimes->{{3.843042384656711*^9, 3.843042386024461*^9}},
 CellID->1977650342,ExpressionUUID->"f999bdb7-9e2d-4944-a189-5794aa8557d8"],

Cell["XXXX", "TutorialMoreAbout",
 CellID->1764893375,ExpressionUUID->"4399d349-de44-4e73-b4d0-e430bd656daf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Tech Notes", "RelatedTutorialsSection",
 CellID->1518821261,ExpressionUUID->"03b5da49-3bff-4ee1-9350-2cfc82c8fc00"],

Cell["XXXX", "RelatedTutorials",
 CellID->1838305385,ExpressionUUID->"573ba708-79bf-47dc-b0df-0dfa2c5ff263"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->551376306,ExpressionUUID->"478a1e25-31cd-439d-a4cb-75e53bdb7cfd"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"e7c00f0f-2b82-4d2f-a1bf-904b3375dbba"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"b5f265ea-9b48-45df-a3e4-06474ce18ca3"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "90a7b03d-87e6-4e9d-b23d-95e852e83051"]
}], "History",
 CellChangeTimes->{{3.932328492751402*^9, 3.9323284940773773`*^9}},
 CellID->589638137,ExpressionUUID->"884c6784-0448-4878-b74c-9a9e43fa67ed"],

Cell[CellGroupData[{

Cell["Categorization", "CategorizationSection",
 CellID->1558621301,ExpressionUUID->"caaa5999-b0e1-4b51-8531-f2b90d116d81"],

Cell["Tech Note", "Categorization",
 CellLabel->"Entity Type",
 CellID->742679801,ExpressionUUID->"a307e5b0-721e-45f7-aa31-c4d67384c9d7"],

Cell["AntonAntonov/VariableImportanceByClassifiers", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1044459043,ExpressionUUID->"bb1e6dcc-cab0-4b8e-931b-b5c018cdfbac"],

Cell["AntonAntonov`VariableImportanceByClassifiers`", "Categorization",
 CellLabel->"Context",
 CellID->691805123,ExpressionUUID->"0d6136cb-5b4f-43e7-922b-17b5e8dd1250"],

Cell["\<\
AntonAntonov/VariableImportanceByClassifiers/tutorial/\
Importanceofvariablesinvestigation\
\>", "Categorization",
 CellLabel->"URI",
 CellID->692237403,ExpressionUUID->"2ef072b1-5cf9-472b-ae9c-8aa872238fa0"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->1515116422,ExpressionUUID->"d308e9b4-f180-4a73-a337-7e14915d9e3b"],

Cell["XXXX", "Keywords",
 CellID->1848102075,ExpressionUUID->"30318671-50d8-406a-b004-409812360ff4"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1382, 1038},
WindowMargins->{{Automatic, 1000}, {Automatic, 77}},
TaggingRules-><|"Paclet" -> "AntonAntonov/VariableImportanceByClassifiers"|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "TechNotePageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"cb6147c1-3171-4cf6-b7b9-846e142d1e51"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 129, 1, 140, "Title",ExpressionUUID->"5193d711-90cb-485b-8804-7685d6872418",
 CellID->832223920],
Cell[CellGroupData[{
Cell[730, 27, 173, 2, 55, "Section",ExpressionUUID->"ca08e25c-8ff4-42f0-baec-29aeb63a6ec5",
 CellID->1274006278],
Cell[906, 31, 386, 7, 53, "Text",ExpressionUUID->"a9f6f076-f2db-4334-b0b1-c8a390d4a905",
 CellID->1811553756],
Cell[1295, 40, 1410, 27, 76, "Text",ExpressionUUID->"d3b95bb5-e269-4c3a-9d6c-cc0e0b2c4f93",
 CellID->1908313573],
Cell[2708, 69, 1153, 20, 76, "Text",ExpressionUUID->"1bc3b04c-b7b6-40c2-bc98-799479ea83c6",
 CellID->357953466]
}, Open  ]],
Cell[CellGroupData[{
Cell[3898, 94, 180, 2, 55, "Section",ExpressionUUID->"12d079c2-2089-47df-b782-b41376c50a09",
 CellID->1022207815],
Cell[4081, 98, 231, 4, 30, "Text",ExpressionUUID->"465ef130-4720-4a86-b180-3614efc8781b",
 CellID->377570705],
Cell[4315, 104, 263, 3, 31, "ItemNumbered",ExpressionUUID->"41e615dd-e50e-485a-bf28-85a70510716d",
 CellID->16662050],
Cell[4581, 109, 232, 3, 31, "ItemNumbered",ExpressionUUID->"f464ae33-ed53-472e-a418-ed7a88d6fb99",
 CellID->866200240],
Cell[4816, 114, 326, 6, 31, "ItemNumbered",ExpressionUUID->"725c17ef-239a-4a0f-b029-ca7898ad94cf",
 CellID->435790667],
Cell[5145, 122, 683, 18, 31, "ItemNumbered",ExpressionUUID->"61f14084-2353-45d7-840d-c16c9903eed8",
 CellID->1414503999],
Cell[5831, 142, 537, 12, 26, "Subitem",ExpressionUUID->"2d25358d-51e8-45d7-861f-a4b969b1f3bf",
 CellID->924738903],
Cell[6371, 156, 480, 10, 49, "ItemNumbered",ExpressionUUID->"a7005ea5-5764-4ed5-8da9-ec9fb6b17699",
 CellID->747589382],
Cell[6854, 168, 295, 6, 31, "ItemNumbered",ExpressionUUID->"a86449c5-3e93-427a-a435-3dee2895b343",
 CellID->1955408324],
Cell[7152, 176, 423, 8, 53, "Text",ExpressionUUID->"a4f96365-59b3-4875-a55c-cc4a604e09b6",
 CellID->1605451427],
Cell[7578, 186, 529, 8, 53, "Text",ExpressionUUID->"b85e66cc-c00a-4237-a27a-488aaa6b9827",
 CellID->1837592681],
Cell[8110, 196, 356, 6, 53, "Text",ExpressionUUID->"97bc411d-d3e3-4c67-8f02-03b322f5627b",
 CellID->1457862060]
}, Open  ]],
Cell[CellGroupData[{
Cell[8503, 207, 263, 3, 55, "Section",ExpressionUUID->"7e28dd3e-2a14-43f7-91e7-c66bf29adab0",
 CellID->1646713797],
Cell[8769, 212, 801, 18, 53, "Text",ExpressionUUID->"aa83b284-8f7c-4eb0-a6d2-325437ac1416",
 CellID->1697027290],
Cell[CellGroupData[{
Cell[9595, 234, 288, 3, 30, "Text",ExpressionUUID->"9c84a6dc-0a0a-4f9d-a249-636e2e886833",
 CellID->1207347223],
Cell[9886, 239, 624, 16, 56, "Input",ExpressionUUID->"e49b9da5-5a31-4ddb-b66a-5f507b6f74fe",
 CellID->311796458]
}, Open  ]],
Cell[10525, 258, 1015, 17, 102, "Text",ExpressionUUID->"0a4a92d2-2eb3-4c57-9c53-6941cf9b6a42",
 CellID->502970926],
Cell[CellGroupData[{
Cell[11565, 279, 562, 7, 30, "Text",ExpressionUUID->"cbdc49ae-06d3-4c9a-92b5-616bd01a2170",
 CellID->936718690],
Cell[12130, 288, 482, 8, 77, "Program",ExpressionUUID->"b78e47ac-55d0-4933-88d2-bfaaecc34c48",
 CellID->228406673]
}, Open  ]],
Cell[12627, 299, 1067, 19, 102, "Text",ExpressionUUID->"10e0a6f6-f4df-458a-971c-824477dfa16d",
 CellID->1277675922],
Cell[CellGroupData[{
Cell[13719, 322, 982, 18, 53, "Text",ExpressionUUID->"474b47a4-6aa1-4650-8e77-63daa300e48e",
 CellID->1210234701],
Cell[14704, 342, 443, 10, 56, "Input",ExpressionUUID->"8382f5b4-0218-48b6-ba19-c52a625b41c5",
 CellID->1596998970]
}, Open  ]],
Cell[CellGroupData[{
Cell[15184, 357, 595, 14, 30, "Text",ExpressionUUID->"20c5f584-9b70-4670-9bde-cce4f7322394",
 CellID->393422036],
Cell[15782, 373, 520, 11, 56, "Input",ExpressionUUID->"a03a953d-b751-47ad-9901-debcdb9df238",
 CellID->352554106]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16351, 390, 405, 5, 55, "Section",ExpressionUUID->"73635d27-3c1f-4586-a5ce-5b98af3a9e0b",
 CellID->1511068584],
Cell[CellGroupData[{
Cell[16781, 399, 303, 4, 30, "Text",ExpressionUUID->"4afd07f3-3afd-451d-bda8-2e23173ffb35",
 CellID->388081866],
Cell[17087, 405, 1019, 25, 79, "Input",ExpressionUUID->"b21585e2-4b80-4a73-ad84-f456819bff7e",
 CellID->584085923]
}, Open  ]],
Cell[CellGroupData[{
Cell[18143, 435, 204, 2, 30, "Text",ExpressionUUID->"10e11df9-af46-4169-9dde-95afca28bea3",
 CellID->584357424],
Cell[CellGroupData[{
Cell[18372, 441, 549, 12, 79, "Input",ExpressionUUID->"2d71d889-65b3-4baf-bc35-ca995adf7ff4",
 CellID->852507437],
Cell[18924, 455, 330, 7, 31, "Output",ExpressionUUID->"1ff0ecfe-5289-4546-b58c-430e1ac05ce2",
 CellID->2028774047]
}, Open  ]],
Cell[CellGroupData[{
Cell[19291, 467, 610, 15, 56, "Input",ExpressionUUID->"b037d58b-dea4-4f5c-91f6-7b6e98fbf002",
 CellID->1371339339],
Cell[19904, 484, 241, 5, 31, "Output",ExpressionUUID->"334da691-996f-4cff-b638-1d2ee1160184",
 CellID->2007544510]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20194, 495, 233, 3, 30, "Text",ExpressionUUID->"d39e4043-7a32-4004-9f00-7696bdee08bd",
 CellID->957287290],
Cell[CellGroupData[{
Cell[20452, 502, 835, 23, 79, "Input",ExpressionUUID->"b22a7829-d4be-4ad6-b334-9f6c147f083a",
 CellID->179999706],
Cell[21290, 527, 4178, 120, 153, "Output",ExpressionUUID->"3eaf52ca-36bd-4f1d-81ef-a5736a652814",
 CellID->1685001553]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25517, 653, 257, 3, 30, "Text",ExpressionUUID->"80353361-e11e-4701-8052-e9efc931a2c2",
 CellID->415882133],
Cell[CellGroupData[{
Cell[25799, 660, 444, 9, 32, "Input",ExpressionUUID->"cd2ae526-4dac-4f61-8e4c-584fc364392f",
 CellID->1819221993],
Cell[26246, 671, 107066, 1842, 62, "Output",ExpressionUUID->"d0d363eb-12cf-4a8a-8702-ab432f53b092",
 CellID->954248282]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[133361, 2519, 270, 3, 30, "Text",ExpressionUUID->"931f15b9-0ff5-43a3-a2b0-9a9e449997cf",
 CellID->216085518],
Cell[CellGroupData[{
Cell[133656, 2526, 451, 9, 32, "Input",ExpressionUUID->"5b2a3537-7b05-45d5-90a3-932980d5ff43",
 CellID->354453949],
Cell[134110, 2537, 529, 10, 54, "Output",ExpressionUUID->"31da86dd-0176-4d94-9fef-5a295f259fd8",
 CellID->642999778]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[134688, 2553, 259, 3, 30, "Text",ExpressionUUID->"801c0258-7387-4774-9fb2-10b99945069e",
 CellID->966519365],
Cell[CellGroupData[{
Cell[134972, 2560, 1111, 27, 174, "Input",ExpressionUUID->"a56c69f6-2c57-4cb8-92fa-00cb13368c0a",
 CellID->724661647],
Cell[136086, 2589, 1228, 33, 119, "Output",ExpressionUUID->"4f2972ce-4e67-4530-8e16-ddf7c71cb06f",
 CellID->759557142]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137363, 2628, 519, 9, 88, "Text",ExpressionUUID->"2cc9565e-ceac-465b-9814-e4a76c3f7473",
 CellID->426412773],
Cell[CellGroupData[{
Cell[137907, 2641, 1669, 42, 79, "Input",ExpressionUUID->"24ab10af-72c8-42ad-946c-7ee7d2d8836a",
 CellID->566545772],
Cell[139579, 2685, 52537, 1248, 455, "Output",ExpressionUUID->"dda6f0e4-7530-40d3-ab25-ce37fe06ef15",
 CellID->1234087826]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[192165, 3939, 524, 9, 65, "Text",ExpressionUUID->"fb4eca22-a85e-465f-8a7f-8d5cf490f9c8",
 CellID->1569257709],
Cell[CellGroupData[{
Cell[192714, 3952, 652, 12, 56, "Input",ExpressionUUID->"c1da8097-9caf-4a37-a50f-9ee7cadf7bdc",
 CellID->1267646356],
Cell[193369, 3966, 798, 20, 54, "Output",ExpressionUUID->"f9dfb950-cf28-42eb-bc6e-e59624ae7fea",
 CellID->917028856]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194216, 3992, 466, 8, 65, "Text",ExpressionUUID->"caa72473-8e52-44c4-bfac-a1d9bc4961cc",
 CellID->1752313785],
Cell[CellGroupData[{
Cell[194707, 4004, 1162, 25, 79, "Input",ExpressionUUID->"22755d44-0336-4f19-952a-697ce2409db6",
 CellID->547049537],
Cell[195872, 4031, 628, 14, 54, "Output",ExpressionUUID->"1d5179e6-6da6-40e7-a3e8-e4357e74bcd0",
 CellID->13848273]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[196549, 4051, 523, 10, 56, "Text",ExpressionUUID->"09e65dc2-768a-493a-88bb-5d9859ec2ba0",
 CellID->218448871],
Cell[197075, 4063, 2225, 45, 197, "Input",ExpressionUUID->"b0eccd0a-886e-4459-8ce1-5e02d8d1faca",
 CellID->1420622174],
Cell[CellGroupData[{
Cell[199325, 4112, 604, 9, 32, "Input",ExpressionUUID->"81f02fb7-3d88-4acf-9722-a15d791ee287",
 CellID->673691072],
Cell[199932, 4123, 72206, 1335, 412, "Output",ExpressionUUID->"a6fc46b5-e305-4cbf-974d-56c11c4656f2",
 CellID->1679353213]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[272199, 5465, 406, 5, 55, "Section",ExpressionUUID->"4a6dc9a4-9bed-4305-9e49-3826846c2148",
 CellID->1079493977],
Cell[CellGroupData[{
Cell[272630, 5474, 304, 4, 30, "Text",ExpressionUUID->"21ed4414-009e-4fd9-99b4-7fc2f4f845af",
 CellID->1113421583],
Cell[272937, 5480, 901, 23, 79, "Input",ExpressionUUID->"d747d0b0-e43e-4e4b-8456-0412eb9a3328",
 CellID->104045523]
}, Open  ]],
Cell[CellGroupData[{
Cell[273875, 5508, 204, 2, 30, "Text",ExpressionUUID->"8a0dd16d-a5e3-4b2a-bc64-08bab9d2b82e",
 CellID->641416403],
Cell[CellGroupData[{
Cell[274104, 5514, 849, 21, 126, "Input",ExpressionUUID->"bce3a413-33ed-48c8-a2b8-56bfef6b9f61",
 CellID->2065060928],
Cell[274956, 5537, 927, 17, 125, "Output",ExpressionUUID->"6a7c050d-7f2c-46c7-a22e-2fa9c40bb206",
 CellID->511878370]
}, Open  ]],
Cell[CellGroupData[{
Cell[275920, 5559, 607, 15, 56, "Input",ExpressionUUID->"f0f1a5ef-ef89-4943-b481-ac7d9878dced",
 CellID->1825348810],
Cell[276530, 5576, 243, 5, 31, "Output",ExpressionUUID->"3015dd1e-db72-46ca-b15d-2b5e5bcff74d",
 CellID->320274708]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[276822, 5587, 233, 3, 30, "Text",ExpressionUUID->"2f147c92-9db6-499a-8792-bc14b438573f",
 CellID->122751475],
Cell[CellGroupData[{
Cell[277080, 5594, 904, 24, 103, "Input",ExpressionUUID->"8364e1ee-d490-4e52-8bfa-54782896aaef",
 CellID->1499739205],
Cell[277987, 5620, 23069, 671, 975, "Output",ExpressionUUID->"5a50c2c8-6003-44a1-a84e-9799474822cb",
 CellID->1262997974]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[301105, 6297, 260, 3, 30, "Text",ExpressionUUID->"0174c4a3-ade7-4b99-9d02-d2ebe9130432",
 CellID->1755118126],
Cell[CellGroupData[{
Cell[301390, 6304, 443, 9, 32, "Input",ExpressionUUID->"35526990-0832-44dc-8ebf-68562448ed5e",
 CellID->434968490],
Cell[301836, 6315, 151077, 2573, 62, "Output",ExpressionUUID->"47ea79cd-09b3-4378-a705-490e8cd44d39",
 CellID->846428903]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[452962, 8894, 270, 3, 30, "Text",ExpressionUUID->"93561c42-d442-42c2-a410-745953589cd3",
 CellID->185913939],
Cell[CellGroupData[{
Cell[453257, 8901, 454, 9, 32, "Input",ExpressionUUID->"30660acf-6b32-4a1c-93c9-46068875d164",
 CellID->66866388],
Cell[453714, 8912, 1835, 32, 196, "Output",ExpressionUUID->"e4c73886-8b54-456d-a7c4-19b16ed87a6c",
 CellID->1920888698]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[455598, 8950, 262, 3, 30, "Text",ExpressionUUID->"69deff9a-dfe0-4b56-ab25-c9a9c200e0e4",
 CellID->1672122580],
Cell[CellGroupData[{
Cell[455885, 8957, 1112, 27, 174, "Input",ExpressionUUID->"5fd73fdc-ce72-4c5d-b243-c7dbb2b00c33",
 CellID->1393197418],
Cell[457000, 8986, 2082, 52, 522, "Output",ExpressionUUID->"7b56274c-95a2-420e-a8b4-2ed2a5145377",
 CellID->1254681935]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[459131, 9044, 682, 11, 88, "Text",ExpressionUUID->"8fd339c5-e87f-4c4d-9a74-e5d3a86ad519",
 CellID->1740514500],
Cell[CellGroupData[{
Cell[459838, 9059, 1559, 38, 103, "Input",ExpressionUUID->"4f48dd25-510b-4bc4-87e7-e5816a32b13e",
 CellID->1952445713],
Cell[461400, 9099, 41781, 943, 468, "Output",ExpressionUUID->"aa354301-e794-4162-a060-bd081fbb854a",
 CellID->1297351652]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[503230, 10048, 259, 5, 30, "Text",ExpressionUUID->"0f2a56d1-f413-4ffe-9b75-be49734b6a79",
 CellID->1197495207],
Cell[CellGroupData[{
Cell[503514, 10057, 1282, 35, 103, "Input",ExpressionUUID->"85135f28-442a-4420-b72c-41059ff37350",
 CellID->85204365],
Cell[504799, 10094, 45547, 1037, 464, "Output",ExpressionUUID->"054c0a71-b308-430f-b074-1b6396597b3c",
 CellID->1187747173]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[550395, 11137, 498, 9, 65, "Text",ExpressionUUID->"d677119a-4c9b-492c-8081-4c6602a6920f",
 CellID->1529530214],
Cell[CellGroupData[{
Cell[550918, 11150, 629, 12, 56, "Input",ExpressionUUID->"8aef9abb-3a61-44df-a0cf-d16f11fb783f",
 CellID->1435052108],
Cell[551550, 11164, 3027, 76, 243, "Output",ExpressionUUID->"7457c5ae-029e-4b61-9491-01eb46de25d8",
 CellID->1606237746]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[554626, 11246, 463, 8, 65, "Text",ExpressionUUID->"1108a780-4ef1-4efc-a726-7ee0c7fd569b",
 CellID->336098632],
Cell[CellGroupData[{
Cell[555114, 11258, 1138, 25, 79, "Input",ExpressionUUID->"e112534a-82f4-4242-ad01-8e2dd6dc66e4",
 CellID->927716414],
Cell[556255, 11285, 2359, 51, 196, "Output",ExpressionUUID->"e208695c-917c-4d26-8a22-24911fb12e36",
 CellID->20870585]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[558663, 11342, 521, 10, 56, "Text",ExpressionUUID->"753c5f2e-5903-469e-980d-a53cc80d2226",
 CellID->261284131],
Cell[CellGroupData[{
Cell[559209, 11356, 2225, 46, 197, "Input",ExpressionUUID->"9677cc11-db67-4bca-b134-c81106e6b86d",
 CellID->1945815249],
Cell[561437, 11404, 93355, 1771, 229, "Output",ExpressionUUID->"a4656d7d-acdc-4259-9853-5970ab003a8b",
 CellID->221886230]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[654853, 13182, 170, 2, 55, "Section",ExpressionUUID->"536f1e3b-4e11-4bfd-bb27-2ce4377b7048",
 CellID->327821551],
Cell[655026, 13186, 940, 21, 53, "Text",ExpressionUUID->"2299de7a-f371-45a0-9fa8-c3f0dcc4cd10",
 CellID->1401253102],
Cell[655969, 13209, 1515, 37, 76, "Text",ExpressionUUID->"3399f0fa-6643-440e-b7d9-594f9b59e535",
 CellID->1555212312],
Cell[657487, 13248, 988, 22, 53, "Text",ExpressionUUID->"e42f772c-760a-47b2-9215-0938f306d75f",
 CellID->1429860147],
Cell[658478, 13272, 841, 21, 30, "Text",ExpressionUUID->"9dbd158d-40c4-4c6b-a788-f9beb7a36b49",
 CellID->1317480699],
Cell[659322, 13295, 327, 6, 30, "Text",ExpressionUUID->"b560fed3-f08e-4af1-8ff8-e78f3eeb6f7a",
 CellID->194223876]
}, Open  ]],
Cell[CellGroupData[{
Cell[659686, 13306, 192, 2, 91, "TutorialMoreAboutSection",ExpressionUUID->"f999bdb7-9e2d-4944-a189-5794aa8557d8",
 CellID->1977650342],
Cell[659881, 13310, 109, 1, 29, "TutorialMoreAbout",ExpressionUUID->"4399d349-de44-4e73-b4d0-e430bd656daf",
 CellID->1764893375]
}, Open  ]],
Cell[CellGroupData[{
Cell[660027, 13316, 129, 1, 91, "RelatedTutorialsSection",ExpressionUUID->"03b5da49-3bff-4ee1-9350-2cfc82c8fc00",
 CellID->1518821261],
Cell[660159, 13319, 108, 1, 29, "RelatedTutorials",ExpressionUUID->"573ba708-79bf-47dc-b0df-0dfa2c5ff263",
 CellID->1838305385]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[660316, 13326, 110, 1, 88, "MetadataSection",ExpressionUUID->"478a1e25-31cd-439d-a4cb-75e53bdb7cfd",
 CellID->551376306],
Cell[660429, 13329, 547, 13, 31, "History",ExpressionUUID->"884c6784-0448-4878-b74c-9a9e43fa67ed",
 CellID->589638137],
Cell[CellGroupData[{
Cell[661001, 13346, 123, 1, 25, "CategorizationSection",ExpressionUUID->"caaa5999-b0e1-4b51-8531-f2b90d116d81",
 CellID->1558621301],
Cell[661127, 13349, 137, 2, 87, "Categorization",ExpressionUUID->"a307e5b0-721e-45f7-aa31-c4d67384c9d7",
 CellID->742679801],
Cell[661267, 13353, 173, 2, 87, "Categorization",ExpressionUUID->"bb1e6dcc-cab0-4b8e-931b-b5c018cdfbac",
 CellID->1044459043],
Cell[661443, 13357, 169, 2, 87, "Categorization",ExpressionUUID->"0d6136cb-5b4f-43e7-922b-17b5e8dd1250",
 CellID->691805123],
Cell[661615, 13361, 218, 5, 87, "Categorization",ExpressionUUID->"2ef072b1-5cf9-472b-ae9c-8aa872238fa0",
 CellID->692237403]
}, Closed]],
Cell[CellGroupData[{
Cell[661870, 13371, 111, 1, 24, "KeywordsSection",ExpressionUUID->"d308e9b4-f180-4a73-a337-7e14915d9e3b",
 CellID->1515116422],
Cell[661984, 13374, 100, 1, 87, "Keywords",ExpressionUUID->"30318671-50d8-406a-b004-409812360ff4",
 CellID->1848102075]
}, Closed]]
}, Open  ]]
}
]
*)

